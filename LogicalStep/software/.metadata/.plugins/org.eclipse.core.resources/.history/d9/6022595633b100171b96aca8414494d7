/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include "system.h"
#include "sys/alt_irq.h"
#include "altera_avalon_pio_regs.h"

typedef enum{
	false, true
}bool;

static void isr(void* context, alt_u32 id){

	// Generate response pulse
	IOWR(RESPONSE_OUT_BASE, 0, 0x1);
	IOWR(RESPONSE_OUT_BASE, 0, 0x0);
	// Clear IRQ
	IOWR(STIMULUS_IN_BASE, 3, 0x0);
}

int background()
{
	IOWR(LED_PIO_BASE, 0, 0x1);
	int j;
	int x = 0;
	int grainsize = 4;
	int g_taskProcessed = 0;

	for(j = 0; j < grainsize; j++)
	{
		g_taskProcessed++;
	}
	IOWR(LED_PIO_BASE, 0, 0x0);
	return x;
}

int main()
{

	printf("Using Interrupt:\n");
	int background_count = 0;
	int latency = 0;
	int missed_pulses = 0;
	int duty_cycle = 50;

	alt_irq_register(STIMULUS_IN_IRQ, (void*) 0, isr);

	// Enable Interrupt for stimulus
	IOWR(STIMULUS_IN_BASE, 2, 0x1);

	int i = 0;
	for(i = 2; i <= 2500; i+=2){

		IOWR(EGM_BASE, 2, 2*i);
		IOWR(EGM_BASE, 3, i);
		IOWR(EGM_BASE, 0, 1);


		while(IORD(EGM_BASE, 1) != 0){
			if (background() == 0) {
				background_count++;
			}
		}

		latency = IORD(EGM_BASE, 4);
		missed_pulses = IORD(EGM_BASE, 5);
		printf("Period: %d, Latency: %d, MissedPulses: %d, BackgroundCounts: %d, DutyCycle: %d\n", i, latency, missed_pulses, background_count, duty_cycle);

		IOWR(EGM_BASE, 0, 0);
	}


//	printf("Using Tight Polling:\n");



	return 0;
}


