
Lab_0_post_lab.elf:     file format elf32-littlenios2
Lab_0_post_lab.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00004410 memsz 0x00004410 flags r-x
    LOAD off    0x00005430 vaddr 0x00804430 paddr 0x00805cd4 align 2**12
         filesz 0x000018a4 memsz 0x000018a4 flags rw-
    LOAD off    0x00007578 vaddr 0x00807578 paddr 0x00807578 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003eec  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000300  00804130  00804130  00005130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000018a4  00804430  00805cd4  00005430  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00807578  00807578  00007578  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_0      00000000  00807698  00807698  00006cd4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00006cd4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000710  00000000  00000000  00006cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000097e5  00000000  00000000  00007408  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003579  00000000  00000000  00010bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003a7b  00000000  00000000  00014166  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000f30  00000000  00000000  00017be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002331  00000000  00000000  00018b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000b87  00000000  00000000  0001ae45  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0001b9cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000138  00000000  00000000  0001ba30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001dcb3  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001dcb6  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001dcc2  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001dcc3  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001dcc4  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001dcc8  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001dccc  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0001dcd0  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0001dcdb  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0001dce6  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0001dcf1  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000023  00000000  00000000  0001dcf4  2**0
                  CONTENTS, READONLY
 29 .jdi          00003c54  00000000  00000000  0001dd17  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008ff79  00000000  00000000  0002196b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00804130 l    d  .rodata	00000000 .rodata
00804430 l    d  .rwdata	00000000 .rwdata
00807578 l    d  .bss	00000000 .bss
00807698 l    d  .sdram_0	00000000 .sdram_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab_0_post_lab_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
008002d0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080042c l     F .text	00000038 alt_dev_reg
00804430 l     O .rwdata	00001060 jtag_uart_0
00805490 l     O .rwdata	00000120 lcd_display
008055b0 l     O .rwdata	000000c4 uart
00805674 l     O .rwdata	00000030 audio_i2c_config
008056a4 l     O .rwdata	00000030 Audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00800764 l     F .text	00000208 altera_avalon_jtag_uart_irq
0080096c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00805ca0 l     O .rwdata	00000004 colstart
00800f8c l     F .text	000000b4 lcd_write_command
00801040 l     F .text	000000d4 lcd_write_data
00801114 l     F .text	000000cc lcd_clear_screen
008011e0 l     F .text	000001e8 lcd_repaint_screen
008013c8 l     F .text	000000c8 lcd_scroll_up
00801490 l     F .text	000002a0 lcd_handle_escape
00801c18 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00801e5c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00802104 l     F .text	0000009c altera_avalon_uart_irq
008021a0 l     F .text	000000e0 altera_avalon_uart_rxirq
00802280 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00802418 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00802644 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00802980 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00802ae4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00802b10 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00802cec l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00802fd4 l     F .text	00000050 alt_get_errno
00803024 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
008042a9 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0080587c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00803fd0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_exit.c
00807590 g     O .bss	00000004 alt_instruction_exception_handler
008003b4 g     F .text	00000078 alt_main
00807598 g     O .bss	00000100 alt_irq
00805cd4 g       *ABS*	00000000 __flash_rwdata_start
00803474 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00807594 g     O .bss	00000004 errno
0080757c g     O .bss	00000004 alt_argv
0080dca0 g       *ABS*	00000000 _gp
00803444 g     F .text	00000030 usleep
008056fc g     O .rwdata	00000180 alt_fd_list
008035ec g     F .text	00000090 alt_find_dev
00803a34 g     F .text	00000138 memcpy
00802dac g     F .text	00000078 alt_io_redirect
00804130 g       *ABS*	00000000 __DTOR_END__
008038d0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00800b68 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
008040ec g     F .text	00000008 .hidden __udivsi3
00803844 g     F .text	0000008c alt_icache_flush
00805cb4 g     O .rwdata	00000004 alt_max_fd
00802e24 g     F .text	000001b0 alt_irq_register
00805ccc g     O .rwdata	00000004 _global_impure_ptr
00807698 g       *ABS*	00000000 __bss_end
00803340 g     F .text	00000104 alt_tick
00802064 g     F .text	000000a0 altera_avalon_uart_init
008032a8 g     F .text	00000098 alt_alarm_stop
00807584 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d4 alt_irq_handler
008056d4 g     O .rwdata	00000028 alt_dev_null
00802aa0 g     F .text	00000044 alt_dcache_flush_all
00805cd4 g       *ABS*	00000000 __ram_rwdata_end
00805cac g     O .rwdata	00000008 alt_dev_list
00804430 g       *ABS*	00000000 __ram_rodata_end
008040f4 g     F .text	00000008 .hidden __umodsi3
00807698 g       *ABS*	00000000 end
00801730 g     F .text	000004e8 altera_avalon_lcd_16207_write
00802694 g     F .text	000001ac altera_avalon_uart_write
008006ac g     F .text	000000b8 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00804130 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00801ed4 g     F .text	00000080 alt_avalon_timer_sc_init
00801fb4 g     F .text	00000060 altera_avalon_uart_write_fd
00802014 g     F .text	00000050 altera_avalon_uart_close_fd
00800d74 g     F .text	00000218 altera_avalon_jtag_uart_write
00803e3c g     F .text	00000194 __call_exitprocs
00800244 g     F .text	0000004c _start
00807588 g     O .bss	00000004 _alt_tick_rate
0080758c g     O .bss	00000004 _alt_nticks
00800498 g     F .text	000000b0 alt_sys_init
00803d28 g     F .text	00000114 __register_exitproc
00800a14 g     F .text	00000068 altera_avalon_jtag_uart_close
00804430 g       *ABS*	00000000 __ram_rwdata_start
00804130 g       *ABS*	00000000 __ram_rodata_start
00800548 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00803790 g     F .text	000000b4 alt_get_fd
00803494 g     F .text	00000158 alt_busy_sleep
008039b8 g     F .text	0000007c memcmp
00800608 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00807698 g       *ABS*	00000000 __alt_stack_base
00800658 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080367c g     F .text	00000114 alt_find_file
00802b60 g     F .text	000000a4 alt_dev_llist_insert
00807578 g       *ABS*	00000000 __bss_start
00803b6c g     F .text	00000124 memset
00800290 g     F .text	00000040 main
00807580 g     O .bss	00000004 alt_envp
008005a8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00801cc4 g     F .text	00000138 altera_avalon_lcd_16207_init
00805cb8 g     O .rwdata	00000004 alt_errno
0080403c g     F .text	00000054 .hidden __divsi3
00804130 g       *ABS*	00000000 __CTOR_END__
00804130 g       *ABS*	00000000 __flash_rodata_start
00804130 g       *ABS*	00000000 __DTOR_LIST__
00800464 g     F .text	00000034 alt_irq_init
00803248 g     F .text	00000060 alt_release_fd
0080396c g     F .text	00000014 atexit
00805cd0 g     O .rwdata	00000004 _impure_ptr
00807578 g     O .bss	00000004 alt_argc
00802c60 g     F .text	0000005c _do_dtors
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
00800020 g       .exceptions	00000000 alt_irq_entry
00801dfc g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00805ca4 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00805cd4 g       *ABS*	00000000 _edata
00801f54 g     F .text	00000060 altera_avalon_uart_read_fd
00807698 g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
00800a7c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00803980 g     F .text	00000038 exit
00804090 g     F .text	0000005c .hidden __modsi3
00805cc8 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008041a8 g     O .rodata	00000101 _ctype_
008023c4 g     F .text	00000054 altera_avalon_uart_close
008040fc g     F .text	00000034 _exit
00802840 g     F .text	00000140 alt_alarm_start
00803c90 g     F .text	00000098 strlen
008030f0 g     F .text	00000158 open
00802cbc g     F .text	00000030 alt_icache_flush_all
00805cbc g     O .rwdata	00000004 alt_priority_mask
00802468 g     F .text	000001dc altera_avalon_uart_read
00805cc0 g     O .rwdata	00000008 alt_alarm_list
00802c04 g     F .text	0000005c _do_ctors
008029d0 g     F .text	000000d0 close
00800334 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  80008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001526 	beq	r2,zero,800190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80013c:	00802034 	movhi	r2,128
  800140:	109d6604 	addi	r2,r2,30104
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802034 	movhi	r2,128
  800158:	109d6604 	addi	r2,r2,30104
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	21000104 	addi	r4,r4,4
  800168:	1105883a 	add	r2,r2,r4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	e17ffd17 	ldw	r5,-12(fp)
  800178:	183ee83a 	callr	r3
#endif
        break;
  80017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800180:	0005313a 	rdctl	r2,ipending
  800184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800188:	e0bfff17 	ldw	r2,-4(fp)
  80018c:	00000706 	br	8001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  800190:	e0bffc17 	ldw	r2,-16(fp)
  800194:	1085883a 	add	r2,r2,r2
  800198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  80019c:	e0bffd17 	ldw	r2,-12(fp)
  8001a0:	10800044 	addi	r2,r2,1
  8001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a8:	003fe006 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001b0:	e0bffb17 	ldw	r2,-20(fp)
  8001b4:	103fda1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b8:	0001883a 	nop
}
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a63c17 	ldw	r2,-26384(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a63c17 	ldw	r2,-26384(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	1809883a 	mov	r4,r3
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	e1bffe17 	ldw	r6,-8(fp)
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_data_end+0xff800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802034 	movhi	gp,128
    ori gp, gp, %lo(_gp)
  800260:	d6b72814 	ori	gp,gp,56480
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802034 	movhi	r2,128
    ori r2, r2, %lo(__bss_start)
  800268:	109d5e14 	ori	r2,r2,30072

    movhi r3, %hi(__bss_end)
  80026c:	00c02034 	movhi	r3,128
    ori r3, r3, %lo(__bss_end)
  800270:	18dda614 	ori	r3,r3,30360

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_data_end+0xff800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08003340 	call	800334 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08003b40 	call	8003b4 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_data_end+0xff80028c>

00800290 <main>:
#include <stdio.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"

int main()
{
  800290:	defffd04 	addi	sp,sp,-12
  800294:	df000215 	stw	fp,8(sp)
  800298:	df000204 	addi	fp,sp,8
  for(;;){
	  int button = IORD(BUTTON_PIO_BASE, 0);
  80029c:	00804034 	movhi	r2,256
  8002a0:	10844804 	addi	r2,r2,4384
  8002a4:	10800037 	ldwio	r2,0(r2)
  8002a8:	e0bffe15 	stw	r2,-8(fp)
	  int switches = IORD(SWITCH_PIO_BASE, 0);
  8002ac:	00804034 	movhi	r2,256
  8002b0:	10844404 	addi	r2,r2,4368
  8002b4:	10800037 	ldwio	r2,0(r2)
  8002b8:	e0bfff15 	stw	r2,-4(fp)
	  IOWR(LED_PIO_BASE, 0, button);
  8002bc:	00804034 	movhi	r2,256
  8002c0:	10844c04 	addi	r2,r2,4400
  8002c4:	e0fffe17 	ldw	r3,-8(fp)
  8002c8:	10c00035 	stwio	r3,0(r2)
  }
  8002cc:	003ff306 	br	80029c <__alt_data_end+0xff80029c>

008002d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  8002d0:	defffc04 	addi	sp,sp,-16
  8002d4:	df000315 	stw	fp,12(sp)
  8002d8:	df000304 	addi	fp,sp,12
  8002dc:	e13ffd15 	stw	r4,-12(fp)
  8002e0:	e17ffe15 	stw	r5,-8(fp)
  8002e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  8002e8:	e0fffe17 	ldw	r3,-8(fp)
  8002ec:	e0bffd17 	ldw	r2,-12(fp)
  8002f0:	18800c26 	beq	r3,r2,800324 <alt_load_section+0x54>
  {
    while( to != end )
  8002f4:	00000806 	br	800318 <alt_load_section+0x48>
    {
      *to++ = *from++;
  8002f8:	e0bffe17 	ldw	r2,-8(fp)
  8002fc:	10c00104 	addi	r3,r2,4
  800300:	e0fffe15 	stw	r3,-8(fp)
  800304:	e0fffd17 	ldw	r3,-12(fp)
  800308:	19000104 	addi	r4,r3,4
  80030c:	e13ffd15 	stw	r4,-12(fp)
  800310:	18c00017 	ldw	r3,0(r3)
  800314:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  800318:	e0fffe17 	ldw	r3,-8(fp)
  80031c:	e0bfff17 	ldw	r2,-4(fp)
  800320:	18bff51e 	bne	r3,r2,8002f8 <__alt_data_end+0xff8002f8>
    {
      *to++ = *from++;
    }
  }
}
  800324:	e037883a 	mov	sp,fp
  800328:	df000017 	ldw	fp,0(sp)
  80032c:	dec00104 	addi	sp,sp,4
  800330:	f800283a 	ret

00800334 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  800334:	defffe04 	addi	sp,sp,-8
  800338:	dfc00115 	stw	ra,4(sp)
  80033c:	df000015 	stw	fp,0(sp)
  800340:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  800344:	01002034 	movhi	r4,128
  800348:	21173504 	addi	r4,r4,23764
  80034c:	01402034 	movhi	r5,128
  800350:	29510c04 	addi	r5,r5,17456
  800354:	01802034 	movhi	r6,128
  800358:	31973504 	addi	r6,r6,23764
  80035c:	08002d00 	call	8002d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  800360:	01002034 	movhi	r4,128
  800364:	21000804 	addi	r4,r4,32
  800368:	01402034 	movhi	r5,128
  80036c:	29400804 	addi	r5,r5,32
  800370:	01802034 	movhi	r6,128
  800374:	31809104 	addi	r6,r6,580
  800378:	08002d00 	call	8002d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80037c:	01002034 	movhi	r4,128
  800380:	21104c04 	addi	r4,r4,16688
  800384:	01402034 	movhi	r5,128
  800388:	29504c04 	addi	r5,r5,16688
  80038c:	01802034 	movhi	r6,128
  800390:	31910c04 	addi	r6,r6,17456
  800394:	08002d00 	call	8002d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  800398:	0802aa00 	call	802aa0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80039c:	0802cbc0 	call	802cbc <alt_icache_flush_all>
}
  8003a0:	e037883a 	mov	sp,fp
  8003a4:	dfc00117 	ldw	ra,4(sp)
  8003a8:	df000017 	ldw	fp,0(sp)
  8003ac:	dec00204 	addi	sp,sp,8
  8003b0:	f800283a 	ret

008003b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8003b4:	defffd04 	addi	sp,sp,-12
  8003b8:	dfc00215 	stw	ra,8(sp)
  8003bc:	df000115 	stw	fp,4(sp)
  8003c0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8003c4:	0009883a 	mov	r4,zero
  8003c8:	08004640 	call	800464 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8003cc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8003d0:	08004980 	call	800498 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8003d4:	01002034 	movhi	r4,128
  8003d8:	21104c04 	addi	r4,r4,16688
  8003dc:	01402034 	movhi	r5,128
  8003e0:	29504c04 	addi	r5,r5,16688
  8003e4:	01802034 	movhi	r6,128
  8003e8:	31904c04 	addi	r6,r6,16688
  8003ec:	0802dac0 	call	802dac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8003f0:	0802c040 	call	802c04 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8003f4:	01002034 	movhi	r4,128
  8003f8:	210b1804 	addi	r4,r4,11360
  8003fc:	080396c0 	call	80396c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  800400:	d1263617 	ldw	r4,-26408(gp)
  800404:	d0e63717 	ldw	r3,-26404(gp)
  800408:	d0a63817 	ldw	r2,-26400(gp)
  80040c:	180b883a 	mov	r5,r3
  800410:	100d883a 	mov	r6,r2
  800414:	08002900 	call	800290 <main>
  800418:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80041c:	01000044 	movi	r4,1
  800420:	08029d00 	call	8029d0 <close>
  exit (result);
  800424:	e13fff17 	ldw	r4,-4(fp)
  800428:	08039800 	call	803980 <exit>

0080042c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80042c:	defffd04 	addi	sp,sp,-12
  800430:	dfc00215 	stw	ra,8(sp)
  800434:	df000115 	stw	fp,4(sp)
  800438:	df000104 	addi	fp,sp,4
  80043c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  800440:	e13fff17 	ldw	r4,-4(fp)
  800444:	01402034 	movhi	r5,128
  800448:	29572b04 	addi	r5,r5,23724
  80044c:	0802b600 	call	802b60 <alt_dev_llist_insert>
}
  800450:	e037883a 	mov	sp,fp
  800454:	dfc00117 	ldw	ra,4(sp)
  800458:	df000017 	ldw	fp,0(sp)
  80045c:	dec00204 	addi	sp,sp,8
  800460:	f800283a 	ret

00800464 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  800464:	defffd04 	addi	sp,sp,-12
  800468:	dfc00215 	stw	ra,8(sp)
  80046c:	df000115 	stw	fp,4(sp)
  800470:	df000104 	addi	fp,sp,4
  800474:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  800478:	08034740 	call	803474 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80047c:	00800044 	movi	r2,1
  800480:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  800484:	e037883a 	mov	sp,fp
  800488:	dfc00117 	ldw	ra,4(sp)
  80048c:	df000017 	ldw	fp,0(sp)
  800490:	dec00204 	addi	sp,sp,8
  800494:	f800283a 	ret

00800498 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  800498:	defffe04 	addi	sp,sp,-8
  80049c:	dfc00115 	stw	ra,4(sp)
  8004a0:	df000015 	stw	fp,0(sp)
  8004a4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
  8004a8:	01004034 	movhi	r4,256
  8004ac:	21042004 	addi	r4,r4,4224
  8004b0:	000b883a 	mov	r5,zero
  8004b4:	01800104 	movi	r6,4
  8004b8:	01c0fa04 	movi	r7,1000
  8004bc:	0801ed40 	call	801ed4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  8004c0:	01002034 	movhi	r4,128
  8004c4:	21111604 	addi	r4,r4,17496
  8004c8:	000b883a 	mov	r5,zero
  8004cc:	000d883a 	mov	r6,zero
  8004d0:	08006ac0 	call	8006ac <altera_avalon_jtag_uart_init>
  8004d4:	01002034 	movhi	r4,128
  8004d8:	21110c04 	addi	r4,r4,17456
  8004dc:	080042c0 	call	80042c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  8004e0:	01002034 	movhi	r4,128
  8004e4:	21152e04 	addi	r4,r4,21688
  8004e8:	0801cc40 	call	801cc4 <altera_avalon_lcd_16207_init>
  8004ec:	01002034 	movhi	r4,128
  8004f0:	21152404 	addi	r4,r4,21648
  8004f4:	080042c0 	call	80042c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  8004f8:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  8004fc:	01002034 	movhi	r4,128
  800500:	21157604 	addi	r4,r4,21976
  800504:	000b883a 	mov	r5,zero
  800508:	018000c4 	movi	r6,3
  80050c:	08020640 	call	802064 <altera_avalon_uart_init>
  800510:	01002034 	movhi	r4,128
  800514:	21156c04 	addi	r4,r4,21936
  800518:	080042c0 	call	80042c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_I2C_CONFIG, audio_i2c_config);
  80051c:	01002034 	movhi	r4,128
  800520:	21159d04 	addi	r4,r4,22132
  800524:	080042c0 	call	80042c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
  800528:	01002034 	movhi	r4,128
  80052c:	2115a904 	addi	r4,r4,22180
  800530:	080042c0 	call	80042c <alt_dev_reg>
}
  800534:	e037883a 	mov	sp,fp
  800538:	dfc00117 	ldw	ra,4(sp)
  80053c:	df000017 	ldw	fp,0(sp)
  800540:	dec00204 	addi	sp,sp,8
  800544:	f800283a 	ret

00800548 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  800548:	defffa04 	addi	sp,sp,-24
  80054c:	dfc00515 	stw	ra,20(sp)
  800550:	df000415 	stw	fp,16(sp)
  800554:	df000404 	addi	fp,sp,16
  800558:	e13ffd15 	stw	r4,-12(fp)
  80055c:	e17ffe15 	stw	r5,-8(fp)
  800560:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  800564:	e0bffd17 	ldw	r2,-12(fp)
  800568:	10800017 	ldw	r2,0(r2)
  80056c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  800570:	e0bffc17 	ldw	r2,-16(fp)
  800574:	10c00a04 	addi	r3,r2,40
  800578:	e0bffd17 	ldw	r2,-12(fp)
  80057c:	10800217 	ldw	r2,8(r2)
  800580:	1809883a 	mov	r4,r3
  800584:	e17ffe17 	ldw	r5,-8(fp)
  800588:	e1bfff17 	ldw	r6,-4(fp)
  80058c:	100f883a 	mov	r7,r2
  800590:	0800b680 	call	800b68 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  800594:	e037883a 	mov	sp,fp
  800598:	dfc00117 	ldw	ra,4(sp)
  80059c:	df000017 	ldw	fp,0(sp)
  8005a0:	dec00204 	addi	sp,sp,8
  8005a4:	f800283a 	ret

008005a8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8005a8:	defffa04 	addi	sp,sp,-24
  8005ac:	dfc00515 	stw	ra,20(sp)
  8005b0:	df000415 	stw	fp,16(sp)
  8005b4:	df000404 	addi	fp,sp,16
  8005b8:	e13ffd15 	stw	r4,-12(fp)
  8005bc:	e17ffe15 	stw	r5,-8(fp)
  8005c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8005c4:	e0bffd17 	ldw	r2,-12(fp)
  8005c8:	10800017 	ldw	r2,0(r2)
  8005cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  8005d0:	e0bffc17 	ldw	r2,-16(fp)
  8005d4:	10c00a04 	addi	r3,r2,40
  8005d8:	e0bffd17 	ldw	r2,-12(fp)
  8005dc:	10800217 	ldw	r2,8(r2)
  8005e0:	1809883a 	mov	r4,r3
  8005e4:	e17ffe17 	ldw	r5,-8(fp)
  8005e8:	e1bfff17 	ldw	r6,-4(fp)
  8005ec:	100f883a 	mov	r7,r2
  8005f0:	0800d740 	call	800d74 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  8005f4:	e037883a 	mov	sp,fp
  8005f8:	dfc00117 	ldw	ra,4(sp)
  8005fc:	df000017 	ldw	fp,0(sp)
  800600:	dec00204 	addi	sp,sp,8
  800604:	f800283a 	ret

00800608 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  800608:	defffc04 	addi	sp,sp,-16
  80060c:	dfc00315 	stw	ra,12(sp)
  800610:	df000215 	stw	fp,8(sp)
  800614:	df000204 	addi	fp,sp,8
  800618:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80061c:	e0bfff17 	ldw	r2,-4(fp)
  800620:	10800017 	ldw	r2,0(r2)
  800624:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  800628:	e0bffe17 	ldw	r2,-8(fp)
  80062c:	10c00a04 	addi	r3,r2,40
  800630:	e0bfff17 	ldw	r2,-4(fp)
  800634:	10800217 	ldw	r2,8(r2)
  800638:	1809883a 	mov	r4,r3
  80063c:	100b883a 	mov	r5,r2
  800640:	0800a140 	call	800a14 <altera_avalon_jtag_uart_close>
}
  800644:	e037883a 	mov	sp,fp
  800648:	dfc00117 	ldw	ra,4(sp)
  80064c:	df000017 	ldw	fp,0(sp)
  800650:	dec00204 	addi	sp,sp,8
  800654:	f800283a 	ret

00800658 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  800658:	defffa04 	addi	sp,sp,-24
  80065c:	dfc00515 	stw	ra,20(sp)
  800660:	df000415 	stw	fp,16(sp)
  800664:	df000404 	addi	fp,sp,16
  800668:	e13ffd15 	stw	r4,-12(fp)
  80066c:	e17ffe15 	stw	r5,-8(fp)
  800670:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  800674:	e0bffd17 	ldw	r2,-12(fp)
  800678:	10800017 	ldw	r2,0(r2)
  80067c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  800680:	e0bffc17 	ldw	r2,-16(fp)
  800684:	10800a04 	addi	r2,r2,40
  800688:	1009883a 	mov	r4,r2
  80068c:	e17ffe17 	ldw	r5,-8(fp)
  800690:	e1bfff17 	ldw	r6,-4(fp)
  800694:	0800a7c0 	call	800a7c <altera_avalon_jtag_uart_ioctl>
}
  800698:	e037883a 	mov	sp,fp
  80069c:	dfc00117 	ldw	ra,4(sp)
  8006a0:	df000017 	ldw	fp,0(sp)
  8006a4:	dec00204 	addi	sp,sp,8
  8006a8:	f800283a 	ret

008006ac <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8006ac:	defffb04 	addi	sp,sp,-20
  8006b0:	dfc00415 	stw	ra,16(sp)
  8006b4:	df000315 	stw	fp,12(sp)
  8006b8:	df000304 	addi	fp,sp,12
  8006bc:	e13ffd15 	stw	r4,-12(fp)
  8006c0:	e17ffe15 	stw	r5,-8(fp)
  8006c4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8006c8:	e0bffd17 	ldw	r2,-12(fp)
  8006cc:	00c00044 	movi	r3,1
  8006d0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  8006d4:	e0bffd17 	ldw	r2,-12(fp)
  8006d8:	10800017 	ldw	r2,0(r2)
  8006dc:	10800104 	addi	r2,r2,4
  8006e0:	1007883a 	mov	r3,r2
  8006e4:	e0bffd17 	ldw	r2,-12(fp)
  8006e8:	10800817 	ldw	r2,32(r2)
  8006ec:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
  8006f0:	e0bfff17 	ldw	r2,-4(fp)
  8006f4:	1009883a 	mov	r4,r2
  8006f8:	e17ffd17 	ldw	r5,-12(fp)
  8006fc:	01802034 	movhi	r6,128
  800700:	3181d904 	addi	r6,r6,1892
  800704:	0802e240 	call	802e24 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  800708:	e0bffd17 	ldw	r2,-12(fp)
  80070c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  800710:	e0bffd17 	ldw	r2,-12(fp)
  800714:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  800718:	00802034 	movhi	r2,128
  80071c:	109d6204 	addi	r2,r2,30088
  800720:	10800017 	ldw	r2,0(r2)
  800724:	1809883a 	mov	r4,r3
  800728:	100b883a 	mov	r5,r2
  80072c:	01802034 	movhi	r6,128
  800730:	31825b04 	addi	r6,r6,2412
  800734:	e1fffd17 	ldw	r7,-12(fp)
  800738:	08028400 	call	802840 <alt_alarm_start>
  80073c:	1000040e 	bge	r2,zero,800750 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  800740:	e0fffd17 	ldw	r3,-12(fp)
  800744:	00a00034 	movhi	r2,32768
  800748:	10bfffc4 	addi	r2,r2,-1
  80074c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  800750:	e037883a 	mov	sp,fp
  800754:	dfc00117 	ldw	ra,4(sp)
  800758:	df000017 	ldw	fp,0(sp)
  80075c:	dec00204 	addi	sp,sp,8
  800760:	f800283a 	ret

00800764 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  800764:	defff704 	addi	sp,sp,-36
  800768:	df000815 	stw	fp,32(sp)
  80076c:	df000804 	addi	fp,sp,32
  800770:	e13ffe15 	stw	r4,-8(fp)
  800774:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  800778:	e0bffe17 	ldw	r2,-8(fp)
  80077c:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
  800780:	e0bffa17 	ldw	r2,-24(fp)
  800784:	10800017 	ldw	r2,0(r2)
  800788:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80078c:	e0bffb17 	ldw	r2,-20(fp)
  800790:	10800104 	addi	r2,r2,4
  800794:	10800037 	ldwio	r2,0(r2)
  800798:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80079c:	e0bffc17 	ldw	r2,-16(fp)
  8007a0:	1080c00c 	andi	r2,r2,768
  8007a4:	1000011e 	bne	r2,zero,8007ac <altera_avalon_jtag_uart_irq+0x48>
      break;
  8007a8:	00006c06 	br	80095c <altera_avalon_jtag_uart_irq+0x1f8>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  8007ac:	e0bffc17 	ldw	r2,-16(fp)
  8007b0:	1080400c 	andi	r2,r2,256
  8007b4:	10003426 	beq	r2,zero,800888 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  8007b8:	00800074 	movhi	r2,1
  8007bc:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8007c0:	e0bffa17 	ldw	r2,-24(fp)
  8007c4:	10800a17 	ldw	r2,40(r2)
  8007c8:	10800044 	addi	r2,r2,1
  8007cc:	1081ffcc 	andi	r2,r2,2047
  8007d0:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
  8007d4:	e0bffa17 	ldw	r2,-24(fp)
  8007d8:	10c00b17 	ldw	r3,44(r2)
  8007dc:	e0bffd17 	ldw	r2,-12(fp)
  8007e0:	1880011e 	bne	r3,r2,8007e8 <altera_avalon_jtag_uart_irq+0x84>
          break;
  8007e4:	00001606 	br	800840 <altera_avalon_jtag_uart_irq+0xdc>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  8007e8:	e0bffb17 	ldw	r2,-20(fp)
  8007ec:	10800037 	ldwio	r2,0(r2)
  8007f0:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  8007f4:	e0bff817 	ldw	r2,-32(fp)
  8007f8:	10a0000c 	andi	r2,r2,32768
  8007fc:	1000011e 	bne	r2,zero,800804 <altera_avalon_jtag_uart_irq+0xa0>
          break;
  800800:	00000f06 	br	800840 <altera_avalon_jtag_uart_irq+0xdc>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  800804:	e0bffa17 	ldw	r2,-24(fp)
  800808:	10800a17 	ldw	r2,40(r2)
  80080c:	e0fff817 	ldw	r3,-32(fp)
  800810:	1809883a 	mov	r4,r3
  800814:	e0fffa17 	ldw	r3,-24(fp)
  800818:	1885883a 	add	r2,r3,r2
  80081c:	10800e04 	addi	r2,r2,56
  800820:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800824:	e0bffa17 	ldw	r2,-24(fp)
  800828:	10800a17 	ldw	r2,40(r2)
  80082c:	10800044 	addi	r2,r2,1
  800830:	10c1ffcc 	andi	r3,r2,2047
  800834:	e0bffa17 	ldw	r2,-24(fp)
  800838:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80083c:	003fe006 	br	8007c0 <__alt_data_end+0xff8007c0>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  800840:	e0bff817 	ldw	r2,-32(fp)
  800844:	10bfffec 	andhi	r2,r2,65535
  800848:	10000f26 	beq	r2,zero,800888 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80084c:	e0bffa17 	ldw	r2,-24(fp)
  800850:	10c00817 	ldw	r3,32(r2)
  800854:	00bfff84 	movi	r2,-2
  800858:	1886703a 	and	r3,r3,r2
  80085c:	e0bffa17 	ldw	r2,-24(fp)
  800860:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  800864:	e0bffb17 	ldw	r2,-20(fp)
  800868:	10800104 	addi	r2,r2,4
  80086c:	1007883a 	mov	r3,r2
  800870:	e0bffa17 	ldw	r2,-24(fp)
  800874:	10800817 	ldw	r2,32(r2)
  800878:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80087c:	e0bffb17 	ldw	r2,-20(fp)
  800880:	10800104 	addi	r2,r2,4
  800884:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  800888:	e0bffc17 	ldw	r2,-16(fp)
  80088c:	1080800c 	andi	r2,r2,512
  800890:	10003126 	beq	r2,zero,800958 <altera_avalon_jtag_uart_irq+0x1f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  800894:	e0bffc17 	ldw	r2,-16(fp)
  800898:	1004d43a 	srli	r2,r2,16
  80089c:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  8008a0:	00001406 	br	8008f4 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  8008a4:	e0bffb17 	ldw	r2,-20(fp)
  8008a8:	e0fffa17 	ldw	r3,-24(fp)
  8008ac:	18c00d17 	ldw	r3,52(r3)
  8008b0:	e13ffa17 	ldw	r4,-24(fp)
  8008b4:	20c7883a 	add	r3,r4,r3
  8008b8:	18c20e04 	addi	r3,r3,2104
  8008bc:	18c00003 	ldbu	r3,0(r3)
  8008c0:	18c03fcc 	andi	r3,r3,255
  8008c4:	18c0201c 	xori	r3,r3,128
  8008c8:	18ffe004 	addi	r3,r3,-128
  8008cc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8008d0:	e0bffa17 	ldw	r2,-24(fp)
  8008d4:	10800d17 	ldw	r2,52(r2)
  8008d8:	10800044 	addi	r2,r2,1
  8008dc:	10c1ffcc 	andi	r3,r2,2047
  8008e0:	e0bffa17 	ldw	r2,-24(fp)
  8008e4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  8008e8:	e0bff917 	ldw	r2,-28(fp)
  8008ec:	10bfffc4 	addi	r2,r2,-1
  8008f0:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  8008f4:	e0bff917 	ldw	r2,-28(fp)
  8008f8:	10000526 	beq	r2,zero,800910 <altera_avalon_jtag_uart_irq+0x1ac>
  8008fc:	e0bffa17 	ldw	r2,-24(fp)
  800900:	10c00d17 	ldw	r3,52(r2)
  800904:	e0bffa17 	ldw	r2,-24(fp)
  800908:	10800c17 	ldw	r2,48(r2)
  80090c:	18bfe51e 	bne	r3,r2,8008a4 <__alt_data_end+0xff8008a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  800910:	e0bff917 	ldw	r2,-28(fp)
  800914:	10001026 	beq	r2,zero,800958 <altera_avalon_jtag_uart_irq+0x1f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  800918:	e0bffa17 	ldw	r2,-24(fp)
  80091c:	10c00817 	ldw	r3,32(r2)
  800920:	00bfff44 	movi	r2,-3
  800924:	1886703a 	and	r3,r3,r2
  800928:	e0bffa17 	ldw	r2,-24(fp)
  80092c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800930:	e0bffa17 	ldw	r2,-24(fp)
  800934:	10800017 	ldw	r2,0(r2)
  800938:	10800104 	addi	r2,r2,4
  80093c:	1007883a 	mov	r3,r2
  800940:	e0bffa17 	ldw	r2,-24(fp)
  800944:	10800817 	ldw	r2,32(r2)
  800948:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80094c:	e0bffb17 	ldw	r2,-20(fp)
  800950:	10800104 	addi	r2,r2,4
  800954:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  800958:	003f8c06 	br	80078c <__alt_data_end+0xff80078c>
}
  80095c:	e037883a 	mov	sp,fp
  800960:	df000017 	ldw	fp,0(sp)
  800964:	dec00104 	addi	sp,sp,4
  800968:	f800283a 	ret

0080096c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80096c:	defff804 	addi	sp,sp,-32
  800970:	df000715 	stw	fp,28(sp)
  800974:	df000704 	addi	fp,sp,28
  800978:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80097c:	e0bffb17 	ldw	r2,-20(fp)
  800980:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  800984:	e0bff917 	ldw	r2,-28(fp)
  800988:	10800017 	ldw	r2,0(r2)
  80098c:	10800104 	addi	r2,r2,4
  800990:	10800037 	ldwio	r2,0(r2)
  800994:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  800998:	e0bffa17 	ldw	r2,-24(fp)
  80099c:	1081000c 	andi	r2,r2,1024
  8009a0:	10000b26 	beq	r2,zero,8009d0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8009a4:	e0bff917 	ldw	r2,-28(fp)
  8009a8:	10800017 	ldw	r2,0(r2)
  8009ac:	10800104 	addi	r2,r2,4
  8009b0:	1007883a 	mov	r3,r2
  8009b4:	e0bff917 	ldw	r2,-28(fp)
  8009b8:	10800817 	ldw	r2,32(r2)
  8009bc:	10810014 	ori	r2,r2,1024
  8009c0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  8009c4:	e0bff917 	ldw	r2,-28(fp)
  8009c8:	10000915 	stw	zero,36(r2)
  8009cc:	00000a06 	br	8009f8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  8009d0:	e0bff917 	ldw	r2,-28(fp)
  8009d4:	10c00917 	ldw	r3,36(r2)
  8009d8:	00a00034 	movhi	r2,32768
  8009dc:	10bfff04 	addi	r2,r2,-4
  8009e0:	10c00536 	bltu	r2,r3,8009f8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  8009e4:	e0bff917 	ldw	r2,-28(fp)
  8009e8:	10800917 	ldw	r2,36(r2)
  8009ec:	10c00044 	addi	r3,r2,1
  8009f0:	e0bff917 	ldw	r2,-28(fp)
  8009f4:	10c00915 	stw	r3,36(r2)
  8009f8:	00802034 	movhi	r2,128
  8009fc:	109d6204 	addi	r2,r2,30088
  800a00:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  800a04:	e037883a 	mov	sp,fp
  800a08:	df000017 	ldw	fp,0(sp)
  800a0c:	dec00104 	addi	sp,sp,4
  800a10:	f800283a 	ret

00800a14 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  800a14:	defffd04 	addi	sp,sp,-12
  800a18:	df000215 	stw	fp,8(sp)
  800a1c:	df000204 	addi	fp,sp,8
  800a20:	e13ffe15 	stw	r4,-8(fp)
  800a24:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  800a28:	00000506 	br	800a40 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  800a2c:	e0bfff17 	ldw	r2,-4(fp)
  800a30:	1090000c 	andi	r2,r2,16384
  800a34:	10000226 	beq	r2,zero,800a40 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  800a38:	00bffd44 	movi	r2,-11
  800a3c:	00000b06 	br	800a6c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  800a40:	e0bffe17 	ldw	r2,-8(fp)
  800a44:	10c00d17 	ldw	r3,52(r2)
  800a48:	e0bffe17 	ldw	r2,-8(fp)
  800a4c:	10800c17 	ldw	r2,48(r2)
  800a50:	18800526 	beq	r3,r2,800a68 <altera_avalon_jtag_uart_close+0x54>
  800a54:	e0bffe17 	ldw	r2,-8(fp)
  800a58:	10c00917 	ldw	r3,36(r2)
  800a5c:	e0bffe17 	ldw	r2,-8(fp)
  800a60:	10800117 	ldw	r2,4(r2)
  800a64:	18bff136 	bltu	r3,r2,800a2c <__alt_data_end+0xff800a2c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  800a68:	0005883a 	mov	r2,zero
}
  800a6c:	e037883a 	mov	sp,fp
  800a70:	df000017 	ldw	fp,0(sp)
  800a74:	dec00104 	addi	sp,sp,4
  800a78:	f800283a 	ret

00800a7c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  800a7c:	defffa04 	addi	sp,sp,-24
  800a80:	df000515 	stw	fp,20(sp)
  800a84:	df000504 	addi	fp,sp,20
  800a88:	e13ffd15 	stw	r4,-12(fp)
  800a8c:	e17ffe15 	stw	r5,-8(fp)
  800a90:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  800a94:	00bff9c4 	movi	r2,-25
  800a98:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  800a9c:	e0bffe17 	ldw	r2,-8(fp)
  800aa0:	10da8060 	cmpeqi	r3,r2,27137
  800aa4:	1800031e 	bne	r3,zero,800ab4 <altera_avalon_jtag_uart_ioctl+0x38>
  800aa8:	109a80a0 	cmpeqi	r2,r2,27138
  800aac:	1000191e 	bne	r2,zero,800b14 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
  800ab0:	00002806 	br	800b54 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  800ab4:	e0bffd17 	ldw	r2,-12(fp)
  800ab8:	10c00117 	ldw	r3,4(r2)
  800abc:	00a00034 	movhi	r2,32768
  800ac0:	10bfffc4 	addi	r2,r2,-1
  800ac4:	18801226 	beq	r3,r2,800b10 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
  800ac8:	e0bfff17 	ldw	r2,-4(fp)
  800acc:	10800017 	ldw	r2,0(r2)
  800ad0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  800ad4:	e0bffc17 	ldw	r2,-16(fp)
  800ad8:	10800090 	cmplti	r2,r2,2
  800adc:	1000061e 	bne	r2,zero,800af8 <altera_avalon_jtag_uart_ioctl+0x7c>
  800ae0:	e0fffc17 	ldw	r3,-16(fp)
  800ae4:	00a00034 	movhi	r2,32768
  800ae8:	10bfffc4 	addi	r2,r2,-1
  800aec:	18800226 	beq	r3,r2,800af8 <altera_avalon_jtag_uart_ioctl+0x7c>
  800af0:	e0bffc17 	ldw	r2,-16(fp)
  800af4:	00000206 	br	800b00 <altera_avalon_jtag_uart_ioctl+0x84>
  800af8:	00a00034 	movhi	r2,32768
  800afc:	10bfff84 	addi	r2,r2,-2
  800b00:	e0fffd17 	ldw	r3,-12(fp)
  800b04:	18800115 	stw	r2,4(r3)
      rc = 0;
  800b08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  800b0c:	00001106 	br	800b54 <altera_avalon_jtag_uart_ioctl+0xd8>
  800b10:	00001006 	br	800b54 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  800b14:	e0bffd17 	ldw	r2,-12(fp)
  800b18:	10c00117 	ldw	r3,4(r2)
  800b1c:	00a00034 	movhi	r2,32768
  800b20:	10bfffc4 	addi	r2,r2,-1
  800b24:	18800a26 	beq	r3,r2,800b50 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  800b28:	e0bffd17 	ldw	r2,-12(fp)
  800b2c:	10c00917 	ldw	r3,36(r2)
  800b30:	e0bffd17 	ldw	r2,-12(fp)
  800b34:	10800117 	ldw	r2,4(r2)
  800b38:	1885803a 	cmpltu	r2,r3,r2
  800b3c:	10c03fcc 	andi	r3,r2,255
  800b40:	e0bfff17 	ldw	r2,-4(fp)
  800b44:	10c00015 	stw	r3,0(r2)
      rc = 0;
  800b48:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  800b4c:	00000006 	br	800b50 <altera_avalon_jtag_uart_ioctl+0xd4>
  800b50:	0001883a 	nop

  default:
    break;
  }

  return rc;
  800b54:	e0bffb17 	ldw	r2,-20(fp)
}
  800b58:	e037883a 	mov	sp,fp
  800b5c:	df000017 	ldw	fp,0(sp)
  800b60:	dec00104 	addi	sp,sp,4
  800b64:	f800283a 	ret

00800b68 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  800b68:	defff304 	addi	sp,sp,-52
  800b6c:	dfc00c15 	stw	ra,48(sp)
  800b70:	df000b15 	stw	fp,44(sp)
  800b74:	df000b04 	addi	fp,sp,44
  800b78:	e13ffc15 	stw	r4,-16(fp)
  800b7c:	e17ffd15 	stw	r5,-12(fp)
  800b80:	e1bffe15 	stw	r6,-8(fp)
  800b84:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  800b88:	e0bffd17 	ldw	r2,-12(fp)
  800b8c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  800b90:	00004906 	br	800cb8 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  800b94:	e0bffc17 	ldw	r2,-16(fp)
  800b98:	10800a17 	ldw	r2,40(r2)
  800b9c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  800ba0:	e0bffc17 	ldw	r2,-16(fp)
  800ba4:	10800b17 	ldw	r2,44(r2)
  800ba8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  800bac:	e0fff717 	ldw	r3,-36(fp)
  800bb0:	e0bff817 	ldw	r2,-32(fp)
  800bb4:	18800536 	bltu	r3,r2,800bcc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  800bb8:	e0fff717 	ldw	r3,-36(fp)
  800bbc:	e0bff817 	ldw	r2,-32(fp)
  800bc0:	1885c83a 	sub	r2,r3,r2
  800bc4:	e0bff615 	stw	r2,-40(fp)
  800bc8:	00000406 	br	800bdc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  800bcc:	00c20004 	movi	r3,2048
  800bd0:	e0bff817 	ldw	r2,-32(fp)
  800bd4:	1885c83a 	sub	r2,r3,r2
  800bd8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  800bdc:	e0bff617 	ldw	r2,-40(fp)
  800be0:	1000011e 	bne	r2,zero,800be8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
  800be4:	00001d06 	br	800c5c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
  800be8:	e0fffe17 	ldw	r3,-8(fp)
  800bec:	e0bff617 	ldw	r2,-40(fp)
  800bf0:	1880022e 	bgeu	r3,r2,800bfc <altera_avalon_jtag_uart_read+0x94>
        n = space;
  800bf4:	e0bffe17 	ldw	r2,-8(fp)
  800bf8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  800bfc:	e0bff817 	ldw	r2,-32(fp)
  800c00:	10800e04 	addi	r2,r2,56
  800c04:	e0fffc17 	ldw	r3,-16(fp)
  800c08:	1885883a 	add	r2,r3,r2
  800c0c:	e13ff517 	ldw	r4,-44(fp)
  800c10:	100b883a 	mov	r5,r2
  800c14:	e1bff617 	ldw	r6,-40(fp)
  800c18:	0803a340 	call	803a34 <memcpy>
      ptr   += n;
  800c1c:	e0fff517 	ldw	r3,-44(fp)
  800c20:	e0bff617 	ldw	r2,-40(fp)
  800c24:	1885883a 	add	r2,r3,r2
  800c28:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  800c2c:	e0fffe17 	ldw	r3,-8(fp)
  800c30:	e0bff617 	ldw	r2,-40(fp)
  800c34:	1885c83a 	sub	r2,r3,r2
  800c38:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800c3c:	e0fff817 	ldw	r3,-32(fp)
  800c40:	e0bff617 	ldw	r2,-40(fp)
  800c44:	1885883a 	add	r2,r3,r2
  800c48:	10c1ffcc 	andi	r3,r2,2047
  800c4c:	e0bffc17 	ldw	r2,-16(fp)
  800c50:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  800c54:	e0bffe17 	ldw	r2,-8(fp)
  800c58:	00bfce16 	blt	zero,r2,800b94 <__alt_data_end+0xff800b94>

    /* If we read any data then return it */
    if (ptr != buffer)
  800c5c:	e0fff517 	ldw	r3,-44(fp)
  800c60:	e0bffd17 	ldw	r2,-12(fp)
  800c64:	18800126 	beq	r3,r2,800c6c <altera_avalon_jtag_uart_read+0x104>
      break;
  800c68:	00001506 	br	800cc0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  800c6c:	e0bfff17 	ldw	r2,-4(fp)
  800c70:	1090000c 	andi	r2,r2,16384
  800c74:	10000126 	beq	r2,zero,800c7c <altera_avalon_jtag_uart_read+0x114>
      break;
  800c78:	00001106 	br	800cc0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  800c7c:	0001883a 	nop
  800c80:	e0bffc17 	ldw	r2,-16(fp)
  800c84:	10c00a17 	ldw	r3,40(r2)
  800c88:	e0bff717 	ldw	r2,-36(fp)
  800c8c:	1880051e 	bne	r3,r2,800ca4 <altera_avalon_jtag_uart_read+0x13c>
  800c90:	e0bffc17 	ldw	r2,-16(fp)
  800c94:	10c00917 	ldw	r3,36(r2)
  800c98:	e0bffc17 	ldw	r2,-16(fp)
  800c9c:	10800117 	ldw	r2,4(r2)
  800ca0:	18bff736 	bltu	r3,r2,800c80 <__alt_data_end+0xff800c80>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  800ca4:	e0bffc17 	ldw	r2,-16(fp)
  800ca8:	10c00a17 	ldw	r3,40(r2)
  800cac:	e0bff717 	ldw	r2,-36(fp)
  800cb0:	1880011e 	bne	r3,r2,800cb8 <altera_avalon_jtag_uart_read+0x150>
      break;
  800cb4:	00000206 	br	800cc0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  800cb8:	e0bffe17 	ldw	r2,-8(fp)
  800cbc:	00bfb516 	blt	zero,r2,800b94 <__alt_data_end+0xff800b94>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  800cc0:	e0fff517 	ldw	r3,-44(fp)
  800cc4:	e0bffd17 	ldw	r2,-12(fp)
  800cc8:	18801826 	beq	r3,r2,800d2c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800ccc:	0005303a 	rdctl	r2,status
  800cd0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800cd4:	e0fffa17 	ldw	r3,-24(fp)
  800cd8:	00bfff84 	movi	r2,-2
  800cdc:	1884703a 	and	r2,r3,r2
  800ce0:	1001703a 	wrctl	status,r2
  
  return context;
  800ce4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  800ce8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  800cec:	e0bffc17 	ldw	r2,-16(fp)
  800cf0:	10800817 	ldw	r2,32(r2)
  800cf4:	10c00054 	ori	r3,r2,1
  800cf8:	e0bffc17 	ldw	r2,-16(fp)
  800cfc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800d00:	e0bffc17 	ldw	r2,-16(fp)
  800d04:	10800017 	ldw	r2,0(r2)
  800d08:	10800104 	addi	r2,r2,4
  800d0c:	1007883a 	mov	r3,r2
  800d10:	e0bffc17 	ldw	r2,-16(fp)
  800d14:	10800817 	ldw	r2,32(r2)
  800d18:	18800035 	stwio	r2,0(r3)
  800d1c:	e0bff917 	ldw	r2,-28(fp)
  800d20:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800d24:	e0bffb17 	ldw	r2,-20(fp)
  800d28:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  800d2c:	e0fff517 	ldw	r3,-44(fp)
  800d30:	e0bffd17 	ldw	r2,-12(fp)
  800d34:	18800426 	beq	r3,r2,800d48 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
  800d38:	e0fff517 	ldw	r3,-44(fp)
  800d3c:	e0bffd17 	ldw	r2,-12(fp)
  800d40:	1885c83a 	sub	r2,r3,r2
  800d44:	00000606 	br	800d60 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
  800d48:	e0bfff17 	ldw	r2,-4(fp)
  800d4c:	1090000c 	andi	r2,r2,16384
  800d50:	10000226 	beq	r2,zero,800d5c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
  800d54:	00bffd44 	movi	r2,-11
  800d58:	00000106 	br	800d60 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
  800d5c:	00bffec4 	movi	r2,-5
}
  800d60:	e037883a 	mov	sp,fp
  800d64:	dfc00117 	ldw	ra,4(sp)
  800d68:	df000017 	ldw	fp,0(sp)
  800d6c:	dec00204 	addi	sp,sp,8
  800d70:	f800283a 	ret

00800d74 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  800d74:	defff304 	addi	sp,sp,-52
  800d78:	dfc00c15 	stw	ra,48(sp)
  800d7c:	df000b15 	stw	fp,44(sp)
  800d80:	df000b04 	addi	fp,sp,44
  800d84:	e13ffc15 	stw	r4,-16(fp)
  800d88:	e17ffd15 	stw	r5,-12(fp)
  800d8c:	e1bffe15 	stw	r6,-8(fp)
  800d90:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  800d94:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  800d98:	e0bffd17 	ldw	r2,-12(fp)
  800d9c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  800da0:	00003806 	br	800e84 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  800da4:	e0bffc17 	ldw	r2,-16(fp)
  800da8:	10800c17 	ldw	r2,48(r2)
  800dac:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
  800db0:	e0bffc17 	ldw	r2,-16(fp)
  800db4:	10800d17 	ldw	r2,52(r2)
  800db8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  800dbc:	e0fff817 	ldw	r3,-32(fp)
  800dc0:	e0bff517 	ldw	r2,-44(fp)
  800dc4:	1880062e 	bgeu	r3,r2,800de0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  800dc8:	e0fff517 	ldw	r3,-44(fp)
  800dcc:	e0bff817 	ldw	r2,-32(fp)
  800dd0:	1885c83a 	sub	r2,r3,r2
  800dd4:	10bfffc4 	addi	r2,r2,-1
  800dd8:	e0bff615 	stw	r2,-40(fp)
  800ddc:	00000b06 	br	800e0c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  800de0:	e0bff517 	ldw	r2,-44(fp)
  800de4:	10000526 	beq	r2,zero,800dfc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  800de8:	00c20004 	movi	r3,2048
  800dec:	e0bff817 	ldw	r2,-32(fp)
  800df0:	1885c83a 	sub	r2,r3,r2
  800df4:	e0bff615 	stw	r2,-40(fp)
  800df8:	00000406 	br	800e0c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  800dfc:	00c1ffc4 	movi	r3,2047
  800e00:	e0bff817 	ldw	r2,-32(fp)
  800e04:	1885c83a 	sub	r2,r3,r2
  800e08:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  800e0c:	e0bff617 	ldw	r2,-40(fp)
  800e10:	1000011e 	bne	r2,zero,800e18 <altera_avalon_jtag_uart_write+0xa4>
        break;
  800e14:	00001d06 	br	800e8c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
  800e18:	e0fffe17 	ldw	r3,-8(fp)
  800e1c:	e0bff617 	ldw	r2,-40(fp)
  800e20:	1880022e 	bgeu	r3,r2,800e2c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
  800e24:	e0bffe17 	ldw	r2,-8(fp)
  800e28:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  800e2c:	e0bff817 	ldw	r2,-32(fp)
  800e30:	10820e04 	addi	r2,r2,2104
  800e34:	e0fffc17 	ldw	r3,-16(fp)
  800e38:	1885883a 	add	r2,r3,r2
  800e3c:	1009883a 	mov	r4,r2
  800e40:	e17ffd17 	ldw	r5,-12(fp)
  800e44:	e1bff617 	ldw	r6,-40(fp)
  800e48:	0803a340 	call	803a34 <memcpy>
      ptr   += n;
  800e4c:	e0fffd17 	ldw	r3,-12(fp)
  800e50:	e0bff617 	ldw	r2,-40(fp)
  800e54:	1885883a 	add	r2,r3,r2
  800e58:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  800e5c:	e0fffe17 	ldw	r3,-8(fp)
  800e60:	e0bff617 	ldw	r2,-40(fp)
  800e64:	1885c83a 	sub	r2,r3,r2
  800e68:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  800e6c:	e0fff817 	ldw	r3,-32(fp)
  800e70:	e0bff617 	ldw	r2,-40(fp)
  800e74:	1885883a 	add	r2,r3,r2
  800e78:	10c1ffcc 	andi	r3,r2,2047
  800e7c:	e0bffc17 	ldw	r2,-16(fp)
  800e80:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  800e84:	e0bffe17 	ldw	r2,-8(fp)
  800e88:	00bfc616 	blt	zero,r2,800da4 <__alt_data_end+0xff800da4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  800e8c:	0005303a 	rdctl	r2,status
  800e90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  800e94:	e0fffa17 	ldw	r3,-24(fp)
  800e98:	00bfff84 	movi	r2,-2
  800e9c:	1884703a 	and	r2,r3,r2
  800ea0:	1001703a 	wrctl	status,r2
  
  return context;
  800ea4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  800ea8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  800eac:	e0bffc17 	ldw	r2,-16(fp)
  800eb0:	10800817 	ldw	r2,32(r2)
  800eb4:	10c00094 	ori	r3,r2,2
  800eb8:	e0bffc17 	ldw	r2,-16(fp)
  800ebc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  800ec0:	e0bffc17 	ldw	r2,-16(fp)
  800ec4:	10800017 	ldw	r2,0(r2)
  800ec8:	10800104 	addi	r2,r2,4
  800ecc:	1007883a 	mov	r3,r2
  800ed0:	e0bffc17 	ldw	r2,-16(fp)
  800ed4:	10800817 	ldw	r2,32(r2)
  800ed8:	18800035 	stwio	r2,0(r3)
  800edc:	e0bff917 	ldw	r2,-28(fp)
  800ee0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  800ee4:	e0bffb17 	ldw	r2,-20(fp)
  800ee8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  800eec:	e0bffe17 	ldw	r2,-8(fp)
  800ef0:	0080120e 	bge	zero,r2,800f3c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
  800ef4:	e0bfff17 	ldw	r2,-4(fp)
  800ef8:	1090000c 	andi	r2,r2,16384
  800efc:	10000126 	beq	r2,zero,800f04 <altera_avalon_jtag_uart_write+0x190>
        break;
  800f00:	00001006 	br	800f44 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  800f04:	0001883a 	nop
  800f08:	e0bffc17 	ldw	r2,-16(fp)
  800f0c:	10c00d17 	ldw	r3,52(r2)
  800f10:	e0bff517 	ldw	r2,-44(fp)
  800f14:	1880051e 	bne	r3,r2,800f2c <altera_avalon_jtag_uart_write+0x1b8>
  800f18:	e0bffc17 	ldw	r2,-16(fp)
  800f1c:	10c00917 	ldw	r3,36(r2)
  800f20:	e0bffc17 	ldw	r2,-16(fp)
  800f24:	10800117 	ldw	r2,4(r2)
  800f28:	18bff736 	bltu	r3,r2,800f08 <__alt_data_end+0xff800f08>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  800f2c:	e0bffc17 	ldw	r2,-16(fp)
  800f30:	10800917 	ldw	r2,36(r2)
  800f34:	10000126 	beq	r2,zero,800f3c <altera_avalon_jtag_uart_write+0x1c8>
         break;
  800f38:	00000206 	br	800f44 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
  800f3c:	e0bffe17 	ldw	r2,-8(fp)
  800f40:	00bf9716 	blt	zero,r2,800da0 <__alt_data_end+0xff800da0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  800f44:	e0fffd17 	ldw	r3,-12(fp)
  800f48:	e0bff717 	ldw	r2,-36(fp)
  800f4c:	18800426 	beq	r3,r2,800f60 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
  800f50:	e0fffd17 	ldw	r3,-12(fp)
  800f54:	e0bff717 	ldw	r2,-36(fp)
  800f58:	1885c83a 	sub	r2,r3,r2
  800f5c:	00000606 	br	800f78 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
  800f60:	e0bfff17 	ldw	r2,-4(fp)
  800f64:	1090000c 	andi	r2,r2,16384
  800f68:	10000226 	beq	r2,zero,800f74 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
  800f6c:	00bffd44 	movi	r2,-11
  800f70:	00000106 	br	800f78 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  800f74:	00bffec4 	movi	r2,-5
}
  800f78:	e037883a 	mov	sp,fp
  800f7c:	dfc00117 	ldw	ra,4(sp)
  800f80:	df000017 	ldw	fp,0(sp)
  800f84:	dec00204 	addi	sp,sp,8
  800f88:	f800283a 	ret

00800f8c <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  800f8c:	defffa04 	addi	sp,sp,-24
  800f90:	dfc00515 	stw	ra,20(sp)
  800f94:	df000415 	stw	fp,16(sp)
  800f98:	df000404 	addi	fp,sp,16
  800f9c:	e13ffe15 	stw	r4,-8(fp)
  800fa0:	2805883a 	mov	r2,r5
  800fa4:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  800fa8:	e0bffe17 	ldw	r2,-8(fp)
  800fac:	10800017 	ldw	r2,0(r2)
  800fb0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  800fb4:	008003f4 	movhi	r2,15
  800fb8:	10909004 	addi	r2,r2,16960
  800fbc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  800fc0:	e0bffe17 	ldw	r2,-8(fp)
  800fc4:	10800803 	ldbu	r2,32(r2)
  800fc8:	10803fcc 	andi	r2,r2,255
  800fcc:	1080201c 	xori	r2,r2,128
  800fd0:	10bfe004 	addi	r2,r2,-128
  800fd4:	10000126 	beq	r2,zero,800fdc <lcd_write_command+0x50>
    return;
  800fd8:	00001406 	br	80102c <lcd_write_command+0xa0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  800fdc:	00000906 	br	801004 <lcd_write_command+0x78>
    if (--i == 0)
  800fe0:	e0bffc17 	ldw	r2,-16(fp)
  800fe4:	10bfffc4 	addi	r2,r2,-1
  800fe8:	e0bffc15 	stw	r2,-16(fp)
  800fec:	e0bffc17 	ldw	r2,-16(fp)
  800ff0:	1000041e 	bne	r2,zero,801004 <lcd_write_command+0x78>
    {
      sp->broken = 1;
  800ff4:	e0bffe17 	ldw	r2,-8(fp)
  800ff8:	00c00044 	movi	r3,1
  800ffc:	10c00805 	stb	r3,32(r2)
      return;
  801000:	00000a06 	br	80102c <lcd_write_command+0xa0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801004:	e0bffd17 	ldw	r2,-12(fp)
  801008:	10800104 	addi	r2,r2,4
  80100c:	10800037 	ldwio	r2,0(r2)
  801010:	1080200c 	andi	r2,r2,128
  801014:	103ff21e 	bne	r2,zero,800fe0 <__alt_data_end+0xff800fe0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  801018:	01001904 	movi	r4,100
  80101c:	08034440 	call	803444 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  801020:	e0bffd17 	ldw	r2,-12(fp)
  801024:	e0ffff03 	ldbu	r3,-4(fp)
  801028:	10c00035 	stwio	r3,0(r2)
}
  80102c:	e037883a 	mov	sp,fp
  801030:	dfc00117 	ldw	ra,4(sp)
  801034:	df000017 	ldw	fp,0(sp)
  801038:	dec00204 	addi	sp,sp,8
  80103c:	f800283a 	ret

00801040 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  801040:	defffa04 	addi	sp,sp,-24
  801044:	dfc00515 	stw	ra,20(sp)
  801048:	df000415 	stw	fp,16(sp)
  80104c:	df000404 	addi	fp,sp,16
  801050:	e13ffe15 	stw	r4,-8(fp)
  801054:	2805883a 	mov	r2,r5
  801058:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80105c:	e0bffe17 	ldw	r2,-8(fp)
  801060:	10800017 	ldw	r2,0(r2)
  801064:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  801068:	008003f4 	movhi	r2,15
  80106c:	10909004 	addi	r2,r2,16960
  801070:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  801074:	e0bffe17 	ldw	r2,-8(fp)
  801078:	10800803 	ldbu	r2,32(r2)
  80107c:	10803fcc 	andi	r2,r2,255
  801080:	1080201c 	xori	r2,r2,128
  801084:	10bfe004 	addi	r2,r2,-128
  801088:	10000126 	beq	r2,zero,801090 <lcd_write_data+0x50>
    return;
  80108c:	00001c06 	br	801100 <lcd_write_data+0xc0>

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  801090:	00000906 	br	8010b8 <lcd_write_data+0x78>
    if (--i == 0)
  801094:	e0bffc17 	ldw	r2,-16(fp)
  801098:	10bfffc4 	addi	r2,r2,-1
  80109c:	e0bffc15 	stw	r2,-16(fp)
  8010a0:	e0bffc17 	ldw	r2,-16(fp)
  8010a4:	1000041e 	bne	r2,zero,8010b8 <lcd_write_data+0x78>
    {
      sp->broken = 1;
  8010a8:	e0bffe17 	ldw	r2,-8(fp)
  8010ac:	00c00044 	movi	r3,1
  8010b0:	10c00805 	stb	r3,32(r2)
      return;
  8010b4:	00001206 	br	801100 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8010b8:	e0bffd17 	ldw	r2,-12(fp)
  8010bc:	10800104 	addi	r2,r2,4
  8010c0:	10800037 	ldwio	r2,0(r2)
  8010c4:	1080200c 	andi	r2,r2,128
  8010c8:	103ff21e 	bne	r2,zero,801094 <__alt_data_end+0xff801094>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8010cc:	01001904 	movi	r4,100
  8010d0:	08034440 	call	803444 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  8010d4:	e0bffd17 	ldw	r2,-12(fp)
  8010d8:	10800204 	addi	r2,r2,8
  8010dc:	1007883a 	mov	r3,r2
  8010e0:	e0bfff03 	ldbu	r2,-4(fp)
  8010e4:	18800035 	stwio	r2,0(r3)

  sp->address++;
  8010e8:	e0bffe17 	ldw	r2,-8(fp)
  8010ec:	108008c3 	ldbu	r2,35(r2)
  8010f0:	10800044 	addi	r2,r2,1
  8010f4:	1007883a 	mov	r3,r2
  8010f8:	e0bffe17 	ldw	r2,-8(fp)
  8010fc:	10c008c5 	stb	r3,35(r2)
}
  801100:	e037883a 	mov	sp,fp
  801104:	dfc00117 	ldw	ra,4(sp)
  801108:	df000017 	ldw	fp,0(sp)
  80110c:	dec00204 	addi	sp,sp,8
  801110:	f800283a 	ret

00801114 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  801114:	defffc04 	addi	sp,sp,-16
  801118:	dfc00315 	stw	ra,12(sp)
  80111c:	df000215 	stw	fp,8(sp)
  801120:	df000204 	addi	fp,sp,8
  801124:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  801128:	e13fff17 	ldw	r4,-4(fp)
  80112c:	01400044 	movi	r5,1
  801130:	0800f8c0 	call	800f8c <lcd_write_command>

  sp->x = 0;
  801134:	e0bfff17 	ldw	r2,-4(fp)
  801138:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80113c:	e0bfff17 	ldw	r2,-4(fp)
  801140:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  801144:	e0bfff17 	ldw	r2,-4(fp)
  801148:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80114c:	e03ffe15 	stw	zero,-8(fp)
  801150:	00001b06 	br	8011c0 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  801154:	e0bffe17 	ldw	r2,-8(fp)
  801158:	108018e4 	muli	r2,r2,99
  80115c:	10801004 	addi	r2,r2,64
  801160:	e0ffff17 	ldw	r3,-4(fp)
  801164:	1885883a 	add	r2,r3,r2
  801168:	1009883a 	mov	r4,r2
  80116c:	01400804 	movi	r5,32
  801170:	01801444 	movi	r6,81
  801174:	0803b6c0 	call	803b6c <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  801178:	e0bffe17 	ldw	r2,-8(fp)
  80117c:	108018e4 	muli	r2,r2,99
  801180:	10800c04 	addi	r2,r2,48
  801184:	e0ffff17 	ldw	r3,-4(fp)
  801188:	1885883a 	add	r2,r3,r2
  80118c:	1009883a 	mov	r4,r2
  801190:	01400804 	movi	r5,32
  801194:	01800404 	movi	r6,16
  801198:	0803b6c0 	call	803b6c <memset>
    sp->line[y].width = 0;
  80119c:	e0ffff17 	ldw	r3,-4(fp)
  8011a0:	e0bffe17 	ldw	r2,-8(fp)
  8011a4:	108018e4 	muli	r2,r2,99
  8011a8:	10802404 	addi	r2,r2,144
  8011ac:	1885883a 	add	r2,r3,r2
  8011b0:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8011b4:	e0bffe17 	ldw	r2,-8(fp)
  8011b8:	10800044 	addi	r2,r2,1
  8011bc:	e0bffe15 	stw	r2,-8(fp)
  8011c0:	e0bffe17 	ldw	r2,-8(fp)
  8011c4:	10800090 	cmplti	r2,r2,2
  8011c8:	103fe21e 	bne	r2,zero,801154 <__alt_data_end+0xff801154>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  8011cc:	e037883a 	mov	sp,fp
  8011d0:	dfc00117 	ldw	ra,4(sp)
  8011d4:	df000017 	ldw	fp,0(sp)
  8011d8:	dec00204 	addi	sp,sp,8
  8011dc:	f800283a 	ret

008011e0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  8011e0:	defff704 	addi	sp,sp,-36
  8011e4:	dfc00815 	stw	ra,32(sp)
  8011e8:	df000715 	stw	fp,28(sp)
  8011ec:	df000704 	addi	fp,sp,28
  8011f0:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  8011f4:	e0bfff17 	ldw	r2,-4(fp)
  8011f8:	10800943 	ldbu	r2,37(r2)
  8011fc:	10803fcc 	andi	r2,r2,255
  801200:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801204:	e03ff915 	stw	zero,-28(fp)
  801208:	00006706 	br	8013a8 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80120c:	e0ffff17 	ldw	r3,-4(fp)
  801210:	e0bff917 	ldw	r2,-28(fp)
  801214:	108018e4 	muli	r2,r2,99
  801218:	10802404 	addi	r2,r2,144
  80121c:	1885883a 	add	r2,r3,r2
  801220:	10800043 	ldbu	r2,1(r2)
  801224:	10803fcc 	andi	r2,r2,255
  801228:	1080201c 	xori	r2,r2,128
  80122c:	10bfe004 	addi	r2,r2,-128
  801230:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  801234:	e0ffff17 	ldw	r3,-4(fp)
  801238:	e0bff917 	ldw	r2,-28(fp)
  80123c:	108018e4 	muli	r2,r2,99
  801240:	10802404 	addi	r2,r2,144
  801244:	1885883a 	add	r2,r3,r2
  801248:	10800083 	ldbu	r2,2(r2)
  80124c:	10c03fcc 	andi	r3,r2,255
  801250:	e0bffc17 	ldw	r2,-16(fp)
  801254:	1885383a 	mul	r2,r3,r2
  801258:	1005d23a 	srai	r2,r2,8
  80125c:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  801260:	e0fffb17 	ldw	r3,-20(fp)
  801264:	e0bffd17 	ldw	r2,-12(fp)
  801268:	18800116 	blt	r3,r2,801270 <lcd_repaint_screen+0x90>
      offset = 0;
  80126c:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  801270:	e03ffa15 	stw	zero,-24(fp)
  801274:	00004606 	br	801390 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  801278:	e0fffa17 	ldw	r3,-24(fp)
  80127c:	e0bffb17 	ldw	r2,-20(fp)
  801280:	1885883a 	add	r2,r3,r2
  801284:	1009883a 	mov	r4,r2
  801288:	e17ffd17 	ldw	r5,-12(fp)
  80128c:	08040900 	call	804090 <__modsi3>
  801290:	1009883a 	mov	r4,r2
  801294:	e0ffff17 	ldw	r3,-4(fp)
  801298:	e0bff917 	ldw	r2,-28(fp)
  80129c:	108018e4 	muli	r2,r2,99
  8012a0:	1885883a 	add	r2,r3,r2
  8012a4:	1105883a 	add	r2,r2,r4
  8012a8:	10801004 	addi	r2,r2,64
  8012ac:	10800003 	ldbu	r2,0(r2)
  8012b0:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8012b4:	e0ffff17 	ldw	r3,-4(fp)
  8012b8:	e0bff917 	ldw	r2,-28(fp)
  8012bc:	108018e4 	muli	r2,r2,99
  8012c0:	1887883a 	add	r3,r3,r2
  8012c4:	e0bffa17 	ldw	r2,-24(fp)
  8012c8:	1885883a 	add	r2,r3,r2
  8012cc:	10800c04 	addi	r2,r2,48
  8012d0:	10800003 	ldbu	r2,0(r2)
  8012d4:	10c03fcc 	andi	r3,r2,255
  8012d8:	18c0201c 	xori	r3,r3,128
  8012dc:	18ffe004 	addi	r3,r3,-128
  8012e0:	e0bffe07 	ldb	r2,-8(fp)
  8012e4:	18802726 	beq	r3,r2,801384 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  8012e8:	e0fff917 	ldw	r3,-28(fp)
  8012ec:	d0a00004 	addi	r2,gp,-32768
  8012f0:	1885883a 	add	r2,r3,r2
  8012f4:	10800003 	ldbu	r2,0(r2)
  8012f8:	1007883a 	mov	r3,r2
  8012fc:	e0bffa17 	ldw	r2,-24(fp)
  801300:	1885883a 	add	r2,r3,r2
  801304:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  801308:	e0fffe43 	ldbu	r3,-7(fp)
  80130c:	e0bfff17 	ldw	r2,-4(fp)
  801310:	108008c3 	ldbu	r2,35(r2)
  801314:	10803fcc 	andi	r2,r2,255
  801318:	1080201c 	xori	r2,r2,128
  80131c:	10bfe004 	addi	r2,r2,-128
  801320:	18800a26 	beq	r3,r2,80134c <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  801324:	e0fffe43 	ldbu	r3,-7(fp)
  801328:	00bfe004 	movi	r2,-128
  80132c:	1884b03a 	or	r2,r3,r2
  801330:	10803fcc 	andi	r2,r2,255
  801334:	e13fff17 	ldw	r4,-4(fp)
  801338:	100b883a 	mov	r5,r2
  80133c:	0800f8c0 	call	800f8c <lcd_write_command>
          sp->address = address;
  801340:	e0fffe43 	ldbu	r3,-7(fp)
  801344:	e0bfff17 	ldw	r2,-4(fp)
  801348:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80134c:	e0bffe03 	ldbu	r2,-8(fp)
  801350:	10803fcc 	andi	r2,r2,255
  801354:	e13fff17 	ldw	r4,-4(fp)
  801358:	100b883a 	mov	r5,r2
  80135c:	08010400 	call	801040 <lcd_write_data>
        sp->line[y].visible[x] = c;
  801360:	e0ffff17 	ldw	r3,-4(fp)
  801364:	e0bff917 	ldw	r2,-28(fp)
  801368:	108018e4 	muli	r2,r2,99
  80136c:	1887883a 	add	r3,r3,r2
  801370:	e0bffa17 	ldw	r2,-24(fp)
  801374:	1885883a 	add	r2,r3,r2
  801378:	10800c04 	addi	r2,r2,48
  80137c:	e0fffe03 	ldbu	r3,-8(fp)
  801380:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  801384:	e0bffa17 	ldw	r2,-24(fp)
  801388:	10800044 	addi	r2,r2,1
  80138c:	e0bffa15 	stw	r2,-24(fp)
  801390:	e0bffa17 	ldw	r2,-24(fp)
  801394:	10800410 	cmplti	r2,r2,16
  801398:	103fb71e 	bne	r2,zero,801278 <__alt_data_end+0xff801278>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80139c:	e0bff917 	ldw	r2,-28(fp)
  8013a0:	10800044 	addi	r2,r2,1
  8013a4:	e0bff915 	stw	r2,-28(fp)
  8013a8:	e0bff917 	ldw	r2,-28(fp)
  8013ac:	10800090 	cmplti	r2,r2,2
  8013b0:	103f961e 	bne	r2,zero,80120c <__alt_data_end+0xff80120c>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8013b4:	e037883a 	mov	sp,fp
  8013b8:	dfc00117 	ldw	ra,4(sp)
  8013bc:	df000017 	ldw	fp,0(sp)
  8013c0:	dec00204 	addi	sp,sp,8
  8013c4:	f800283a 	ret

008013c8 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8013c8:	defffc04 	addi	sp,sp,-16
  8013cc:	dfc00315 	stw	ra,12(sp)
  8013d0:	df000215 	stw	fp,8(sp)
  8013d4:	df000204 	addi	fp,sp,8
  8013d8:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8013dc:	e03ffe15 	stw	zero,-8(fp)
  8013e0:	00001d06 	br	801458 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  8013e4:	e0bffe17 	ldw	r2,-8(fp)
  8013e8:	00800f16 	blt	zero,r2,801428 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  8013ec:	e0bffe17 	ldw	r2,-8(fp)
  8013f0:	108018e4 	muli	r2,r2,99
  8013f4:	10801004 	addi	r2,r2,64
  8013f8:	e0ffff17 	ldw	r3,-4(fp)
  8013fc:	1889883a 	add	r4,r3,r2
  801400:	e0bffe17 	ldw	r2,-8(fp)
  801404:	10800044 	addi	r2,r2,1
  801408:	108018e4 	muli	r2,r2,99
  80140c:	10801004 	addi	r2,r2,64
  801410:	e0ffff17 	ldw	r3,-4(fp)
  801414:	1885883a 	add	r2,r3,r2
  801418:	100b883a 	mov	r5,r2
  80141c:	01801404 	movi	r6,80
  801420:	0803a340 	call	803a34 <memcpy>
  801424:	00000906 	br	80144c <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  801428:	e0bffe17 	ldw	r2,-8(fp)
  80142c:	108018e4 	muli	r2,r2,99
  801430:	10801004 	addi	r2,r2,64
  801434:	e0ffff17 	ldw	r3,-4(fp)
  801438:	1885883a 	add	r2,r3,r2
  80143c:	1009883a 	mov	r4,r2
  801440:	01400804 	movi	r5,32
  801444:	01801404 	movi	r6,80
  801448:	0803b6c0 	call	803b6c <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80144c:	e0bffe17 	ldw	r2,-8(fp)
  801450:	10800044 	addi	r2,r2,1
  801454:	e0bffe15 	stw	r2,-8(fp)
  801458:	e0bffe17 	ldw	r2,-8(fp)
  80145c:	10800090 	cmplti	r2,r2,2
  801460:	103fe01e 	bne	r2,zero,8013e4 <__alt_data_end+0xff8013e4>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  801464:	e0bfff17 	ldw	r2,-4(fp)
  801468:	10800883 	ldbu	r2,34(r2)
  80146c:	10bfffc4 	addi	r2,r2,-1
  801470:	1007883a 	mov	r3,r2
  801474:	e0bfff17 	ldw	r2,-4(fp)
  801478:	10c00885 	stb	r3,34(r2)
}
  80147c:	e037883a 	mov	sp,fp
  801480:	dfc00117 	ldw	ra,4(sp)
  801484:	df000017 	ldw	fp,0(sp)
  801488:	dec00204 	addi	sp,sp,8
  80148c:	f800283a 	ret

00801490 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  801490:	defff904 	addi	sp,sp,-28
  801494:	dfc00615 	stw	ra,24(sp)
  801498:	df000515 	stw	fp,20(sp)
  80149c:	df000504 	addi	fp,sp,20
  8014a0:	e13ffe15 	stw	r4,-8(fp)
  8014a4:	2805883a 	mov	r2,r5
  8014a8:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  8014ac:	e03ffb15 	stw	zero,-20(fp)
  8014b0:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  8014b4:	e0bffe17 	ldw	r2,-8(fp)
  8014b8:	10800a03 	ldbu	r2,40(r2)
  8014bc:	10803fcc 	andi	r2,r2,255
  8014c0:	1080201c 	xori	r2,r2,128
  8014c4:	10bfe004 	addi	r2,r2,-128
  8014c8:	108016d8 	cmpnei	r2,r2,91
  8014cc:	1000441e 	bne	r2,zero,8015e0 <lcd_handle_escape+0x150>
  {
    char * ptr = sp->escape+1;
  8014d0:	e0bffe17 	ldw	r2,-8(fp)
  8014d4:	10800a44 	addi	r2,r2,41
  8014d8:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  8014dc:	00000c06 	br	801510 <lcd_handle_escape+0x80>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  8014e0:	e0bffb17 	ldw	r2,-20(fp)
  8014e4:	10c002a4 	muli	r3,r2,10
  8014e8:	e0bffd17 	ldw	r2,-12(fp)
  8014ec:	11000044 	addi	r4,r2,1
  8014f0:	e13ffd15 	stw	r4,-12(fp)
  8014f4:	10800003 	ldbu	r2,0(r2)
  8014f8:	10803fcc 	andi	r2,r2,255
  8014fc:	1080201c 	xori	r2,r2,128
  801500:	10bfe004 	addi	r2,r2,-128
  801504:	10bff404 	addi	r2,r2,-48
  801508:	1885883a 	add	r2,r3,r2
  80150c:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  801510:	00802034 	movhi	r2,128
  801514:	10973204 	addi	r2,r2,23752
  801518:	10c00017 	ldw	r3,0(r2)
  80151c:	e0bffd17 	ldw	r2,-12(fp)
  801520:	10800003 	ldbu	r2,0(r2)
  801524:	10803fcc 	andi	r2,r2,255
  801528:	1080201c 	xori	r2,r2,128
  80152c:	10bfe004 	addi	r2,r2,-128
  801530:	10800044 	addi	r2,r2,1
  801534:	1885883a 	add	r2,r3,r2
  801538:	10800003 	ldbu	r2,0(r2)
  80153c:	10803fcc 	andi	r2,r2,255
  801540:	1080010c 	andi	r2,r2,4
  801544:	103fe61e 	bne	r2,zero,8014e0 <__alt_data_end+0xff8014e0>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  801548:	e0bffd17 	ldw	r2,-12(fp)
  80154c:	10800003 	ldbu	r2,0(r2)
  801550:	10803fcc 	andi	r2,r2,255
  801554:	1080201c 	xori	r2,r2,128
  801558:	10bfe004 	addi	r2,r2,-128
  80155c:	10800ed8 	cmpnei	r2,r2,59
  801560:	10001e1e 	bne	r2,zero,8015dc <lcd_handle_escape+0x14c>
    {
      ptr++;
  801564:	e0bffd17 	ldw	r2,-12(fp)
  801568:	10800044 	addi	r2,r2,1
  80156c:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  801570:	00000c06 	br	8015a4 <lcd_handle_escape+0x114>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  801574:	e0bffc17 	ldw	r2,-16(fp)
  801578:	10c002a4 	muli	r3,r2,10
  80157c:	e0bffd17 	ldw	r2,-12(fp)
  801580:	11000044 	addi	r4,r2,1
  801584:	e13ffd15 	stw	r4,-12(fp)
  801588:	10800003 	ldbu	r2,0(r2)
  80158c:	10803fcc 	andi	r2,r2,255
  801590:	1080201c 	xori	r2,r2,128
  801594:	10bfe004 	addi	r2,r2,-128
  801598:	10bff404 	addi	r2,r2,-48
  80159c:	1885883a 	add	r2,r3,r2
  8015a0:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  8015a4:	00802034 	movhi	r2,128
  8015a8:	10973204 	addi	r2,r2,23752
  8015ac:	10c00017 	ldw	r3,0(r2)
  8015b0:	e0bffd17 	ldw	r2,-12(fp)
  8015b4:	10800003 	ldbu	r2,0(r2)
  8015b8:	10803fcc 	andi	r2,r2,255
  8015bc:	1080201c 	xori	r2,r2,128
  8015c0:	10bfe004 	addi	r2,r2,-128
  8015c4:	10800044 	addi	r2,r2,1
  8015c8:	1885883a 	add	r2,r3,r2
  8015cc:	10800003 	ldbu	r2,0(r2)
  8015d0:	10803fcc 	andi	r2,r2,255
  8015d4:	1080010c 	andi	r2,r2,4
  8015d8:	103fe61e 	bne	r2,zero,801574 <__alt_data_end+0xff801574>
  8015dc:	00000206 	br	8015e8 <lcd_handle_escape+0x158>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  8015e0:	00bfffc4 	movi	r2,-1
  8015e4:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  8015e8:	e0bfff07 	ldb	r2,-4(fp)
  8015ec:	10c012a0 	cmpeqi	r3,r2,74
  8015f0:	1800281e 	bne	r3,zero,801694 <lcd_handle_escape+0x204>
  8015f4:	10c012c8 	cmpgei	r3,r2,75
  8015f8:	1800031e 	bne	r3,zero,801608 <lcd_handle_escape+0x178>
  8015fc:	10801220 	cmpeqi	r2,r2,72
  801600:	1000051e 	bne	r2,zero,801618 <lcd_handle_escape+0x188>
  801604:	00004506 	br	80171c <lcd_handle_escape+0x28c>
  801608:	10c012e0 	cmpeqi	r3,r2,75
  80160c:	1800281e 	bne	r3,zero,8016b0 <lcd_handle_escape+0x220>
  801610:	108019a0 	cmpeqi	r2,r2,102
  801614:	10004126 	beq	r2,zero,80171c <lcd_handle_escape+0x28c>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  801618:	e0bffc17 	ldw	r2,-16(fp)
  80161c:	0080050e 	bge	zero,r2,801634 <lcd_handle_escape+0x1a4>
      sp->x = parm2 - 1;
  801620:	e0bffc17 	ldw	r2,-16(fp)
  801624:	10bfffc4 	addi	r2,r2,-1
  801628:	1007883a 	mov	r3,r2
  80162c:	e0bffe17 	ldw	r2,-8(fp)
  801630:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  801634:	e0bffb17 	ldw	r2,-20(fp)
  801638:	0080150e 	bge	zero,r2,801690 <lcd_handle_escape+0x200>
    {
      sp->y = parm1 - 1;
  80163c:	e0bffb17 	ldw	r2,-20(fp)
  801640:	10bfffc4 	addi	r2,r2,-1
  801644:	1007883a 	mov	r3,r2
  801648:	e0bffe17 	ldw	r2,-8(fp)
  80164c:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  801650:	e0bffe17 	ldw	r2,-8(fp)
  801654:	10800883 	ldbu	r2,34(r2)
  801658:	10803fcc 	andi	r2,r2,255
  80165c:	10800170 	cmpltui	r2,r2,5
  801660:	1000031e 	bne	r2,zero,801670 <lcd_handle_escape+0x1e0>
        sp->y = ALT_LCD_HEIGHT * 2;
  801664:	e0bffe17 	ldw	r2,-8(fp)
  801668:	00c00104 	movi	r3,4
  80166c:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  801670:	00000206 	br	80167c <lcd_handle_escape+0x1ec>
        lcd_scroll_up(sp);
  801674:	e13ffe17 	ldw	r4,-8(fp)
  801678:	08013c80 	call	8013c8 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80167c:	e0bffe17 	ldw	r2,-8(fp)
  801680:	10800883 	ldbu	r2,34(r2)
  801684:	10803fcc 	andi	r2,r2,255
  801688:	108000e8 	cmpgeui	r2,r2,3
  80168c:	103ff91e 	bne	r2,zero,801674 <__alt_data_end+0xff801674>
        lcd_scroll_up(sp);
    }
    break;
  801690:	00002206 	br	80171c <lcd_handle_escape+0x28c>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  801694:	e0bffb17 	ldw	r2,-20(fp)
  801698:	10800098 	cmpnei	r2,r2,2
  80169c:	1000031e 	bne	r2,zero,8016ac <lcd_handle_escape+0x21c>
      lcd_clear_screen(sp);
  8016a0:	e13ffe17 	ldw	r4,-8(fp)
  8016a4:	08011140 	call	801114 <lcd_clear_screen>
    break;
  8016a8:	00001c06 	br	80171c <lcd_handle_escape+0x28c>
  8016ac:	00001b06 	br	80171c <lcd_handle_escape+0x28c>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  8016b0:	e0bffb17 	ldw	r2,-20(fp)
  8016b4:	00801816 	blt	zero,r2,801718 <lcd_handle_escape+0x288>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8016b8:	e0bffe17 	ldw	r2,-8(fp)
  8016bc:	10800843 	ldbu	r2,33(r2)
  8016c0:	10803fcc 	andi	r2,r2,255
  8016c4:	10801428 	cmpgeui	r2,r2,80
  8016c8:	1000131e 	bne	r2,zero,801718 <lcd_handle_escape+0x288>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  8016cc:	e0bffe17 	ldw	r2,-8(fp)
  8016d0:	10800883 	ldbu	r2,34(r2)
  8016d4:	10803fcc 	andi	r2,r2,255
  8016d8:	108018e4 	muli	r2,r2,99
  8016dc:	10801004 	addi	r2,r2,64
  8016e0:	e0fffe17 	ldw	r3,-8(fp)
  8016e4:	1887883a 	add	r3,r3,r2
  8016e8:	e0bffe17 	ldw	r2,-8(fp)
  8016ec:	10800843 	ldbu	r2,33(r2)
  8016f0:	10803fcc 	andi	r2,r2,255
  8016f4:	1889883a 	add	r4,r3,r2
  8016f8:	e0bffe17 	ldw	r2,-8(fp)
  8016fc:	10800843 	ldbu	r2,33(r2)
  801700:	10803fcc 	andi	r2,r2,255
  801704:	00c01404 	movi	r3,80
  801708:	1885c83a 	sub	r2,r3,r2
  80170c:	01400804 	movi	r5,32
  801710:	100d883a 	mov	r6,r2
  801714:	0803b6c0 	call	803b6c <memset>
    }
    break;
  801718:	0001883a 	nop
  }
}
  80171c:	e037883a 	mov	sp,fp
  801720:	dfc00117 	ldw	ra,4(sp)
  801724:	df000017 	ldw	fp,0(sp)
  801728:	dec00204 	addi	sp,sp,8
  80172c:	f800283a 	ret

00801730 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  801730:	defff304 	addi	sp,sp,-52
  801734:	dfc00c15 	stw	ra,48(sp)
  801738:	df000b15 	stw	fp,44(sp)
  80173c:	df000b04 	addi	fp,sp,44
  801740:	e13ffc15 	stw	r4,-16(fp)
  801744:	e17ffd15 	stw	r5,-12(fp)
  801748:	e1bffe15 	stw	r6,-8(fp)
  80174c:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  801750:	e0bffe17 	ldw	r2,-8(fp)
  801754:	e0fffd17 	ldw	r3,-12(fp)
  801758:	1885883a 	add	r2,r3,r2
  80175c:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  801760:	e0bffc17 	ldw	r2,-16(fp)
  801764:	00c00044 	movi	r3,1
  801768:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  80176c:	00009e06 	br	8019e8 <altera_avalon_lcd_16207_write+0x2b8>
  {
    char c = *ptr;
  801770:	e0bffd17 	ldw	r2,-12(fp)
  801774:	10800003 	ldbu	r2,0(r2)
  801778:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  80177c:	e0bffc17 	ldw	r2,-16(fp)
  801780:	10800903 	ldbu	r2,36(r2)
  801784:	10803fcc 	andi	r2,r2,255
  801788:	1080201c 	xori	r2,r2,128
  80178c:	10bfe004 	addi	r2,r2,-128
  801790:	10003a16 	blt	r2,zero,80187c <altera_avalon_lcd_16207_write+0x14c>
    {
      unsigned int esccount = sp->esccount;
  801794:	e0bffc17 	ldw	r2,-16(fp)
  801798:	10800903 	ldbu	r2,36(r2)
  80179c:	10803fcc 	andi	r2,r2,255
  8017a0:	1080201c 	xori	r2,r2,128
  8017a4:	10bfe004 	addi	r2,r2,-128
  8017a8:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8017ac:	e0bffa17 	ldw	r2,-24(fp)
  8017b0:	1000031e 	bne	r2,zero,8017c0 <altera_avalon_lcd_16207_write+0x90>
  8017b4:	e0bff907 	ldb	r2,-28(fp)
  8017b8:	108016d8 	cmpnei	r2,r2,91
  8017bc:	10000f1e 	bne	r2,zero,8017fc <altera_avalon_lcd_16207_write+0xcc>
  8017c0:	e0bffa17 	ldw	r2,-24(fp)
  8017c4:	10001a26 	beq	r2,zero,801830 <altera_avalon_lcd_16207_write+0x100>
          (esccount > 0 && !isdigit(c) && c != ';'))
  8017c8:	00802034 	movhi	r2,128
  8017cc:	10973204 	addi	r2,r2,23752
  8017d0:	10c00017 	ldw	r3,0(r2)
  8017d4:	e0bff907 	ldb	r2,-28(fp)
  8017d8:	10800044 	addi	r2,r2,1
  8017dc:	1885883a 	add	r2,r3,r2
  8017e0:	10800003 	ldbu	r2,0(r2)
  8017e4:	10803fcc 	andi	r2,r2,255
  8017e8:	1080010c 	andi	r2,r2,4
  8017ec:	1000101e 	bne	r2,zero,801830 <altera_avalon_lcd_16207_write+0x100>
  8017f0:	e0bff907 	ldb	r2,-28(fp)
  8017f4:	10800ee0 	cmpeqi	r2,r2,59
  8017f8:	10000d1e 	bne	r2,zero,801830 <altera_avalon_lcd_16207_write+0x100>
      {
        sp->escape[esccount] = 0;
  8017fc:	e0fffc17 	ldw	r3,-16(fp)
  801800:	e0bffa17 	ldw	r2,-24(fp)
  801804:	1885883a 	add	r2,r3,r2
  801808:	10800a04 	addi	r2,r2,40
  80180c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  801810:	e0bff907 	ldb	r2,-28(fp)
  801814:	e13ffc17 	ldw	r4,-16(fp)
  801818:	100b883a 	mov	r5,r2
  80181c:	08014900 	call	801490 <lcd_handle_escape>

        sp->esccount = -1;
  801820:	e0bffc17 	ldw	r2,-16(fp)
  801824:	00ffffc4 	movi	r3,-1
  801828:	10c00905 	stb	r3,36(r2)
  80182c:	00001206 	br	801878 <altera_avalon_lcd_16207_write+0x148>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  801830:	e0bffc17 	ldw	r2,-16(fp)
  801834:	10800903 	ldbu	r2,36(r2)
  801838:	10803fcc 	andi	r2,r2,255
  80183c:	108001e8 	cmpgeui	r2,r2,7
  801840:	10000d1e 	bne	r2,zero,801878 <altera_avalon_lcd_16207_write+0x148>
      {
        sp->escape[esccount] = c;
  801844:	e0fffc17 	ldw	r3,-16(fp)
  801848:	e0bffa17 	ldw	r2,-24(fp)
  80184c:	1885883a 	add	r2,r3,r2
  801850:	10800a04 	addi	r2,r2,40
  801854:	e0fff903 	ldbu	r3,-28(fp)
  801858:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  80185c:	e0bffc17 	ldw	r2,-16(fp)
  801860:	10800903 	ldbu	r2,36(r2)
  801864:	10800044 	addi	r2,r2,1
  801868:	1007883a 	mov	r3,r2
  80186c:	e0bffc17 	ldw	r2,-16(fp)
  801870:	10c00905 	stb	r3,36(r2)
  801874:	00005906 	br	8019dc <altera_avalon_lcd_16207_write+0x2ac>
  801878:	00005806 	br	8019dc <altera_avalon_lcd_16207_write+0x2ac>
      }
    }
    else if (c == 27) /* ESC */
  80187c:	e0bff907 	ldb	r2,-28(fp)
  801880:	108006d8 	cmpnei	r2,r2,27
  801884:	1000031e 	bne	r2,zero,801894 <altera_avalon_lcd_16207_write+0x164>
    {
      sp->esccount = 0;
  801888:	e0bffc17 	ldw	r2,-16(fp)
  80188c:	10000905 	stb	zero,36(r2)
  801890:	00005206 	br	8019dc <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\r')
  801894:	e0bff907 	ldb	r2,-28(fp)
  801898:	10800358 	cmpnei	r2,r2,13
  80189c:	1000031e 	bne	r2,zero,8018ac <altera_avalon_lcd_16207_write+0x17c>
    {
      sp->x = 0;
  8018a0:	e0bffc17 	ldw	r2,-16(fp)
  8018a4:	10000845 	stb	zero,33(r2)
  8018a8:	00004c06 	br	8019dc <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\n')
  8018ac:	e0bff907 	ldb	r2,-28(fp)
  8018b0:	10800298 	cmpnei	r2,r2,10
  8018b4:	1000101e 	bne	r2,zero,8018f8 <altera_avalon_lcd_16207_write+0x1c8>
    {
      sp->x = 0;
  8018b8:	e0bffc17 	ldw	r2,-16(fp)
  8018bc:	10000845 	stb	zero,33(r2)
      sp->y++;
  8018c0:	e0bffc17 	ldw	r2,-16(fp)
  8018c4:	10800883 	ldbu	r2,34(r2)
  8018c8:	10800044 	addi	r2,r2,1
  8018cc:	1007883a 	mov	r3,r2
  8018d0:	e0bffc17 	ldw	r2,-16(fp)
  8018d4:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  8018d8:	e0bffc17 	ldw	r2,-16(fp)
  8018dc:	10800883 	ldbu	r2,34(r2)
  8018e0:	10803fcc 	andi	r2,r2,255
  8018e4:	108000f0 	cmpltui	r2,r2,3
  8018e8:	10003c1e 	bne	r2,zero,8019dc <altera_avalon_lcd_16207_write+0x2ac>
        lcd_scroll_up(sp);
  8018ec:	e13ffc17 	ldw	r4,-16(fp)
  8018f0:	08013c80 	call	8013c8 <lcd_scroll_up>
  8018f4:	00003906 	br	8019dc <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (c == '\b')
  8018f8:	e0bff907 	ldb	r2,-28(fp)
  8018fc:	10800218 	cmpnei	r2,r2,8
  801900:	10000b1e 	bne	r2,zero,801930 <altera_avalon_lcd_16207_write+0x200>
    {
      if (sp->x > 0)
  801904:	e0bffc17 	ldw	r2,-16(fp)
  801908:	10800843 	ldbu	r2,33(r2)
  80190c:	10803fcc 	andi	r2,r2,255
  801910:	10003226 	beq	r2,zero,8019dc <altera_avalon_lcd_16207_write+0x2ac>
        sp->x--;
  801914:	e0bffc17 	ldw	r2,-16(fp)
  801918:	10800843 	ldbu	r2,33(r2)
  80191c:	10bfffc4 	addi	r2,r2,-1
  801920:	1007883a 	mov	r3,r2
  801924:	e0bffc17 	ldw	r2,-16(fp)
  801928:	10c00845 	stb	r3,33(r2)
  80192c:	00002b06 	br	8019dc <altera_avalon_lcd_16207_write+0x2ac>
    }
    else if (isprint(c))
  801930:	00802034 	movhi	r2,128
  801934:	10973204 	addi	r2,r2,23752
  801938:	10c00017 	ldw	r3,0(r2)
  80193c:	e0bff907 	ldb	r2,-28(fp)
  801940:	10800044 	addi	r2,r2,1
  801944:	1885883a 	add	r2,r3,r2
  801948:	10800003 	ldbu	r2,0(r2)
  80194c:	10803fcc 	andi	r2,r2,255
  801950:	1080201c 	xori	r2,r2,128
  801954:	10bfe004 	addi	r2,r2,-128
  801958:	108025cc 	andi	r2,r2,151
  80195c:	10001f26 	beq	r2,zero,8019dc <altera_avalon_lcd_16207_write+0x2ac>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  801960:	e0bffc17 	ldw	r2,-16(fp)
  801964:	10800883 	ldbu	r2,34(r2)
  801968:	10803fcc 	andi	r2,r2,255
  80196c:	108000b0 	cmpltui	r2,r2,2
  801970:	1000021e 	bne	r2,zero,80197c <altera_avalon_lcd_16207_write+0x24c>
        lcd_scroll_up(sp);
  801974:	e13ffc17 	ldw	r4,-16(fp)
  801978:	08013c80 	call	8013c8 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80197c:	e0bffc17 	ldw	r2,-16(fp)
  801980:	10800843 	ldbu	r2,33(r2)
  801984:	10803fcc 	andi	r2,r2,255
  801988:	10801428 	cmpgeui	r2,r2,80
  80198c:	10000d1e 	bne	r2,zero,8019c4 <altera_avalon_lcd_16207_write+0x294>
        sp->line[sp->y].data[sp->x] = c;
  801990:	e0bffc17 	ldw	r2,-16(fp)
  801994:	10800883 	ldbu	r2,34(r2)
  801998:	10c03fcc 	andi	r3,r2,255
  80199c:	e0bffc17 	ldw	r2,-16(fp)
  8019a0:	10800843 	ldbu	r2,33(r2)
  8019a4:	10803fcc 	andi	r2,r2,255
  8019a8:	e13ffc17 	ldw	r4,-16(fp)
  8019ac:	18c018e4 	muli	r3,r3,99
  8019b0:	20c7883a 	add	r3,r4,r3
  8019b4:	1885883a 	add	r2,r3,r2
  8019b8:	10801004 	addi	r2,r2,64
  8019bc:	e0fff903 	ldbu	r3,-28(fp)
  8019c0:	10c00005 	stb	r3,0(r2)

      sp->x++;
  8019c4:	e0bffc17 	ldw	r2,-16(fp)
  8019c8:	10800843 	ldbu	r2,33(r2)
  8019cc:	10800044 	addi	r2,r2,1
  8019d0:	1007883a 	mov	r3,r2
  8019d4:	e0bffc17 	ldw	r2,-16(fp)
  8019d8:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  8019dc:	e0bffd17 	ldw	r2,-12(fp)
  8019e0:	10800044 	addi	r2,r2,1
  8019e4:	e0bffd15 	stw	r2,-12(fp)
  8019e8:	e0fffd17 	ldw	r3,-12(fp)
  8019ec:	e0bff817 	ldw	r2,-32(fp)
  8019f0:	18bf5f36 	bltu	r3,r2,801770 <__alt_data_end+0xff801770>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  8019f4:	00800404 	movi	r2,16
  8019f8:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8019fc:	e03ff515 	stw	zero,-44(fp)
  801a00:	00003606 	br	801adc <altera_avalon_lcd_16207_write+0x3ac>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  801a04:	00801404 	movi	r2,80
  801a08:	e0bff715 	stw	r2,-36(fp)
  801a0c:	00001206 	br	801a58 <altera_avalon_lcd_16207_write+0x328>
      if (sp->line[y].data[width-1] != ' ')
  801a10:	e0bff717 	ldw	r2,-36(fp)
  801a14:	10bfffc4 	addi	r2,r2,-1
  801a18:	e13ffc17 	ldw	r4,-16(fp)
  801a1c:	e0fff517 	ldw	r3,-44(fp)
  801a20:	18c018e4 	muli	r3,r3,99
  801a24:	20c7883a 	add	r3,r4,r3
  801a28:	1885883a 	add	r2,r3,r2
  801a2c:	10801004 	addi	r2,r2,64
  801a30:	10800003 	ldbu	r2,0(r2)
  801a34:	10803fcc 	andi	r2,r2,255
  801a38:	1080201c 	xori	r2,r2,128
  801a3c:	10bfe004 	addi	r2,r2,-128
  801a40:	10800820 	cmpeqi	r2,r2,32
  801a44:	1000011e 	bne	r2,zero,801a4c <altera_avalon_lcd_16207_write+0x31c>
        break;
  801a48:	00000506 	br	801a60 <altera_avalon_lcd_16207_write+0x330>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  801a4c:	e0bff717 	ldw	r2,-36(fp)
  801a50:	10bfffc4 	addi	r2,r2,-1
  801a54:	e0bff715 	stw	r2,-36(fp)
  801a58:	e0bff717 	ldw	r2,-36(fp)
  801a5c:	00bfec16 	blt	zero,r2,801a10 <__alt_data_end+0xff801a10>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  801a60:	e0bff717 	ldw	r2,-36(fp)
  801a64:	10800448 	cmpgei	r2,r2,17
  801a68:	1000031e 	bne	r2,zero,801a78 <altera_avalon_lcd_16207_write+0x348>
      width = ALT_LCD_WIDTH;
  801a6c:	00800404 	movi	r2,16
  801a70:	e0bff715 	stw	r2,-36(fp)
  801a74:	00000306 	br	801a84 <altera_avalon_lcd_16207_write+0x354>
    else
      width++;
  801a78:	e0bff717 	ldw	r2,-36(fp)
  801a7c:	10800044 	addi	r2,r2,1
  801a80:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  801a84:	e0bff717 	ldw	r2,-36(fp)
  801a88:	1009883a 	mov	r4,r2
  801a8c:	e0fffc17 	ldw	r3,-16(fp)
  801a90:	e0bff517 	ldw	r2,-44(fp)
  801a94:	108018e4 	muli	r2,r2,99
  801a98:	10802404 	addi	r2,r2,144
  801a9c:	1885883a 	add	r2,r3,r2
  801aa0:	11000045 	stb	r4,1(r2)
    if (widthmax < width)
  801aa4:	e0fff617 	ldw	r3,-40(fp)
  801aa8:	e0bff717 	ldw	r2,-36(fp)
  801aac:	1880020e 	bge	r3,r2,801ab8 <altera_avalon_lcd_16207_write+0x388>
      widthmax = width;
  801ab0:	e0bff717 	ldw	r2,-36(fp)
  801ab4:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  801ab8:	e0fffc17 	ldw	r3,-16(fp)
  801abc:	e0bff517 	ldw	r2,-44(fp)
  801ac0:	108018e4 	muli	r2,r2,99
  801ac4:	10802404 	addi	r2,r2,144
  801ac8:	1885883a 	add	r2,r3,r2
  801acc:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801ad0:	e0bff517 	ldw	r2,-44(fp)
  801ad4:	10800044 	addi	r2,r2,1
  801ad8:	e0bff515 	stw	r2,-44(fp)
  801adc:	e0bff517 	ldw	r2,-44(fp)
  801ae0:	10800090 	cmplti	r2,r2,2
  801ae4:	103fc71e 	bne	r2,zero,801a04 <__alt_data_end+0xff801a04>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  801ae8:	e0bff617 	ldw	r2,-40(fp)
  801aec:	10800448 	cmpgei	r2,r2,17
  801af0:	1000031e 	bne	r2,zero,801b00 <altera_avalon_lcd_16207_write+0x3d0>
    sp->scrollmax = 0;
  801af4:	e0bffc17 	ldw	r2,-16(fp)
  801af8:	10000985 	stb	zero,38(r2)
  801afc:	00002e06 	br	801bb8 <altera_avalon_lcd_16207_write+0x488>
  else
  {
    widthmax *= 2;
  801b00:	e0bff617 	ldw	r2,-40(fp)
  801b04:	1085883a 	add	r2,r2,r2
  801b08:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  801b0c:	e0bff617 	ldw	r2,-40(fp)
  801b10:	1007883a 	mov	r3,r2
  801b14:	e0bffc17 	ldw	r2,-16(fp)
  801b18:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801b1c:	e03ff515 	stw	zero,-44(fp)
  801b20:	00002206 	br	801bac <altera_avalon_lcd_16207_write+0x47c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  801b24:	e0fffc17 	ldw	r3,-16(fp)
  801b28:	e0bff517 	ldw	r2,-44(fp)
  801b2c:	108018e4 	muli	r2,r2,99
  801b30:	10802404 	addi	r2,r2,144
  801b34:	1885883a 	add	r2,r3,r2
  801b38:	10800043 	ldbu	r2,1(r2)
  801b3c:	10803fcc 	andi	r2,r2,255
  801b40:	1080201c 	xori	r2,r2,128
  801b44:	10bfe004 	addi	r2,r2,-128
  801b48:	10800450 	cmplti	r2,r2,17
  801b4c:	1000141e 	bne	r2,zero,801ba0 <altera_avalon_lcd_16207_write+0x470>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  801b50:	e0fffc17 	ldw	r3,-16(fp)
  801b54:	e0bff517 	ldw	r2,-44(fp)
  801b58:	108018e4 	muli	r2,r2,99
  801b5c:	10802404 	addi	r2,r2,144
  801b60:	1885883a 	add	r2,r3,r2
  801b64:	10800043 	ldbu	r2,1(r2)
  801b68:	10803fcc 	andi	r2,r2,255
  801b6c:	1080201c 	xori	r2,r2,128
  801b70:	10bfe004 	addi	r2,r2,-128
  801b74:	1004923a 	slli	r2,r2,8
  801b78:	1009883a 	mov	r4,r2
  801b7c:	e17ff617 	ldw	r5,-40(fp)
  801b80:	080403c0 	call	80403c <__divsi3>
  801b84:	1009883a 	mov	r4,r2
  801b88:	e0fffc17 	ldw	r3,-16(fp)
  801b8c:	e0bff517 	ldw	r2,-44(fp)
  801b90:	108018e4 	muli	r2,r2,99
  801b94:	10802404 	addi	r2,r2,144
  801b98:	1885883a 	add	r2,r3,r2
  801b9c:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  801ba0:	e0bff517 	ldw	r2,-44(fp)
  801ba4:	10800044 	addi	r2,r2,1
  801ba8:	e0bff515 	stw	r2,-44(fp)
  801bac:	e0bff517 	ldw	r2,-44(fp)
  801bb0:	10800090 	cmplti	r2,r2,2
  801bb4:	103fdb1e 	bne	r2,zero,801b24 <__alt_data_end+0xff801b24>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  801bb8:	e0bffc17 	ldw	r2,-16(fp)
  801bbc:	10800943 	ldbu	r2,37(r2)
  801bc0:	10803fcc 	andi	r2,r2,255
  801bc4:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  801bc8:	e13ffc17 	ldw	r4,-16(fp)
  801bcc:	08011e00 	call	8011e0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  801bd0:	e0bffc17 	ldw	r2,-16(fp)
  801bd4:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  801bd8:	e0bffc17 	ldw	r2,-16(fp)
  801bdc:	10800943 	ldbu	r2,37(r2)
  801be0:	10c03fcc 	andi	r3,r2,255
  801be4:	e0bffb17 	ldw	r2,-20(fp)
  801be8:	1880011e 	bne	r3,r2,801bf0 <altera_avalon_lcd_16207_write+0x4c0>
      break;
  801bec:	00000406 	br	801c00 <altera_avalon_lcd_16207_write+0x4d0>

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  801bf0:	e0bffc17 	ldw	r2,-16(fp)
  801bf4:	00c00044 	movi	r3,1
  801bf8:	10c009c5 	stb	r3,39(r2)
  }
  801bfc:	003fee06 	br	801bb8 <__alt_data_end+0xff801bb8>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  801c00:	e0bffe17 	ldw	r2,-8(fp)
}
  801c04:	e037883a 	mov	sp,fp
  801c08:	dfc00117 	ldw	ra,4(sp)
  801c0c:	df000017 	ldw	fp,0(sp)
  801c10:	dec00204 	addi	sp,sp,8
  801c14:	f800283a 	ret

00801c18 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  801c18:	defffc04 	addi	sp,sp,-16
  801c1c:	dfc00315 	stw	ra,12(sp)
  801c20:	df000215 	stw	fp,8(sp)
  801c24:	df000204 	addi	fp,sp,8
  801c28:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  801c2c:	e0bfff17 	ldw	r2,-4(fp)
  801c30:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  801c34:	e0bffe17 	ldw	r2,-8(fp)
  801c38:	10800943 	ldbu	r2,37(r2)
  801c3c:	10803fcc 	andi	r2,r2,255
  801c40:	10c00044 	addi	r3,r2,1
  801c44:	e0bffe17 	ldw	r2,-8(fp)
  801c48:	10800983 	ldbu	r2,38(r2)
  801c4c:	10803fcc 	andi	r2,r2,255
  801c50:	18800316 	blt	r3,r2,801c60 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  801c54:	e0bffe17 	ldw	r2,-8(fp)
  801c58:	10000945 	stb	zero,37(r2)
  801c5c:	00000606 	br	801c78 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  801c60:	e0bffe17 	ldw	r2,-8(fp)
  801c64:	10800943 	ldbu	r2,37(r2)
  801c68:	10800044 	addi	r2,r2,1
  801c6c:	1007883a 	mov	r3,r2
  801c70:	e0bffe17 	ldw	r2,-8(fp)
  801c74:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  801c78:	e0bffe17 	ldw	r2,-8(fp)
  801c7c:	10800983 	ldbu	r2,38(r2)
  801c80:	10803fcc 	andi	r2,r2,255
  801c84:	10000826 	beq	r2,zero,801ca8 <alt_lcd_16207_timeout+0x90>
  801c88:	e0bffe17 	ldw	r2,-8(fp)
  801c8c:	108009c3 	ldbu	r2,39(r2)
  801c90:	10803fcc 	andi	r2,r2,255
  801c94:	1080201c 	xori	r2,r2,128
  801c98:	10bfe004 	addi	r2,r2,-128
  801c9c:	1000021e 	bne	r2,zero,801ca8 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  801ca0:	e13ffe17 	ldw	r4,-8(fp)
  801ca4:	08011e00 	call	8011e0 <lcd_repaint_screen>

  return sp->period;
  801ca8:	e0bffe17 	ldw	r2,-8(fp)
  801cac:	10800717 	ldw	r2,28(r2)
}
  801cb0:	e037883a 	mov	sp,fp
  801cb4:	dfc00117 	ldw	ra,4(sp)
  801cb8:	df000017 	ldw	fp,0(sp)
  801cbc:	dec00204 	addi	sp,sp,8
  801cc0:	f800283a 	ret

00801cc4 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  801cc4:	defffc04 	addi	sp,sp,-16
  801cc8:	dfc00315 	stw	ra,12(sp)
  801ccc:	df000215 	stw	fp,8(sp)
  801cd0:	df000204 	addi	fp,sp,8
  801cd4:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  801cd8:	e0bfff17 	ldw	r2,-4(fp)
  801cdc:	10800017 	ldw	r2,0(r2)
  801ce0:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  801ce4:	e0bfff17 	ldw	r2,-4(fp)
  801ce8:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  801cec:	010ea604 	movi	r4,15000
  801cf0:	08034440 	call	803444 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  801cf4:	e0bffe17 	ldw	r2,-8(fp)
  801cf8:	00c00c04 	movi	r3,48
  801cfc:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  801d00:	01040104 	movi	r4,4100
  801d04:	08034440 	call	803444 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  801d08:	e0bffe17 	ldw	r2,-8(fp)
  801d0c:	00c00c04 	movi	r3,48
  801d10:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  801d14:	0100fa04 	movi	r4,1000
  801d18:	08034440 	call	803444 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  801d1c:	e0bffe17 	ldw	r2,-8(fp)
  801d20:	00c00c04 	movi	r3,48
  801d24:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  801d28:	e13fff17 	ldw	r4,-4(fp)
  801d2c:	01400e04 	movi	r5,56
  801d30:	0800f8c0 	call	800f8c <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  801d34:	e13fff17 	ldw	r4,-4(fp)
  801d38:	01400204 	movi	r5,8
  801d3c:	0800f8c0 	call	800f8c <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  801d40:	e13fff17 	ldw	r4,-4(fp)
  801d44:	08011140 	call	801114 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  801d48:	e13fff17 	ldw	r4,-4(fp)
  801d4c:	01400184 	movi	r5,6
  801d50:	0800f8c0 	call	800f8c <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  801d54:	e13fff17 	ldw	r4,-4(fp)
  801d58:	01400304 	movi	r5,12
  801d5c:	0800f8c0 	call	800f8c <lcd_write_command>

  sp->esccount = -1;
  801d60:	e0bfff17 	ldw	r2,-4(fp)
  801d64:	00ffffc4 	movi	r3,-1
  801d68:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  801d6c:	e0bfff17 	ldw	r2,-4(fp)
  801d70:	10800a04 	addi	r2,r2,40
  801d74:	1009883a 	mov	r4,r2
  801d78:	000b883a 	mov	r5,zero
  801d7c:	01800204 	movi	r6,8
  801d80:	0803b6c0 	call	803b6c <memset>

  sp->scrollpos = 0;
  801d84:	e0bfff17 	ldw	r2,-4(fp)
  801d88:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  801d8c:	e0bfff17 	ldw	r2,-4(fp)
  801d90:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  801d94:	e0bfff17 	ldw	r2,-4(fp)
  801d98:	100009c5 	stb	zero,39(r2)
  801d9c:	00802034 	movhi	r2,128
  801da0:	109d6204 	addi	r2,r2,30088
  801da4:	10800017 	ldw	r2,0(r2)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  801da8:	1009883a 	mov	r4,r2
  801dac:	01400284 	movi	r5,10
  801db0:	08040ec0 	call	8040ec <__udivsi3>
  801db4:	1007883a 	mov	r3,r2
  801db8:	e0bfff17 	ldw	r2,-4(fp)
  801dbc:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  801dc0:	e0bfff17 	ldw	r2,-4(fp)
  801dc4:	10c00104 	addi	r3,r2,4
  801dc8:	e0bfff17 	ldw	r2,-4(fp)
  801dcc:	10800717 	ldw	r2,28(r2)
  801dd0:	1809883a 	mov	r4,r3
  801dd4:	100b883a 	mov	r5,r2
  801dd8:	01802034 	movhi	r6,128
  801ddc:	31870604 	addi	r6,r6,7192
  801de0:	e1ffff17 	ldw	r7,-4(fp)
  801de4:	08028400 	call	802840 <alt_alarm_start>
}
  801de8:	e037883a 	mov	sp,fp
  801dec:	dfc00117 	ldw	ra,4(sp)
  801df0:	df000017 	ldw	fp,0(sp)
  801df4:	dec00204 	addi	sp,sp,8
  801df8:	f800283a 	ret

00801dfc <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  801dfc:	defffa04 	addi	sp,sp,-24
  801e00:	dfc00515 	stw	ra,20(sp)
  801e04:	df000415 	stw	fp,16(sp)
  801e08:	df000404 	addi	fp,sp,16
  801e0c:	e13ffd15 	stw	r4,-12(fp)
  801e10:	e17ffe15 	stw	r5,-8(fp)
  801e14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  801e18:	e0bffd17 	ldw	r2,-12(fp)
  801e1c:	10800017 	ldw	r2,0(r2)
  801e20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  801e24:	e0bffc17 	ldw	r2,-16(fp)
  801e28:	10c00a04 	addi	r3,r2,40
  801e2c:	e0bffd17 	ldw	r2,-12(fp)
  801e30:	10800217 	ldw	r2,8(r2)
  801e34:	1809883a 	mov	r4,r3
  801e38:	e17ffe17 	ldw	r5,-8(fp)
  801e3c:	e1bfff17 	ldw	r6,-4(fp)
  801e40:	100f883a 	mov	r7,r2
  801e44:	08017300 	call	801730 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  801e48:	e037883a 	mov	sp,fp
  801e4c:	dfc00117 	ldw	ra,4(sp)
  801e50:	df000017 	ldw	fp,0(sp)
  801e54:	dec00204 	addi	sp,sp,8
  801e58:	f800283a 	ret

00801e5c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  801e5c:	defff904 	addi	sp,sp,-28
  801e60:	dfc00615 	stw	ra,24(sp)
  801e64:	df000515 	stw	fp,20(sp)
  801e68:	df000504 	addi	fp,sp,20
  801e6c:	e13ffe15 	stw	r4,-8(fp)
  801e70:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  801e74:	0007883a 	mov	r3,zero
  801e78:	e0bffe17 	ldw	r2,-8(fp)
  801e7c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  801e80:	e0bffe17 	ldw	r2,-8(fp)
  801e84:	10800104 	addi	r2,r2,4
  801e88:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  801e8c:	0005303a 	rdctl	r2,status
  801e90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  801e94:	e0fffc17 	ldw	r3,-16(fp)
  801e98:	00bfff84 	movi	r2,-2
  801e9c:	1884703a 	and	r2,r3,r2
  801ea0:	1001703a 	wrctl	status,r2
  
  return context;
  801ea4:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  801ea8:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
  801eac:	08033400 	call	803340 <alt_tick>
  801eb0:	e0bffb17 	ldw	r2,-20(fp)
  801eb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  801eb8:	e0bffd17 	ldw	r2,-12(fp)
  801ebc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  801ec0:	e037883a 	mov	sp,fp
  801ec4:	dfc00117 	ldw	ra,4(sp)
  801ec8:	df000017 	ldw	fp,0(sp)
  801ecc:	dec00204 	addi	sp,sp,8
  801ed0:	f800283a 	ret

00801ed4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  801ed4:	defff904 	addi	sp,sp,-28
  801ed8:	dfc00615 	stw	ra,24(sp)
  801edc:	df000515 	stw	fp,20(sp)
  801ee0:	df000504 	addi	fp,sp,20
  801ee4:	e13ffc15 	stw	r4,-16(fp)
  801ee8:	e17ffd15 	stw	r5,-12(fp)
  801eec:	e1bffe15 	stw	r6,-8(fp)
  801ef0:	e1ffff15 	stw	r7,-4(fp)
  801ef4:	e0bfff17 	ldw	r2,-4(fp)
  801ef8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  801efc:	00802034 	movhi	r2,128
  801f00:	109d6204 	addi	r2,r2,30088
  801f04:	10800017 	ldw	r2,0(r2)
  801f08:	1000041e 	bne	r2,zero,801f1c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
  801f0c:	00802034 	movhi	r2,128
  801f10:	109d6204 	addi	r2,r2,30088
  801f14:	e0fffb17 	ldw	r3,-20(fp)
  801f18:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  801f1c:	e0bffc17 	ldw	r2,-16(fp)
  801f20:	10800104 	addi	r2,r2,4
  801f24:	00c001c4 	movi	r3,7
  801f28:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  801f2c:	e13ffe17 	ldw	r4,-8(fp)
  801f30:	e17ffc17 	ldw	r5,-16(fp)
  801f34:	01802034 	movhi	r6,128
  801f38:	31879704 	addi	r6,r6,7772
  801f3c:	0802e240 	call	802e24 <alt_irq_register>
#endif  
}
  801f40:	e037883a 	mov	sp,fp
  801f44:	dfc00117 	ldw	ra,4(sp)
  801f48:	df000017 	ldw	fp,0(sp)
  801f4c:	dec00204 	addi	sp,sp,8
  801f50:	f800283a 	ret

00801f54 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  801f54:	defffa04 	addi	sp,sp,-24
  801f58:	dfc00515 	stw	ra,20(sp)
  801f5c:	df000415 	stw	fp,16(sp)
  801f60:	df000404 	addi	fp,sp,16
  801f64:	e13ffd15 	stw	r4,-12(fp)
  801f68:	e17ffe15 	stw	r5,-8(fp)
  801f6c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  801f70:	e0bffd17 	ldw	r2,-12(fp)
  801f74:	10800017 	ldw	r2,0(r2)
  801f78:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  801f7c:	e0bffc17 	ldw	r2,-16(fp)
  801f80:	10c00a04 	addi	r3,r2,40
  801f84:	e0bffd17 	ldw	r2,-12(fp)
  801f88:	10800217 	ldw	r2,8(r2)
  801f8c:	1809883a 	mov	r4,r3
  801f90:	e17ffe17 	ldw	r5,-8(fp)
  801f94:	e1bfff17 	ldw	r6,-4(fp)
  801f98:	100f883a 	mov	r7,r2
  801f9c:	08024680 	call	802468 <altera_avalon_uart_read>
      fd->fd_flags);
}
  801fa0:	e037883a 	mov	sp,fp
  801fa4:	dfc00117 	ldw	ra,4(sp)
  801fa8:	df000017 	ldw	fp,0(sp)
  801fac:	dec00204 	addi	sp,sp,8
  801fb0:	f800283a 	ret

00801fb4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  801fb4:	defffa04 	addi	sp,sp,-24
  801fb8:	dfc00515 	stw	ra,20(sp)
  801fbc:	df000415 	stw	fp,16(sp)
  801fc0:	df000404 	addi	fp,sp,16
  801fc4:	e13ffd15 	stw	r4,-12(fp)
  801fc8:	e17ffe15 	stw	r5,-8(fp)
  801fcc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  801fd0:	e0bffd17 	ldw	r2,-12(fp)
  801fd4:	10800017 	ldw	r2,0(r2)
  801fd8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  801fdc:	e0bffc17 	ldw	r2,-16(fp)
  801fe0:	10c00a04 	addi	r3,r2,40
  801fe4:	e0bffd17 	ldw	r2,-12(fp)
  801fe8:	10800217 	ldw	r2,8(r2)
  801fec:	1809883a 	mov	r4,r3
  801ff0:	e17ffe17 	ldw	r5,-8(fp)
  801ff4:	e1bfff17 	ldw	r6,-4(fp)
  801ff8:	100f883a 	mov	r7,r2
  801ffc:	08026940 	call	802694 <altera_avalon_uart_write>
      fd->fd_flags);
}
  802000:	e037883a 	mov	sp,fp
  802004:	dfc00117 	ldw	ra,4(sp)
  802008:	df000017 	ldw	fp,0(sp)
  80200c:	dec00204 	addi	sp,sp,8
  802010:	f800283a 	ret

00802014 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  802014:	defffc04 	addi	sp,sp,-16
  802018:	dfc00315 	stw	ra,12(sp)
  80201c:	df000215 	stw	fp,8(sp)
  802020:	df000204 	addi	fp,sp,8
  802024:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  802028:	e0bfff17 	ldw	r2,-4(fp)
  80202c:	10800017 	ldw	r2,0(r2)
  802030:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  802034:	e0bffe17 	ldw	r2,-8(fp)
  802038:	10c00a04 	addi	r3,r2,40
  80203c:	e0bfff17 	ldw	r2,-4(fp)
  802040:	10800217 	ldw	r2,8(r2)
  802044:	1809883a 	mov	r4,r3
  802048:	100b883a 	mov	r5,r2
  80204c:	08023c40 	call	8023c4 <altera_avalon_uart_close>
}
  802050:	e037883a 	mov	sp,fp
  802054:	dfc00117 	ldw	ra,4(sp)
  802058:	df000017 	ldw	fp,0(sp)
  80205c:	dec00204 	addi	sp,sp,8
  802060:	f800283a 	ret

00802064 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  802064:	defff904 	addi	sp,sp,-28
  802068:	dfc00615 	stw	ra,24(sp)
  80206c:	df000515 	stw	fp,20(sp)
  802070:	df000504 	addi	fp,sp,20
  802074:	e13ffd15 	stw	r4,-12(fp)
  802078:	e17ffe15 	stw	r5,-8(fp)
  80207c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  802080:	e0bffd17 	ldw	r2,-12(fp)
  802084:	10800017 	ldw	r2,0(r2)
  802088:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80208c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  802090:	1000041e 	bne	r2,zero,8020a4 <altera_avalon_uart_init+0x40>
  802094:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  802098:	1000021e 	bne	r2,zero,8020a4 <altera_avalon_uart_init+0x40>
  80209c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8020a0:	10000226 	beq	r2,zero,8020ac <altera_avalon_uart_init+0x48>
  8020a4:	00800044 	movi	r2,1
  8020a8:	00000106 	br	8020b0 <altera_avalon_uart_init+0x4c>
  8020ac:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8020b0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8020b4:	e0bffc17 	ldw	r2,-16(fp)
  8020b8:	10000d1e 	bne	r2,zero,8020f0 <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8020bc:	e0bffd17 	ldw	r2,-12(fp)
  8020c0:	00c32004 	movi	r3,3200
  8020c4:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8020c8:	e0bffb17 	ldw	r2,-20(fp)
  8020cc:	10800304 	addi	r2,r2,12
  8020d0:	e0fffd17 	ldw	r3,-12(fp)
  8020d4:	18c00117 	ldw	r3,4(r3)
  8020d8:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
  8020dc:	e13fff17 	ldw	r4,-4(fp)
  8020e0:	e17ffd17 	ldw	r5,-12(fp)
  8020e4:	01802034 	movhi	r6,128
  8020e8:	31884104 	addi	r6,r6,8452
  8020ec:	0802e240 	call	802e24 <alt_irq_register>
#endif  
  }
}
  8020f0:	e037883a 	mov	sp,fp
  8020f4:	dfc00117 	ldw	ra,4(sp)
  8020f8:	df000017 	ldw	fp,0(sp)
  8020fc:	dec00204 	addi	sp,sp,8
  802100:	f800283a 	ret

00802104 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  802104:	defff904 	addi	sp,sp,-28
  802108:	dfc00615 	stw	ra,24(sp)
  80210c:	df000515 	stw	fp,20(sp)
  802110:	df000504 	addi	fp,sp,20
  802114:	e13ffe15 	stw	r4,-8(fp)
  802118:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80211c:	e0bffe17 	ldw	r2,-8(fp)
  802120:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
  802124:	e0bffb17 	ldw	r2,-20(fp)
  802128:	10800017 	ldw	r2,0(r2)
  80212c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  802130:	e0bffc17 	ldw	r2,-16(fp)
  802134:	10800204 	addi	r2,r2,8
  802138:	10800037 	ldwio	r2,0(r2)
  80213c:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  802140:	e0bffc17 	ldw	r2,-16(fp)
  802144:	10800204 	addi	r2,r2,8
  802148:	0007883a 	mov	r3,zero
  80214c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  802150:	e0bffc17 	ldw	r2,-16(fp)
  802154:	10800204 	addi	r2,r2,8
  802158:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80215c:	e0bffd17 	ldw	r2,-12(fp)
  802160:	1080200c 	andi	r2,r2,128
  802164:	10000326 	beq	r2,zero,802174 <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
  802168:	e13ffb17 	ldw	r4,-20(fp)
  80216c:	e17ffd17 	ldw	r5,-12(fp)
  802170:	08021a00 	call	8021a0 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  802174:	e0bffd17 	ldw	r2,-12(fp)
  802178:	1081100c 	andi	r2,r2,1088
  80217c:	10000326 	beq	r2,zero,80218c <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  802180:	e13ffb17 	ldw	r4,-20(fp)
  802184:	e17ffd17 	ldw	r5,-12(fp)
  802188:	08022800 	call	802280 <altera_avalon_uart_txirq>
  }
  

}
  80218c:	e037883a 	mov	sp,fp
  802190:	dfc00117 	ldw	ra,4(sp)
  802194:	df000017 	ldw	fp,0(sp)
  802198:	dec00204 	addi	sp,sp,8
  80219c:	f800283a 	ret

008021a0 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8021a0:	defffc04 	addi	sp,sp,-16
  8021a4:	df000315 	stw	fp,12(sp)
  8021a8:	df000304 	addi	fp,sp,12
  8021ac:	e13ffe15 	stw	r4,-8(fp)
  8021b0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8021b4:	e0bfff17 	ldw	r2,-4(fp)
  8021b8:	108000cc 	andi	r2,r2,3
  8021bc:	10000126 	beq	r2,zero,8021c4 <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  8021c0:	00002b06 	br	802270 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8021c4:	e0bffe17 	ldw	r2,-8(fp)
  8021c8:	10800317 	ldw	r2,12(r2)
  8021cc:	e0bffe17 	ldw	r2,-8(fp)
  8021d0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8021d4:	e0bffe17 	ldw	r2,-8(fp)
  8021d8:	10800317 	ldw	r2,12(r2)
  8021dc:	10800044 	addi	r2,r2,1
  8021e0:	10800fcc 	andi	r2,r2,63
  8021e4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8021e8:	e0bffe17 	ldw	r2,-8(fp)
  8021ec:	10800317 	ldw	r2,12(r2)
  8021f0:	e0fffe17 	ldw	r3,-8(fp)
  8021f4:	18c00017 	ldw	r3,0(r3)
  8021f8:	18c00037 	ldwio	r3,0(r3)
  8021fc:	1809883a 	mov	r4,r3
  802200:	e0fffe17 	ldw	r3,-8(fp)
  802204:	1885883a 	add	r2,r3,r2
  802208:	10800704 	addi	r2,r2,28
  80220c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  802210:	e0bffe17 	ldw	r2,-8(fp)
  802214:	e0fffd17 	ldw	r3,-12(fp)
  802218:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80221c:	e0bffe17 	ldw	r2,-8(fp)
  802220:	10800317 	ldw	r2,12(r2)
  802224:	10800044 	addi	r2,r2,1
  802228:	10800fcc 	andi	r2,r2,63
  80222c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  802230:	e0bffe17 	ldw	r2,-8(fp)
  802234:	10c00217 	ldw	r3,8(r2)
  802238:	e0bffd17 	ldw	r2,-12(fp)
  80223c:	18800c1e 	bne	r3,r2,802270 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  802240:	e0bffe17 	ldw	r2,-8(fp)
  802244:	10c00117 	ldw	r3,4(r2)
  802248:	00bfdfc4 	movi	r2,-129
  80224c:	1886703a 	and	r3,r3,r2
  802250:	e0bffe17 	ldw	r2,-8(fp)
  802254:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  802258:	e0bffe17 	ldw	r2,-8(fp)
  80225c:	10800017 	ldw	r2,0(r2)
  802260:	10800304 	addi	r2,r2,12
  802264:	e0fffe17 	ldw	r3,-8(fp)
  802268:	18c00117 	ldw	r3,4(r3)
  80226c:	10c00035 	stwio	r3,0(r2)
  }   
}
  802270:	e037883a 	mov	sp,fp
  802274:	df000017 	ldw	fp,0(sp)
  802278:	dec00104 	addi	sp,sp,4
  80227c:	f800283a 	ret

00802280 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  802280:	defffb04 	addi	sp,sp,-20
  802284:	df000415 	stw	fp,16(sp)
  802288:	df000404 	addi	fp,sp,16
  80228c:	e13ffc15 	stw	r4,-16(fp)
  802290:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  802294:	e0bffc17 	ldw	r2,-16(fp)
  802298:	10c00417 	ldw	r3,16(r2)
  80229c:	e0bffc17 	ldw	r2,-16(fp)
  8022a0:	10800517 	ldw	r2,20(r2)
  8022a4:	18803226 	beq	r3,r2,802370 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8022a8:	e0bffc17 	ldw	r2,-16(fp)
  8022ac:	10800617 	ldw	r2,24(r2)
  8022b0:	1080008c 	andi	r2,r2,2
  8022b4:	10000326 	beq	r2,zero,8022c4 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8022b8:	e0bffd17 	ldw	r2,-12(fp)
  8022bc:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8022c0:	10001d26 	beq	r2,zero,802338 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8022c4:	e0bffc17 	ldw	r2,-16(fp)
  8022c8:	10800417 	ldw	r2,16(r2)
  8022cc:	e0bffc17 	ldw	r2,-16(fp)
  8022d0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  8022d4:	e0bffc17 	ldw	r2,-16(fp)
  8022d8:	10800017 	ldw	r2,0(r2)
  8022dc:	10800104 	addi	r2,r2,4
  8022e0:	e0fffc17 	ldw	r3,-16(fp)
  8022e4:	18c00417 	ldw	r3,16(r3)
  8022e8:	e13ffc17 	ldw	r4,-16(fp)
  8022ec:	20c7883a 	add	r3,r4,r3
  8022f0:	18c01704 	addi	r3,r3,92
  8022f4:	18c00003 	ldbu	r3,0(r3)
  8022f8:	18c03fcc 	andi	r3,r3,255
  8022fc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  802300:	e0bffc17 	ldw	r2,-16(fp)
  802304:	10800417 	ldw	r2,16(r2)
  802308:	10800044 	addi	r2,r2,1
  80230c:	e0fffc17 	ldw	r3,-16(fp)
  802310:	18800415 	stw	r2,16(r3)
  802314:	10c00fcc 	andi	r3,r2,63
  802318:	e0bffc17 	ldw	r2,-16(fp)
  80231c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  802320:	e0bffc17 	ldw	r2,-16(fp)
  802324:	10800117 	ldw	r2,4(r2)
  802328:	10c01014 	ori	r3,r2,64
  80232c:	e0bffc17 	ldw	r2,-16(fp)
  802330:	10c00115 	stw	r3,4(r2)
  802334:	00000e06 	br	802370 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  802338:	e0bffc17 	ldw	r2,-16(fp)
  80233c:	10800017 	ldw	r2,0(r2)
  802340:	10800204 	addi	r2,r2,8
  802344:	10800037 	ldwio	r2,0(r2)
  802348:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80234c:	e0bffd17 	ldw	r2,-12(fp)
  802350:	1082000c 	andi	r2,r2,2048
  802354:	1000061e 	bne	r2,zero,802370 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  802358:	e0bffc17 	ldw	r2,-16(fp)
  80235c:	10c00117 	ldw	r3,4(r2)
  802360:	00bfefc4 	movi	r2,-65
  802364:	1886703a 	and	r3,r3,r2
  802368:	e0bffc17 	ldw	r2,-16(fp)
  80236c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  802370:	e0bffc17 	ldw	r2,-16(fp)
  802374:	10c00417 	ldw	r3,16(r2)
  802378:	e0bffc17 	ldw	r2,-16(fp)
  80237c:	10800517 	ldw	r2,20(r2)
  802380:	1880061e 	bne	r3,r2,80239c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  802384:	e0bffc17 	ldw	r2,-16(fp)
  802388:	10c00117 	ldw	r3,4(r2)
  80238c:	00beefc4 	movi	r2,-1089
  802390:	1886703a 	and	r3,r3,r2
  802394:	e0bffc17 	ldw	r2,-16(fp)
  802398:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80239c:	e0bffc17 	ldw	r2,-16(fp)
  8023a0:	10800017 	ldw	r2,0(r2)
  8023a4:	10800304 	addi	r2,r2,12
  8023a8:	e0fffc17 	ldw	r3,-16(fp)
  8023ac:	18c00117 	ldw	r3,4(r3)
  8023b0:	10c00035 	stwio	r3,0(r2)
}
  8023b4:	e037883a 	mov	sp,fp
  8023b8:	df000017 	ldw	fp,0(sp)
  8023bc:	dec00104 	addi	sp,sp,4
  8023c0:	f800283a 	ret

008023c4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8023c4:	defffd04 	addi	sp,sp,-12
  8023c8:	df000215 	stw	fp,8(sp)
  8023cc:	df000204 	addi	fp,sp,8
  8023d0:	e13ffe15 	stw	r4,-8(fp)
  8023d4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8023d8:	00000506 	br	8023f0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8023dc:	e0bfff17 	ldw	r2,-4(fp)
  8023e0:	1090000c 	andi	r2,r2,16384
  8023e4:	10000226 	beq	r2,zero,8023f0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8023e8:	00bffd44 	movi	r2,-11
  8023ec:	00000606 	br	802408 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8023f0:	e0bffe17 	ldw	r2,-8(fp)
  8023f4:	10c00417 	ldw	r3,16(r2)
  8023f8:	e0bffe17 	ldw	r2,-8(fp)
  8023fc:	10800517 	ldw	r2,20(r2)
  802400:	18bff61e 	bne	r3,r2,8023dc <__alt_data_end+0xff8023dc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  802404:	0005883a 	mov	r2,zero
}
  802408:	e037883a 	mov	sp,fp
  80240c:	df000017 	ldw	fp,0(sp)
  802410:	dec00104 	addi	sp,sp,4
  802414:	f800283a 	ret

00802418 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802418:	defffe04 	addi	sp,sp,-8
  80241c:	dfc00115 	stw	ra,4(sp)
  802420:	df000015 	stw	fp,0(sp)
  802424:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802428:	00802034 	movhi	r2,128
  80242c:	10972e04 	addi	r2,r2,23736
  802430:	10800017 	ldw	r2,0(r2)
  802434:	10000526 	beq	r2,zero,80244c <alt_get_errno+0x34>
  802438:	00802034 	movhi	r2,128
  80243c:	10972e04 	addi	r2,r2,23736
  802440:	10800017 	ldw	r2,0(r2)
  802444:	103ee83a 	callr	r2
  802448:	00000206 	br	802454 <alt_get_errno+0x3c>
  80244c:	00802034 	movhi	r2,128
  802450:	109d6504 	addi	r2,r2,30100
}
  802454:	e037883a 	mov	sp,fp
  802458:	dfc00117 	ldw	ra,4(sp)
  80245c:	df000017 	ldw	fp,0(sp)
  802460:	dec00204 	addi	sp,sp,8
  802464:	f800283a 	ret

00802468 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  802468:	defff204 	addi	sp,sp,-56
  80246c:	dfc00d15 	stw	ra,52(sp)
  802470:	df000c15 	stw	fp,48(sp)
  802474:	df000c04 	addi	fp,sp,48
  802478:	e13ffc15 	stw	r4,-16(fp)
  80247c:	e17ffd15 	stw	r5,-12(fp)
  802480:	e1bffe15 	stw	r6,-8(fp)
  802484:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  802488:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  80248c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  802490:	e0bfff17 	ldw	r2,-4(fp)
  802494:	1090000c 	andi	r2,r2,16384
  802498:	1005003a 	cmpeq	r2,r2,zero
  80249c:	10803fcc 	andi	r2,r2,255
  8024a0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8024a4:	00001306 	br	8024f4 <altera_avalon_uart_read+0x8c>
    {
      count++;
  8024a8:	e0bff517 	ldw	r2,-44(fp)
  8024ac:	10800044 	addi	r2,r2,1
  8024b0:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8024b4:	e0bffd17 	ldw	r2,-12(fp)
  8024b8:	10c00044 	addi	r3,r2,1
  8024bc:	e0fffd15 	stw	r3,-12(fp)
  8024c0:	e0fffc17 	ldw	r3,-16(fp)
  8024c4:	18c00217 	ldw	r3,8(r3)
  8024c8:	e13ffc17 	ldw	r4,-16(fp)
  8024cc:	20c7883a 	add	r3,r4,r3
  8024d0:	18c00704 	addi	r3,r3,28
  8024d4:	18c00003 	ldbu	r3,0(r3)
  8024d8:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  8024dc:	e0bffc17 	ldw	r2,-16(fp)
  8024e0:	10800217 	ldw	r2,8(r2)
  8024e4:	10800044 	addi	r2,r2,1
  8024e8:	10c00fcc 	andi	r3,r2,63
  8024ec:	e0bffc17 	ldw	r2,-16(fp)
  8024f0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8024f4:	e0fff517 	ldw	r3,-44(fp)
  8024f8:	e0bffe17 	ldw	r2,-8(fp)
  8024fc:	1880050e 	bge	r3,r2,802514 <altera_avalon_uart_read+0xac>
  802500:	e0bffc17 	ldw	r2,-16(fp)
  802504:	10c00217 	ldw	r3,8(r2)
  802508:	e0bffc17 	ldw	r2,-16(fp)
  80250c:	10800317 	ldw	r2,12(r2)
  802510:	18bfe51e 	bne	r3,r2,8024a8 <__alt_data_end+0xff8024a8>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  802514:	e0bff517 	ldw	r2,-44(fp)
  802518:	1000251e 	bne	r2,zero,8025b0 <altera_avalon_uart_read+0x148>
  80251c:	e0bffc17 	ldw	r2,-16(fp)
  802520:	10c00217 	ldw	r3,8(r2)
  802524:	e0bffc17 	ldw	r2,-16(fp)
  802528:	10800317 	ldw	r2,12(r2)
  80252c:	1880201e 	bne	r3,r2,8025b0 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  802530:	e0bff617 	ldw	r2,-40(fp)
  802534:	1000071e 	bne	r2,zero,802554 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  802538:	08024180 	call	802418 <alt_get_errno>
  80253c:	1007883a 	mov	r3,r2
  802540:	008002c4 	movi	r2,11
  802544:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  802548:	00800044 	movi	r2,1
  80254c:	e0bff405 	stb	r2,-48(fp)
        break;
  802550:	00001b06 	br	8025c0 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802554:	0005303a 	rdctl	r2,status
  802558:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80255c:	e0fff817 	ldw	r3,-32(fp)
  802560:	00bfff84 	movi	r2,-2
  802564:	1884703a 	and	r2,r3,r2
  802568:	1001703a 	wrctl	status,r2
  
  return context;
  80256c:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  802570:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  802574:	e0bffc17 	ldw	r2,-16(fp)
  802578:	10800117 	ldw	r2,4(r2)
  80257c:	10c02014 	ori	r3,r2,128
  802580:	e0bffc17 	ldw	r2,-16(fp)
  802584:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802588:	e0bffc17 	ldw	r2,-16(fp)
  80258c:	10800017 	ldw	r2,0(r2)
  802590:	10800304 	addi	r2,r2,12
  802594:	e0fffc17 	ldw	r3,-16(fp)
  802598:	18c00117 	ldw	r3,4(r3)
  80259c:	10c00035 	stwio	r3,0(r2)
  8025a0:	e0bff717 	ldw	r2,-36(fp)
  8025a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8025a8:	e0bff917 	ldw	r2,-28(fp)
  8025ac:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  8025b0:	e0bff517 	ldw	r2,-44(fp)
  8025b4:	1000021e 	bne	r2,zero,8025c0 <altera_avalon_uart_read+0x158>
  8025b8:	e0bffe17 	ldw	r2,-8(fp)
  8025bc:	103fb91e 	bne	r2,zero,8024a4 <__alt_data_end+0xff8024a4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8025c0:	0005303a 	rdctl	r2,status
  8025c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8025c8:	e0fffa17 	ldw	r3,-24(fp)
  8025cc:	00bfff84 	movi	r2,-2
  8025d0:	1884703a 	and	r2,r3,r2
  8025d4:	1001703a 	wrctl	status,r2
  
  return context;
  8025d8:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  8025dc:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8025e0:	e0bffc17 	ldw	r2,-16(fp)
  8025e4:	10800117 	ldw	r2,4(r2)
  8025e8:	10c02014 	ori	r3,r2,128
  8025ec:	e0bffc17 	ldw	r2,-16(fp)
  8025f0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8025f4:	e0bffc17 	ldw	r2,-16(fp)
  8025f8:	10800017 	ldw	r2,0(r2)
  8025fc:	10800304 	addi	r2,r2,12
  802600:	e0fffc17 	ldw	r3,-16(fp)
  802604:	18c00117 	ldw	r3,4(r3)
  802608:	10c00035 	stwio	r3,0(r2)
  80260c:	e0bff717 	ldw	r2,-36(fp)
  802610:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802614:	e0bffb17 	ldw	r2,-20(fp)
  802618:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80261c:	e0bff403 	ldbu	r2,-48(fp)
  802620:	10000226 	beq	r2,zero,80262c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  802624:	00bffd44 	movi	r2,-11
  802628:	00000106 	br	802630 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  80262c:	e0bff517 	ldw	r2,-44(fp)
  }
}
  802630:	e037883a 	mov	sp,fp
  802634:	dfc00117 	ldw	ra,4(sp)
  802638:	df000017 	ldw	fp,0(sp)
  80263c:	dec00204 	addi	sp,sp,8
  802640:	f800283a 	ret

00802644 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802644:	defffe04 	addi	sp,sp,-8
  802648:	dfc00115 	stw	ra,4(sp)
  80264c:	df000015 	stw	fp,0(sp)
  802650:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802654:	00802034 	movhi	r2,128
  802658:	10972e04 	addi	r2,r2,23736
  80265c:	10800017 	ldw	r2,0(r2)
  802660:	10000526 	beq	r2,zero,802678 <alt_get_errno+0x34>
  802664:	00802034 	movhi	r2,128
  802668:	10972e04 	addi	r2,r2,23736
  80266c:	10800017 	ldw	r2,0(r2)
  802670:	103ee83a 	callr	r2
  802674:	00000206 	br	802680 <alt_get_errno+0x3c>
  802678:	00802034 	movhi	r2,128
  80267c:	109d6504 	addi	r2,r2,30100
}
  802680:	e037883a 	mov	sp,fp
  802684:	dfc00117 	ldw	ra,4(sp)
  802688:	df000017 	ldw	fp,0(sp)
  80268c:	dec00204 	addi	sp,sp,8
  802690:	f800283a 	ret

00802694 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  802694:	defff204 	addi	sp,sp,-56
  802698:	dfc00d15 	stw	ra,52(sp)
  80269c:	df000c15 	stw	fp,48(sp)
  8026a0:	df000c04 	addi	fp,sp,48
  8026a4:	e13ffc15 	stw	r4,-16(fp)
  8026a8:	e17ffd15 	stw	r5,-12(fp)
  8026ac:	e1bffe15 	stw	r6,-8(fp)
  8026b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  8026b4:	e0bffe17 	ldw	r2,-8(fp)
  8026b8:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  8026bc:	e0bfff17 	ldw	r2,-4(fp)
  8026c0:	1090000c 	andi	r2,r2,16384
  8026c4:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8026c8:	00003c06 	br	8027bc <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8026cc:	e0bffc17 	ldw	r2,-16(fp)
  8026d0:	10800517 	ldw	r2,20(r2)
  8026d4:	10800044 	addi	r2,r2,1
  8026d8:	10800fcc 	andi	r2,r2,63
  8026dc:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  8026e0:	e0bffc17 	ldw	r2,-16(fp)
  8026e4:	10c00417 	ldw	r3,16(r2)
  8026e8:	e0bff617 	ldw	r2,-40(fp)
  8026ec:	1880221e 	bne	r3,r2,802778 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  8026f0:	e0bff517 	ldw	r2,-44(fp)
  8026f4:	10000526 	beq	r2,zero,80270c <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  8026f8:	08026440 	call	802644 <alt_get_errno>
  8026fc:	1007883a 	mov	r3,r2
  802700:	008002c4 	movi	r2,11
  802704:	18800015 	stw	r2,0(r3)
        break;
  802708:	00002e06 	br	8027c4 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80270c:	0005303a 	rdctl	r2,status
  802710:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802714:	e0fff817 	ldw	r3,-32(fp)
  802718:	00bfff84 	movi	r2,-2
  80271c:	1884703a 	and	r2,r3,r2
  802720:	1001703a 	wrctl	status,r2
  
  return context;
  802724:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  802728:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80272c:	e0bffc17 	ldw	r2,-16(fp)
  802730:	10800117 	ldw	r2,4(r2)
  802734:	10c11014 	ori	r3,r2,1088
  802738:	e0bffc17 	ldw	r2,-16(fp)
  80273c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  802740:	e0bffc17 	ldw	r2,-16(fp)
  802744:	10800017 	ldw	r2,0(r2)
  802748:	10800304 	addi	r2,r2,12
  80274c:	e0fffc17 	ldw	r3,-16(fp)
  802750:	18c00117 	ldw	r3,4(r3)
  802754:	10c00035 	stwio	r3,0(r2)
  802758:	e0bff717 	ldw	r2,-36(fp)
  80275c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802760:	e0bff917 	ldw	r2,-28(fp)
  802764:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  802768:	e0bffc17 	ldw	r2,-16(fp)
  80276c:	10c00417 	ldw	r3,16(r2)
  802770:	e0bff617 	ldw	r2,-40(fp)
  802774:	18bffc26 	beq	r3,r2,802768 <__alt_data_end+0xff802768>
      }
    }

    count--;
  802778:	e0bff417 	ldw	r2,-48(fp)
  80277c:	10bfffc4 	addi	r2,r2,-1
  802780:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  802784:	e0bffc17 	ldw	r2,-16(fp)
  802788:	10c00517 	ldw	r3,20(r2)
  80278c:	e0bffd17 	ldw	r2,-12(fp)
  802790:	11000044 	addi	r4,r2,1
  802794:	e13ffd15 	stw	r4,-12(fp)
  802798:	10800003 	ldbu	r2,0(r2)
  80279c:	1009883a 	mov	r4,r2
  8027a0:	e0bffc17 	ldw	r2,-16(fp)
  8027a4:	10c5883a 	add	r2,r2,r3
  8027a8:	10801704 	addi	r2,r2,92
  8027ac:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  8027b0:	e0bffc17 	ldw	r2,-16(fp)
  8027b4:	e0fff617 	ldw	r3,-40(fp)
  8027b8:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8027bc:	e0bff417 	ldw	r2,-48(fp)
  8027c0:	103fc21e 	bne	r2,zero,8026cc <__alt_data_end+0xff8026cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8027c4:	0005303a 	rdctl	r2,status
  8027c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8027cc:	e0fffa17 	ldw	r3,-24(fp)
  8027d0:	00bfff84 	movi	r2,-2
  8027d4:	1884703a 	and	r2,r3,r2
  8027d8:	1001703a 	wrctl	status,r2
  
  return context;
  8027dc:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  8027e0:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8027e4:	e0bffc17 	ldw	r2,-16(fp)
  8027e8:	10800117 	ldw	r2,4(r2)
  8027ec:	10c11014 	ori	r3,r2,1088
  8027f0:	e0bffc17 	ldw	r2,-16(fp)
  8027f4:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8027f8:	e0bffc17 	ldw	r2,-16(fp)
  8027fc:	10800017 	ldw	r2,0(r2)
  802800:	10800304 	addi	r2,r2,12
  802804:	e0fffc17 	ldw	r3,-16(fp)
  802808:	18c00117 	ldw	r3,4(r3)
  80280c:	10c00035 	stwio	r3,0(r2)
  802810:	e0bff717 	ldw	r2,-36(fp)
  802814:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802818:	e0bffb17 	ldw	r2,-20(fp)
  80281c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  802820:	e0fffe17 	ldw	r3,-8(fp)
  802824:	e0bff417 	ldw	r2,-48(fp)
  802828:	1885c83a 	sub	r2,r3,r2
}
  80282c:	e037883a 	mov	sp,fp
  802830:	dfc00117 	ldw	ra,4(sp)
  802834:	df000017 	ldw	fp,0(sp)
  802838:	dec00204 	addi	sp,sp,8
  80283c:	f800283a 	ret

00802840 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  802840:	defff504 	addi	sp,sp,-44
  802844:	df000a15 	stw	fp,40(sp)
  802848:	df000a04 	addi	fp,sp,40
  80284c:	e13ffc15 	stw	r4,-16(fp)
  802850:	e17ffd15 	stw	r5,-12(fp)
  802854:	e1bffe15 	stw	r6,-8(fp)
  802858:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80285c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  802860:	00802034 	movhi	r2,128
  802864:	109d6204 	addi	r2,r2,30088
  802868:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  80286c:	10003f26 	beq	r2,zero,80296c <alt_alarm_start+0x12c>
  {
    if (alarm)
  802870:	e0bffc17 	ldw	r2,-16(fp)
  802874:	10003b26 	beq	r2,zero,802964 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
  802878:	e0bffc17 	ldw	r2,-16(fp)
  80287c:	e0fffe17 	ldw	r3,-8(fp)
  802880:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  802884:	e0bffc17 	ldw	r2,-16(fp)
  802888:	e0ffff17 	ldw	r3,-4(fp)
  80288c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802890:	0005303a 	rdctl	r2,status
  802894:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802898:	e0fff817 	ldw	r3,-32(fp)
  80289c:	00bfff84 	movi	r2,-2
  8028a0:	1884703a 	and	r2,r3,r2
  8028a4:	1001703a 	wrctl	status,r2
  
  return context;
  8028a8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  8028ac:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8028b0:	00802034 	movhi	r2,128
  8028b4:	109d6304 	addi	r2,r2,30092
  8028b8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  8028bc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  8028c0:	e0fffd17 	ldw	r3,-12(fp)
  8028c4:	e0bff617 	ldw	r2,-40(fp)
  8028c8:	1885883a 	add	r2,r3,r2
  8028cc:	10c00044 	addi	r3,r2,1
  8028d0:	e0bffc17 	ldw	r2,-16(fp)
  8028d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8028d8:	e0bffc17 	ldw	r2,-16(fp)
  8028dc:	10c00217 	ldw	r3,8(r2)
  8028e0:	e0bff617 	ldw	r2,-40(fp)
  8028e4:	1880042e 	bgeu	r3,r2,8028f8 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
  8028e8:	e0bffc17 	ldw	r2,-16(fp)
  8028ec:	00c00044 	movi	r3,1
  8028f0:	10c00405 	stb	r3,16(r2)
  8028f4:	00000206 	br	802900 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
  8028f8:	e0bffc17 	ldw	r2,-16(fp)
  8028fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  802900:	e0fffc17 	ldw	r3,-16(fp)
  802904:	00802034 	movhi	r2,128
  802908:	10973004 	addi	r2,r2,23744
  80290c:	e0bff915 	stw	r2,-28(fp)
  802910:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  802914:	e0bffa17 	ldw	r2,-24(fp)
  802918:	e0fff917 	ldw	r3,-28(fp)
  80291c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  802920:	e0bff917 	ldw	r2,-28(fp)
  802924:	10c00017 	ldw	r3,0(r2)
  802928:	e0bffa17 	ldw	r2,-24(fp)
  80292c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  802930:	e0bff917 	ldw	r2,-28(fp)
  802934:	10800017 	ldw	r2,0(r2)
  802938:	e0fffa17 	ldw	r3,-24(fp)
  80293c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  802940:	e0bff917 	ldw	r2,-28(fp)
  802944:	e0fffa17 	ldw	r3,-24(fp)
  802948:	10c00015 	stw	r3,0(r2)
  80294c:	e0bff717 	ldw	r2,-36(fp)
  802950:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802954:	e0bffb17 	ldw	r2,-20(fp)
  802958:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80295c:	0005883a 	mov	r2,zero
  802960:	00000306 	br	802970 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
  802964:	00bffa84 	movi	r2,-22
  802968:	00000106 	br	802970 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
  80296c:	00bfde84 	movi	r2,-134
  }
}
  802970:	e037883a 	mov	sp,fp
  802974:	df000017 	ldw	fp,0(sp)
  802978:	dec00104 	addi	sp,sp,4
  80297c:	f800283a 	ret

00802980 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802980:	defffe04 	addi	sp,sp,-8
  802984:	dfc00115 	stw	ra,4(sp)
  802988:	df000015 	stw	fp,0(sp)
  80298c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802990:	00802034 	movhi	r2,128
  802994:	10972e04 	addi	r2,r2,23736
  802998:	10800017 	ldw	r2,0(r2)
  80299c:	10000526 	beq	r2,zero,8029b4 <alt_get_errno+0x34>
  8029a0:	00802034 	movhi	r2,128
  8029a4:	10972e04 	addi	r2,r2,23736
  8029a8:	10800017 	ldw	r2,0(r2)
  8029ac:	103ee83a 	callr	r2
  8029b0:	00000206 	br	8029bc <alt_get_errno+0x3c>
  8029b4:	00802034 	movhi	r2,128
  8029b8:	109d6504 	addi	r2,r2,30100
}
  8029bc:	e037883a 	mov	sp,fp
  8029c0:	dfc00117 	ldw	ra,4(sp)
  8029c4:	df000017 	ldw	fp,0(sp)
  8029c8:	dec00204 	addi	sp,sp,8
  8029cc:	f800283a 	ret

008029d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  8029d0:	defffb04 	addi	sp,sp,-20
  8029d4:	dfc00415 	stw	ra,16(sp)
  8029d8:	df000315 	stw	fp,12(sp)
  8029dc:	df000304 	addi	fp,sp,12
  8029e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  8029e4:	e0bfff17 	ldw	r2,-4(fp)
  8029e8:	10000616 	blt	r2,zero,802a04 <close+0x34>
  8029ec:	e0bfff17 	ldw	r2,-4(fp)
  8029f0:	10c00324 	muli	r3,r2,12
  8029f4:	00802034 	movhi	r2,128
  8029f8:	1095bf04 	addi	r2,r2,22268
  8029fc:	1885883a 	add	r2,r3,r2
  802a00:	00000106 	br	802a08 <close+0x38>
  802a04:	0005883a 	mov	r2,zero
  802a08:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  802a0c:	e0bffd17 	ldw	r2,-12(fp)
  802a10:	10001926 	beq	r2,zero,802a78 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  802a14:	e0bffd17 	ldw	r2,-12(fp)
  802a18:	10800017 	ldw	r2,0(r2)
  802a1c:	10800417 	ldw	r2,16(r2)
  802a20:	10000626 	beq	r2,zero,802a3c <close+0x6c>
  802a24:	e0bffd17 	ldw	r2,-12(fp)
  802a28:	10800017 	ldw	r2,0(r2)
  802a2c:	10800417 	ldw	r2,16(r2)
  802a30:	e13ffd17 	ldw	r4,-12(fp)
  802a34:	103ee83a 	callr	r2
  802a38:	00000106 	br	802a40 <close+0x70>
  802a3c:	0005883a 	mov	r2,zero
  802a40:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  802a44:	e13fff17 	ldw	r4,-4(fp)
  802a48:	08032480 	call	803248 <alt_release_fd>
    if (rval < 0)
  802a4c:	e0bffe17 	ldw	r2,-8(fp)
  802a50:	1000070e 	bge	r2,zero,802a70 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  802a54:	08029800 	call	802980 <alt_get_errno>
  802a58:	1007883a 	mov	r3,r2
  802a5c:	e0bffe17 	ldw	r2,-8(fp)
  802a60:	0085c83a 	sub	r2,zero,r2
  802a64:	18800015 	stw	r2,0(r3)
      return -1;
  802a68:	00bfffc4 	movi	r2,-1
  802a6c:	00000706 	br	802a8c <close+0xbc>
    }
    return 0;
  802a70:	0005883a 	mov	r2,zero
  802a74:	00000506 	br	802a8c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  802a78:	08029800 	call	802980 <alt_get_errno>
  802a7c:	1007883a 	mov	r3,r2
  802a80:	00801444 	movi	r2,81
  802a84:	18800015 	stw	r2,0(r3)
    return -1;
  802a88:	00bfffc4 	movi	r2,-1
  }
}
  802a8c:	e037883a 	mov	sp,fp
  802a90:	dfc00117 	ldw	ra,4(sp)
  802a94:	df000017 	ldw	fp,0(sp)
  802a98:	dec00204 	addi	sp,sp,8
  802a9c:	f800283a 	ret

00802aa0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  802aa0:	defffe04 	addi	sp,sp,-8
  802aa4:	df000115 	stw	fp,4(sp)
  802aa8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  802aac:	e03fff15 	stw	zero,-4(fp)
  802ab0:	00000506 	br	802ac8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  802ab4:	e0bfff17 	ldw	r2,-4(fp)
  802ab8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  802abc:	e0bfff17 	ldw	r2,-4(fp)
  802ac0:	10800804 	addi	r2,r2,32
  802ac4:	e0bfff15 	stw	r2,-4(fp)
  802ac8:	e0bfff17 	ldw	r2,-4(fp)
  802acc:	10820030 	cmpltui	r2,r2,2048
  802ad0:	103ff81e 	bne	r2,zero,802ab4 <__alt_data_end+0xff802ab4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  802ad4:	e037883a 	mov	sp,fp
  802ad8:	df000017 	ldw	fp,0(sp)
  802adc:	dec00104 	addi	sp,sp,4
  802ae0:	f800283a 	ret

00802ae4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  802ae4:	defffc04 	addi	sp,sp,-16
  802ae8:	df000315 	stw	fp,12(sp)
  802aec:	df000304 	addi	fp,sp,12
  802af0:	e13ffd15 	stw	r4,-12(fp)
  802af4:	e17ffe15 	stw	r5,-8(fp)
  802af8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  802afc:	e0bfff17 	ldw	r2,-4(fp)
}
  802b00:	e037883a 	mov	sp,fp
  802b04:	df000017 	ldw	fp,0(sp)
  802b08:	dec00104 	addi	sp,sp,4
  802b0c:	f800283a 	ret

00802b10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802b10:	defffe04 	addi	sp,sp,-8
  802b14:	dfc00115 	stw	ra,4(sp)
  802b18:	df000015 	stw	fp,0(sp)
  802b1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802b20:	00802034 	movhi	r2,128
  802b24:	10972e04 	addi	r2,r2,23736
  802b28:	10800017 	ldw	r2,0(r2)
  802b2c:	10000526 	beq	r2,zero,802b44 <alt_get_errno+0x34>
  802b30:	00802034 	movhi	r2,128
  802b34:	10972e04 	addi	r2,r2,23736
  802b38:	10800017 	ldw	r2,0(r2)
  802b3c:	103ee83a 	callr	r2
  802b40:	00000206 	br	802b4c <alt_get_errno+0x3c>
  802b44:	00802034 	movhi	r2,128
  802b48:	109d6504 	addi	r2,r2,30100
}
  802b4c:	e037883a 	mov	sp,fp
  802b50:	dfc00117 	ldw	ra,4(sp)
  802b54:	df000017 	ldw	fp,0(sp)
  802b58:	dec00204 	addi	sp,sp,8
  802b5c:	f800283a 	ret

00802b60 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  802b60:	defffa04 	addi	sp,sp,-24
  802b64:	dfc00515 	stw	ra,20(sp)
  802b68:	df000415 	stw	fp,16(sp)
  802b6c:	df000404 	addi	fp,sp,16
  802b70:	e13ffe15 	stw	r4,-8(fp)
  802b74:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  802b78:	e0bffe17 	ldw	r2,-8(fp)
  802b7c:	10000326 	beq	r2,zero,802b8c <alt_dev_llist_insert+0x2c>
  802b80:	e0bffe17 	ldw	r2,-8(fp)
  802b84:	10800217 	ldw	r2,8(r2)
  802b88:	1000061e 	bne	r2,zero,802ba4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  802b8c:	0802b100 	call	802b10 <alt_get_errno>
  802b90:	1007883a 	mov	r3,r2
  802b94:	00800584 	movi	r2,22
  802b98:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  802b9c:	00bffa84 	movi	r2,-22
  802ba0:	00001306 	br	802bf0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  802ba4:	e0bffe17 	ldw	r2,-8(fp)
  802ba8:	e0ffff17 	ldw	r3,-4(fp)
  802bac:	e0fffc15 	stw	r3,-16(fp)
  802bb0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  802bb4:	e0bffd17 	ldw	r2,-12(fp)
  802bb8:	e0fffc17 	ldw	r3,-16(fp)
  802bbc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  802bc0:	e0bffc17 	ldw	r2,-16(fp)
  802bc4:	10c00017 	ldw	r3,0(r2)
  802bc8:	e0bffd17 	ldw	r2,-12(fp)
  802bcc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  802bd0:	e0bffc17 	ldw	r2,-16(fp)
  802bd4:	10800017 	ldw	r2,0(r2)
  802bd8:	e0fffd17 	ldw	r3,-12(fp)
  802bdc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  802be0:	e0bffc17 	ldw	r2,-16(fp)
  802be4:	e0fffd17 	ldw	r3,-12(fp)
  802be8:	10c00015 	stw	r3,0(r2)

  return 0;  
  802bec:	0005883a 	mov	r2,zero
}
  802bf0:	e037883a 	mov	sp,fp
  802bf4:	dfc00117 	ldw	ra,4(sp)
  802bf8:	df000017 	ldw	fp,0(sp)
  802bfc:	dec00204 	addi	sp,sp,8
  802c00:	f800283a 	ret

00802c04 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  802c04:	defffd04 	addi	sp,sp,-12
  802c08:	dfc00215 	stw	ra,8(sp)
  802c0c:	df000115 	stw	fp,4(sp)
  802c10:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  802c14:	00802034 	movhi	r2,128
  802c18:	10904b04 	addi	r2,r2,16684
  802c1c:	e0bfff15 	stw	r2,-4(fp)
  802c20:	00000606 	br	802c3c <_do_ctors+0x38>
        (*ctor) (); 
  802c24:	e0bfff17 	ldw	r2,-4(fp)
  802c28:	10800017 	ldw	r2,0(r2)
  802c2c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  802c30:	e0bfff17 	ldw	r2,-4(fp)
  802c34:	10bfff04 	addi	r2,r2,-4
  802c38:	e0bfff15 	stw	r2,-4(fp)
  802c3c:	e0ffff17 	ldw	r3,-4(fp)
  802c40:	00802034 	movhi	r2,128
  802c44:	10904c04 	addi	r2,r2,16688
  802c48:	18bff62e 	bgeu	r3,r2,802c24 <__alt_data_end+0xff802c24>
        (*ctor) (); 
}
  802c4c:	e037883a 	mov	sp,fp
  802c50:	dfc00117 	ldw	ra,4(sp)
  802c54:	df000017 	ldw	fp,0(sp)
  802c58:	dec00204 	addi	sp,sp,8
  802c5c:	f800283a 	ret

00802c60 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  802c60:	defffd04 	addi	sp,sp,-12
  802c64:	dfc00215 	stw	ra,8(sp)
  802c68:	df000115 	stw	fp,4(sp)
  802c6c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  802c70:	00802034 	movhi	r2,128
  802c74:	10904b04 	addi	r2,r2,16684
  802c78:	e0bfff15 	stw	r2,-4(fp)
  802c7c:	00000606 	br	802c98 <_do_dtors+0x38>
        (*dtor) (); 
  802c80:	e0bfff17 	ldw	r2,-4(fp)
  802c84:	10800017 	ldw	r2,0(r2)
  802c88:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  802c8c:	e0bfff17 	ldw	r2,-4(fp)
  802c90:	10bfff04 	addi	r2,r2,-4
  802c94:	e0bfff15 	stw	r2,-4(fp)
  802c98:	e0ffff17 	ldw	r3,-4(fp)
  802c9c:	00802034 	movhi	r2,128
  802ca0:	10904c04 	addi	r2,r2,16688
  802ca4:	18bff62e 	bgeu	r3,r2,802c80 <__alt_data_end+0xff802c80>
        (*dtor) (); 
}
  802ca8:	e037883a 	mov	sp,fp
  802cac:	dfc00117 	ldw	ra,4(sp)
  802cb0:	df000017 	ldw	fp,0(sp)
  802cb4:	dec00204 	addi	sp,sp,8
  802cb8:	f800283a 	ret

00802cbc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  802cbc:	defffe04 	addi	sp,sp,-8
  802cc0:	dfc00115 	stw	ra,4(sp)
  802cc4:	df000015 	stw	fp,0(sp)
  802cc8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  802ccc:	0009883a 	mov	r4,zero
  802cd0:	01440004 	movi	r5,4096
  802cd4:	08038440 	call	803844 <alt_icache_flush>
#endif
}
  802cd8:	e037883a 	mov	sp,fp
  802cdc:	dfc00117 	ldw	ra,4(sp)
  802ce0:	df000017 	ldw	fp,0(sp)
  802ce4:	dec00204 	addi	sp,sp,8
  802ce8:	f800283a 	ret

00802cec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  802cec:	defff904 	addi	sp,sp,-28
  802cf0:	dfc00615 	stw	ra,24(sp)
  802cf4:	df000515 	stw	fp,20(sp)
  802cf8:	df000504 	addi	fp,sp,20
  802cfc:	e13ffc15 	stw	r4,-16(fp)
  802d00:	e17ffd15 	stw	r5,-12(fp)
  802d04:	e1bffe15 	stw	r6,-8(fp)
  802d08:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  802d0c:	e13ffd17 	ldw	r4,-12(fp)
  802d10:	e17ffe17 	ldw	r5,-8(fp)
  802d14:	e1bfff17 	ldw	r6,-4(fp)
  802d18:	08030f00 	call	8030f0 <open>
  802d1c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  802d20:	e0bffb17 	ldw	r2,-20(fp)
  802d24:	10001c16 	blt	r2,zero,802d98 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  802d28:	00802034 	movhi	r2,128
  802d2c:	1095bf04 	addi	r2,r2,22268
  802d30:	e0fffb17 	ldw	r3,-20(fp)
  802d34:	18c00324 	muli	r3,r3,12
  802d38:	10c5883a 	add	r2,r2,r3
  802d3c:	10c00017 	ldw	r3,0(r2)
  802d40:	e0bffc17 	ldw	r2,-16(fp)
  802d44:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  802d48:	00802034 	movhi	r2,128
  802d4c:	1095bf04 	addi	r2,r2,22268
  802d50:	e0fffb17 	ldw	r3,-20(fp)
  802d54:	18c00324 	muli	r3,r3,12
  802d58:	18c00104 	addi	r3,r3,4
  802d5c:	10c5883a 	add	r2,r2,r3
  802d60:	10c00017 	ldw	r3,0(r2)
  802d64:	e0bffc17 	ldw	r2,-16(fp)
  802d68:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  802d6c:	00802034 	movhi	r2,128
  802d70:	1095bf04 	addi	r2,r2,22268
  802d74:	e0fffb17 	ldw	r3,-20(fp)
  802d78:	18c00324 	muli	r3,r3,12
  802d7c:	18c00204 	addi	r3,r3,8
  802d80:	10c5883a 	add	r2,r2,r3
  802d84:	10c00017 	ldw	r3,0(r2)
  802d88:	e0bffc17 	ldw	r2,-16(fp)
  802d8c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  802d90:	e13ffb17 	ldw	r4,-20(fp)
  802d94:	08032480 	call	803248 <alt_release_fd>
  }
} 
  802d98:	e037883a 	mov	sp,fp
  802d9c:	dfc00117 	ldw	ra,4(sp)
  802da0:	df000017 	ldw	fp,0(sp)
  802da4:	dec00204 	addi	sp,sp,8
  802da8:	f800283a 	ret

00802dac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  802dac:	defffb04 	addi	sp,sp,-20
  802db0:	dfc00415 	stw	ra,16(sp)
  802db4:	df000315 	stw	fp,12(sp)
  802db8:	df000304 	addi	fp,sp,12
  802dbc:	e13ffd15 	stw	r4,-12(fp)
  802dc0:	e17ffe15 	stw	r5,-8(fp)
  802dc4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  802dc8:	01002034 	movhi	r4,128
  802dcc:	2115c204 	addi	r4,r4,22280
  802dd0:	e17ffd17 	ldw	r5,-12(fp)
  802dd4:	01800044 	movi	r6,1
  802dd8:	01c07fc4 	movi	r7,511
  802ddc:	0802cec0 	call	802cec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  802de0:	01002034 	movhi	r4,128
  802de4:	2115bf04 	addi	r4,r4,22268
  802de8:	e17ffe17 	ldw	r5,-8(fp)
  802dec:	000d883a 	mov	r6,zero
  802df0:	01c07fc4 	movi	r7,511
  802df4:	0802cec0 	call	802cec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  802df8:	01002034 	movhi	r4,128
  802dfc:	2115c504 	addi	r4,r4,22292
  802e00:	e17fff17 	ldw	r5,-4(fp)
  802e04:	01800044 	movi	r6,1
  802e08:	01c07fc4 	movi	r7,511
  802e0c:	0802cec0 	call	802cec <alt_open_fd>
}  
  802e10:	e037883a 	mov	sp,fp
  802e14:	dfc00117 	ldw	ra,4(sp)
  802e18:	df000017 	ldw	fp,0(sp)
  802e1c:	dec00204 	addi	sp,sp,8
  802e20:	f800283a 	ret

00802e24 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  802e24:	defff004 	addi	sp,sp,-64
  802e28:	df000f15 	stw	fp,60(sp)
  802e2c:	df000f04 	addi	fp,sp,60
  802e30:	e13ffd15 	stw	r4,-12(fp)
  802e34:	e17ffe15 	stw	r5,-8(fp)
  802e38:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  802e3c:	00bffa84 	movi	r2,-22
  802e40:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  802e44:	e0bffd17 	ldw	r2,-12(fp)
  802e48:	10800828 	cmpgeui	r2,r2,32
  802e4c:	10005c1e 	bne	r2,zero,802fc0 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802e50:	0005303a 	rdctl	r2,status
  802e54:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802e58:	e0fff317 	ldw	r3,-52(fp)
  802e5c:	00bfff84 	movi	r2,-2
  802e60:	1884703a 	and	r2,r3,r2
  802e64:	1001703a 	wrctl	status,r2
  
  return context;
  802e68:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  802e6c:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
  802e70:	00802034 	movhi	r2,128
  802e74:	109d6604 	addi	r2,r2,30104
  802e78:	e0fffd17 	ldw	r3,-12(fp)
  802e7c:	180690fa 	slli	r3,r3,3
  802e80:	10c5883a 	add	r2,r2,r3
  802e84:	e0ffff17 	ldw	r3,-4(fp)
  802e88:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  802e8c:	00802034 	movhi	r2,128
  802e90:	109d6604 	addi	r2,r2,30104
  802e94:	e0fffd17 	ldw	r3,-12(fp)
  802e98:	180690fa 	slli	r3,r3,3
  802e9c:	18c00104 	addi	r3,r3,4
  802ea0:	10c5883a 	add	r2,r2,r3
  802ea4:	e0fffe17 	ldw	r3,-8(fp)
  802ea8:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  802eac:	e0bfff17 	ldw	r2,-4(fp)
  802eb0:	10001f26 	beq	r2,zero,802f30 <alt_irq_register+0x10c>
  802eb4:	e0bffd17 	ldw	r2,-12(fp)
  802eb8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802ebc:	0005303a 	rdctl	r2,status
  802ec0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802ec4:	e0fff517 	ldw	r3,-44(fp)
  802ec8:	00bfff84 	movi	r2,-2
  802ecc:	1884703a 	and	r2,r3,r2
  802ed0:	1001703a 	wrctl	status,r2
  
  return context;
  802ed4:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  802ed8:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
  802edc:	e0bff417 	ldw	r2,-48(fp)
  802ee0:	00c00044 	movi	r3,1
  802ee4:	1884983a 	sll	r2,r3,r2
  802ee8:	1007883a 	mov	r3,r2
  802eec:	00802034 	movhi	r2,128
  802ef0:	109d6104 	addi	r2,r2,30084
  802ef4:	10800017 	ldw	r2,0(r2)
  802ef8:	1886b03a 	or	r3,r3,r2
  802efc:	00802034 	movhi	r2,128
  802f00:	109d6104 	addi	r2,r2,30084
  802f04:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  802f08:	00802034 	movhi	r2,128
  802f0c:	109d6104 	addi	r2,r2,30084
  802f10:	10800017 	ldw	r2,0(r2)
  802f14:	100170fa 	wrctl	ienable,r2
  802f18:	e0bff617 	ldw	r2,-40(fp)
  802f1c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802f20:	e0bff717 	ldw	r2,-36(fp)
  802f24:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  802f28:	0005883a 	mov	r2,zero
  802f2c:	00001f06 	br	802fac <alt_irq_register+0x188>
  802f30:	e0bffd17 	ldw	r2,-12(fp)
  802f34:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  802f38:	0005303a 	rdctl	r2,status
  802f3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  802f40:	e0fff917 	ldw	r3,-28(fp)
  802f44:	00bfff84 	movi	r2,-2
  802f48:	1884703a 	and	r2,r3,r2
  802f4c:	1001703a 	wrctl	status,r2
  
  return context;
  802f50:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  802f54:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
  802f58:	e0bff817 	ldw	r2,-32(fp)
  802f5c:	00c00044 	movi	r3,1
  802f60:	1884983a 	sll	r2,r3,r2
  802f64:	0084303a 	nor	r2,zero,r2
  802f68:	1007883a 	mov	r3,r2
  802f6c:	00802034 	movhi	r2,128
  802f70:	109d6104 	addi	r2,r2,30084
  802f74:	10800017 	ldw	r2,0(r2)
  802f78:	1886703a 	and	r3,r3,r2
  802f7c:	00802034 	movhi	r2,128
  802f80:	109d6104 	addi	r2,r2,30084
  802f84:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  802f88:	00802034 	movhi	r2,128
  802f8c:	109d6104 	addi	r2,r2,30084
  802f90:	10800017 	ldw	r2,0(r2)
  802f94:	100170fa 	wrctl	ienable,r2
  802f98:	e0bffa17 	ldw	r2,-24(fp)
  802f9c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  802fa0:	e0bffb17 	ldw	r2,-20(fp)
  802fa4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  802fa8:	0005883a 	mov	r2,zero
  802fac:	e0bff115 	stw	r2,-60(fp)
  802fb0:	e0bff217 	ldw	r2,-56(fp)
  802fb4:	e0bffc15 	stw	r2,-16(fp)
  802fb8:	e0bffc17 	ldw	r2,-16(fp)
  802fbc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  802fc0:	e0bff117 	ldw	r2,-60(fp)
}
  802fc4:	e037883a 	mov	sp,fp
  802fc8:	df000017 	ldw	fp,0(sp)
  802fcc:	dec00104 	addi	sp,sp,4
  802fd0:	f800283a 	ret

00802fd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  802fd4:	defffe04 	addi	sp,sp,-8
  802fd8:	dfc00115 	stw	ra,4(sp)
  802fdc:	df000015 	stw	fp,0(sp)
  802fe0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  802fe4:	00802034 	movhi	r2,128
  802fe8:	10972e04 	addi	r2,r2,23736
  802fec:	10800017 	ldw	r2,0(r2)
  802ff0:	10000526 	beq	r2,zero,803008 <alt_get_errno+0x34>
  802ff4:	00802034 	movhi	r2,128
  802ff8:	10972e04 	addi	r2,r2,23736
  802ffc:	10800017 	ldw	r2,0(r2)
  803000:	103ee83a 	callr	r2
  803004:	00000206 	br	803010 <alt_get_errno+0x3c>
  803008:	00802034 	movhi	r2,128
  80300c:	109d6504 	addi	r2,r2,30100
}
  803010:	e037883a 	mov	sp,fp
  803014:	dfc00117 	ldw	ra,4(sp)
  803018:	df000017 	ldw	fp,0(sp)
  80301c:	dec00204 	addi	sp,sp,8
  803020:	f800283a 	ret

00803024 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  803024:	defffd04 	addi	sp,sp,-12
  803028:	df000215 	stw	fp,8(sp)
  80302c:	df000204 	addi	fp,sp,8
  803030:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  803034:	e0bfff17 	ldw	r2,-4(fp)
  803038:	10800217 	ldw	r2,8(r2)
  80303c:	10d00034 	orhi	r3,r2,16384
  803040:	e0bfff17 	ldw	r2,-4(fp)
  803044:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  803048:	e03ffe15 	stw	zero,-8(fp)
  80304c:	00001d06 	br	8030c4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  803050:	00802034 	movhi	r2,128
  803054:	1095bf04 	addi	r2,r2,22268
  803058:	e0fffe17 	ldw	r3,-8(fp)
  80305c:	18c00324 	muli	r3,r3,12
  803060:	10c5883a 	add	r2,r2,r3
  803064:	10c00017 	ldw	r3,0(r2)
  803068:	e0bfff17 	ldw	r2,-4(fp)
  80306c:	10800017 	ldw	r2,0(r2)
  803070:	1880111e 	bne	r3,r2,8030b8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  803074:	00802034 	movhi	r2,128
  803078:	1095bf04 	addi	r2,r2,22268
  80307c:	e0fffe17 	ldw	r3,-8(fp)
  803080:	18c00324 	muli	r3,r3,12
  803084:	18c00204 	addi	r3,r3,8
  803088:	10c5883a 	add	r2,r2,r3
  80308c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  803090:	1000090e 	bge	r2,zero,8030b8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  803094:	e0bffe17 	ldw	r2,-8(fp)
  803098:	10c00324 	muli	r3,r2,12
  80309c:	00802034 	movhi	r2,128
  8030a0:	1095bf04 	addi	r2,r2,22268
  8030a4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8030a8:	e0bfff17 	ldw	r2,-4(fp)
  8030ac:	18800226 	beq	r3,r2,8030b8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8030b0:	00bffcc4 	movi	r2,-13
  8030b4:	00000a06 	br	8030e0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8030b8:	e0bffe17 	ldw	r2,-8(fp)
  8030bc:	10800044 	addi	r2,r2,1
  8030c0:	e0bffe15 	stw	r2,-8(fp)
  8030c4:	00802034 	movhi	r2,128
  8030c8:	10972d04 	addi	r2,r2,23732
  8030cc:	10800017 	ldw	r2,0(r2)
  8030d0:	1007883a 	mov	r3,r2
  8030d4:	e0bffe17 	ldw	r2,-8(fp)
  8030d8:	18bfdd2e 	bgeu	r3,r2,803050 <__alt_data_end+0xff803050>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  8030dc:	0005883a 	mov	r2,zero
}
  8030e0:	e037883a 	mov	sp,fp
  8030e4:	df000017 	ldw	fp,0(sp)
  8030e8:	dec00104 	addi	sp,sp,4
  8030ec:	f800283a 	ret

008030f0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  8030f0:	defff604 	addi	sp,sp,-40
  8030f4:	dfc00915 	stw	ra,36(sp)
  8030f8:	df000815 	stw	fp,32(sp)
  8030fc:	df000804 	addi	fp,sp,32
  803100:	e13ffd15 	stw	r4,-12(fp)
  803104:	e17ffe15 	stw	r5,-8(fp)
  803108:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80310c:	00bfffc4 	movi	r2,-1
  803110:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  803114:	00bffb44 	movi	r2,-19
  803118:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80311c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  803120:	e13ffd17 	ldw	r4,-12(fp)
  803124:	01402034 	movhi	r5,128
  803128:	29572b04 	addi	r5,r5,23724
  80312c:	08035ec0 	call	8035ec <alt_find_dev>
  803130:	e0bff815 	stw	r2,-32(fp)
  803134:	e0bff817 	ldw	r2,-32(fp)
  803138:	1000051e 	bne	r2,zero,803150 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80313c:	e13ffd17 	ldw	r4,-12(fp)
  803140:	080367c0 	call	80367c <alt_find_file>
  803144:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  803148:	00800044 	movi	r2,1
  80314c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  803150:	e0bff817 	ldw	r2,-32(fp)
  803154:	10002926 	beq	r2,zero,8031fc <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
  803158:	e13ff817 	ldw	r4,-32(fp)
  80315c:	08037900 	call	803790 <alt_get_fd>
  803160:	e0bff915 	stw	r2,-28(fp)
  803164:	e0bff917 	ldw	r2,-28(fp)
  803168:	1000030e 	bge	r2,zero,803178 <open+0x88>
    {
      status = index;
  80316c:	e0bff917 	ldw	r2,-28(fp)
  803170:	e0bffa15 	stw	r2,-24(fp)
  803174:	00002306 	br	803204 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
  803178:	e0bff917 	ldw	r2,-28(fp)
  80317c:	10c00324 	muli	r3,r2,12
  803180:	00802034 	movhi	r2,128
  803184:	1095bf04 	addi	r2,r2,22268
  803188:	1885883a 	add	r2,r3,r2
  80318c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  803190:	e0fffe17 	ldw	r3,-8(fp)
  803194:	00900034 	movhi	r2,16384
  803198:	10bfffc4 	addi	r2,r2,-1
  80319c:	1886703a 	and	r3,r3,r2
  8031a0:	e0bffc17 	ldw	r2,-16(fp)
  8031a4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8031a8:	e0bffb17 	ldw	r2,-20(fp)
  8031ac:	1000051e 	bne	r2,zero,8031c4 <open+0xd4>
  8031b0:	e13ffc17 	ldw	r4,-16(fp)
  8031b4:	08030240 	call	803024 <alt_file_locked>
  8031b8:	e0bffa15 	stw	r2,-24(fp)
  8031bc:	e0bffa17 	ldw	r2,-24(fp)
  8031c0:	10001016 	blt	r2,zero,803204 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8031c4:	e0bff817 	ldw	r2,-32(fp)
  8031c8:	10800317 	ldw	r2,12(r2)
  8031cc:	10000826 	beq	r2,zero,8031f0 <open+0x100>
  8031d0:	e0bff817 	ldw	r2,-32(fp)
  8031d4:	10800317 	ldw	r2,12(r2)
  8031d8:	e13ffc17 	ldw	r4,-16(fp)
  8031dc:	e17ffd17 	ldw	r5,-12(fp)
  8031e0:	e1bffe17 	ldw	r6,-8(fp)
  8031e4:	e1ffff17 	ldw	r7,-4(fp)
  8031e8:	103ee83a 	callr	r2
  8031ec:	00000106 	br	8031f4 <open+0x104>
  8031f0:	0005883a 	mov	r2,zero
  8031f4:	e0bffa15 	stw	r2,-24(fp)
  8031f8:	00000206 	br	803204 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8031fc:	00bffb44 	movi	r2,-19
  803200:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  803204:	e0bffa17 	ldw	r2,-24(fp)
  803208:	1000090e 	bge	r2,zero,803230 <open+0x140>
  {
    alt_release_fd (index);  
  80320c:	e13ff917 	ldw	r4,-28(fp)
  803210:	08032480 	call	803248 <alt_release_fd>
    ALT_ERRNO = -status;
  803214:	0802fd40 	call	802fd4 <alt_get_errno>
  803218:	1007883a 	mov	r3,r2
  80321c:	e0bffa17 	ldw	r2,-24(fp)
  803220:	0085c83a 	sub	r2,zero,r2
  803224:	18800015 	stw	r2,0(r3)
    return -1;
  803228:	00bfffc4 	movi	r2,-1
  80322c:	00000106 	br	803234 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
  803230:	e0bff917 	ldw	r2,-28(fp)
}
  803234:	e037883a 	mov	sp,fp
  803238:	dfc00117 	ldw	ra,4(sp)
  80323c:	df000017 	ldw	fp,0(sp)
  803240:	dec00204 	addi	sp,sp,8
  803244:	f800283a 	ret

00803248 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  803248:	defffe04 	addi	sp,sp,-8
  80324c:	df000115 	stw	fp,4(sp)
  803250:	df000104 	addi	fp,sp,4
  803254:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  803258:	e0bfff17 	ldw	r2,-4(fp)
  80325c:	108000d0 	cmplti	r2,r2,3
  803260:	10000d1e 	bne	r2,zero,803298 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  803264:	00802034 	movhi	r2,128
  803268:	1095bf04 	addi	r2,r2,22268
  80326c:	e0ffff17 	ldw	r3,-4(fp)
  803270:	18c00324 	muli	r3,r3,12
  803274:	18c00204 	addi	r3,r3,8
  803278:	10c5883a 	add	r2,r2,r3
  80327c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  803280:	00802034 	movhi	r2,128
  803284:	1095bf04 	addi	r2,r2,22268
  803288:	e0ffff17 	ldw	r3,-4(fp)
  80328c:	18c00324 	muli	r3,r3,12
  803290:	10c5883a 	add	r2,r2,r3
  803294:	10000015 	stw	zero,0(r2)
  }
}
  803298:	e037883a 	mov	sp,fp
  80329c:	df000017 	ldw	fp,0(sp)
  8032a0:	dec00104 	addi	sp,sp,4
  8032a4:	f800283a 	ret

008032a8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8032a8:	defffa04 	addi	sp,sp,-24
  8032ac:	df000515 	stw	fp,20(sp)
  8032b0:	df000504 	addi	fp,sp,20
  8032b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8032b8:	0005303a 	rdctl	r2,status
  8032bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8032c0:	e0fffc17 	ldw	r3,-16(fp)
  8032c4:	00bfff84 	movi	r2,-2
  8032c8:	1884703a 	and	r2,r3,r2
  8032cc:	1001703a 	wrctl	status,r2
  
  return context;
  8032d0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8032d4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  8032d8:	e0bfff17 	ldw	r2,-4(fp)
  8032dc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8032e0:	e0bffd17 	ldw	r2,-12(fp)
  8032e4:	10800017 	ldw	r2,0(r2)
  8032e8:	e0fffd17 	ldw	r3,-12(fp)
  8032ec:	18c00117 	ldw	r3,4(r3)
  8032f0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  8032f4:	e0bffd17 	ldw	r2,-12(fp)
  8032f8:	10800117 	ldw	r2,4(r2)
  8032fc:	e0fffd17 	ldw	r3,-12(fp)
  803300:	18c00017 	ldw	r3,0(r3)
  803304:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  803308:	e0bffd17 	ldw	r2,-12(fp)
  80330c:	e0fffd17 	ldw	r3,-12(fp)
  803310:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  803314:	e0bffd17 	ldw	r2,-12(fp)
  803318:	e0fffd17 	ldw	r3,-12(fp)
  80331c:	10c00015 	stw	r3,0(r2)
  803320:	e0bffb17 	ldw	r2,-20(fp)
  803324:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  803328:	e0bffe17 	ldw	r2,-8(fp)
  80332c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  803330:	e037883a 	mov	sp,fp
  803334:	df000017 	ldw	fp,0(sp)
  803338:	dec00104 	addi	sp,sp,4
  80333c:	f800283a 	ret

00803340 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  803340:	defffb04 	addi	sp,sp,-20
  803344:	dfc00415 	stw	ra,16(sp)
  803348:	df000315 	stw	fp,12(sp)
  80334c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  803350:	d0a00817 	ldw	r2,-32736(gp)
  803354:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  803358:	d0a63b17 	ldw	r2,-26388(gp)
  80335c:	10800044 	addi	r2,r2,1
  803360:	d0a63b15 	stw	r2,-26388(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  803364:	00002e06 	br	803420 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  803368:	e0bffd17 	ldw	r2,-12(fp)
  80336c:	10800017 	ldw	r2,0(r2)
  803370:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  803374:	e0bffd17 	ldw	r2,-12(fp)
  803378:	10800403 	ldbu	r2,16(r2)
  80337c:	10803fcc 	andi	r2,r2,255
  803380:	10000426 	beq	r2,zero,803394 <alt_tick+0x54>
  803384:	d0a63b17 	ldw	r2,-26388(gp)
  803388:	1000021e 	bne	r2,zero,803394 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80338c:	e0bffd17 	ldw	r2,-12(fp)
  803390:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  803394:	e0bffd17 	ldw	r2,-12(fp)
  803398:	10800217 	ldw	r2,8(r2)
  80339c:	d0e63b17 	ldw	r3,-26388(gp)
  8033a0:	18801d36 	bltu	r3,r2,803418 <alt_tick+0xd8>
  8033a4:	e0bffd17 	ldw	r2,-12(fp)
  8033a8:	10800403 	ldbu	r2,16(r2)
  8033ac:	10803fcc 	andi	r2,r2,255
  8033b0:	1000191e 	bne	r2,zero,803418 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8033b4:	e0bffd17 	ldw	r2,-12(fp)
  8033b8:	10800317 	ldw	r2,12(r2)
  8033bc:	e0fffd17 	ldw	r3,-12(fp)
  8033c0:	18c00517 	ldw	r3,20(r3)
  8033c4:	1809883a 	mov	r4,r3
  8033c8:	103ee83a 	callr	r2
  8033cc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8033d0:	e0bfff17 	ldw	r2,-4(fp)
  8033d4:	1000031e 	bne	r2,zero,8033e4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  8033d8:	e13ffd17 	ldw	r4,-12(fp)
  8033dc:	08032a80 	call	8032a8 <alt_alarm_stop>
  8033e0:	00000d06 	br	803418 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8033e4:	e0bffd17 	ldw	r2,-12(fp)
  8033e8:	10c00217 	ldw	r3,8(r2)
  8033ec:	e0bfff17 	ldw	r2,-4(fp)
  8033f0:	1887883a 	add	r3,r3,r2
  8033f4:	e0bffd17 	ldw	r2,-12(fp)
  8033f8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8033fc:	e0bffd17 	ldw	r2,-12(fp)
  803400:	10c00217 	ldw	r3,8(r2)
  803404:	d0a63b17 	ldw	r2,-26388(gp)
  803408:	1880032e 	bgeu	r3,r2,803418 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80340c:	e0bffd17 	ldw	r2,-12(fp)
  803410:	00c00044 	movi	r3,1
  803414:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  803418:	e0bffe17 	ldw	r2,-8(fp)
  80341c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  803420:	e0fffd17 	ldw	r3,-12(fp)
  803424:	d0a00804 	addi	r2,gp,-32736
  803428:	18bfcf1e 	bne	r3,r2,803368 <__alt_data_end+0xff803368>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80342c:	0001883a 	nop
}
  803430:	e037883a 	mov	sp,fp
  803434:	dfc00117 	ldw	ra,4(sp)
  803438:	df000017 	ldw	fp,0(sp)
  80343c:	dec00204 	addi	sp,sp,8
  803440:	f800283a 	ret

00803444 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  803444:	defffd04 	addi	sp,sp,-12
  803448:	dfc00215 	stw	ra,8(sp)
  80344c:	df000115 	stw	fp,4(sp)
  803450:	df000104 	addi	fp,sp,4
  803454:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  803458:	e13fff17 	ldw	r4,-4(fp)
  80345c:	08034940 	call	803494 <alt_busy_sleep>
}
  803460:	e037883a 	mov	sp,fp
  803464:	dfc00117 	ldw	ra,4(sp)
  803468:	df000017 	ldw	fp,0(sp)
  80346c:	dec00204 	addi	sp,sp,8
  803470:	f800283a 	ret

00803474 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  803474:	deffff04 	addi	sp,sp,-4
  803478:	df000015 	stw	fp,0(sp)
  80347c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  803480:	000170fa 	wrctl	ienable,zero
}
  803484:	e037883a 	mov	sp,fp
  803488:	df000017 	ldw	fp,0(sp)
  80348c:	dec00104 	addi	sp,sp,4
  803490:	f800283a 	ret

00803494 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  803494:	defffa04 	addi	sp,sp,-24
  803498:	dfc00515 	stw	ra,20(sp)
  80349c:	df000415 	stw	fp,16(sp)
  8034a0:	df000404 	addi	fp,sp,16
  8034a4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8034a8:	008000c4 	movi	r2,3
  8034ac:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  8034b0:	e0fffd17 	ldw	r3,-12(fp)
  8034b4:	008003f4 	movhi	r2,15
  8034b8:	10909004 	addi	r2,r2,16960
  8034bc:	1885383a 	mul	r2,r3,r2
  8034c0:	0100bef4 	movhi	r4,763
  8034c4:	213c2004 	addi	r4,r4,-3968
  8034c8:	100b883a 	mov	r5,r2
  8034cc:	08040ec0 	call	8040ec <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  8034d0:	01200034 	movhi	r4,32768
  8034d4:	213fffc4 	addi	r4,r4,-1
  8034d8:	100b883a 	mov	r5,r2
  8034dc:	08040ec0 	call	8040ec <__udivsi3>
  8034e0:	e13fff17 	ldw	r4,-4(fp)
  8034e4:	100b883a 	mov	r5,r2
  8034e8:	08040ec0 	call	8040ec <__udivsi3>
  8034ec:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8034f0:	e0bffe17 	ldw	r2,-8(fp)
  8034f4:	10002a26 	beq	r2,zero,8035a0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  8034f8:	e03ffc15 	stw	zero,-16(fp)
  8034fc:	00001706 	br	80355c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  803500:	00a00034 	movhi	r2,32768
  803504:	10bfffc4 	addi	r2,r2,-1
  803508:	10bfffc4 	addi	r2,r2,-1
  80350c:	103ffe1e 	bne	r2,zero,803508 <__alt_data_end+0xff803508>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  803510:	e0fffd17 	ldw	r3,-12(fp)
  803514:	008003f4 	movhi	r2,15
  803518:	10909004 	addi	r2,r2,16960
  80351c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  803520:	0100bef4 	movhi	r4,763
  803524:	213c2004 	addi	r4,r4,-3968
  803528:	100b883a 	mov	r5,r2
  80352c:	08040ec0 	call	8040ec <__udivsi3>
  803530:	01200034 	movhi	r4,32768
  803534:	213fffc4 	addi	r4,r4,-1
  803538:	100b883a 	mov	r5,r2
  80353c:	08040ec0 	call	8040ec <__udivsi3>
  803540:	1007883a 	mov	r3,r2
  803544:	e0bfff17 	ldw	r2,-4(fp)
  803548:	10c5c83a 	sub	r2,r2,r3
  80354c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  803550:	e0bffc17 	ldw	r2,-16(fp)
  803554:	10800044 	addi	r2,r2,1
  803558:	e0bffc15 	stw	r2,-16(fp)
  80355c:	e0fffc17 	ldw	r3,-16(fp)
  803560:	e0bffe17 	ldw	r2,-8(fp)
  803564:	18bfe616 	blt	r3,r2,803500 <__alt_data_end+0xff803500>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  803568:	e0fffd17 	ldw	r3,-12(fp)
  80356c:	008003f4 	movhi	r2,15
  803570:	10909004 	addi	r2,r2,16960
  803574:	1885383a 	mul	r2,r3,r2
  803578:	0100bef4 	movhi	r4,763
  80357c:	213c2004 	addi	r4,r4,-3968
  803580:	100b883a 	mov	r5,r2
  803584:	08040ec0 	call	8040ec <__udivsi3>
  803588:	1007883a 	mov	r3,r2
  80358c:	e0bfff17 	ldw	r2,-4(fp)
  803590:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  803594:	10bfffc4 	addi	r2,r2,-1
  803598:	103ffe1e 	bne	r2,zero,803594 <__alt_data_end+0xff803594>
  80359c:	00000d06 	br	8035d4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8035a0:	e0fffd17 	ldw	r3,-12(fp)
  8035a4:	008003f4 	movhi	r2,15
  8035a8:	10909004 	addi	r2,r2,16960
  8035ac:	1885383a 	mul	r2,r3,r2
  8035b0:	0100bef4 	movhi	r4,763
  8035b4:	213c2004 	addi	r4,r4,-3968
  8035b8:	100b883a 	mov	r5,r2
  8035bc:	08040ec0 	call	8040ec <__udivsi3>
  8035c0:	1007883a 	mov	r3,r2
  8035c4:	e0bfff17 	ldw	r2,-4(fp)
  8035c8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8035cc:	10bfffc4 	addi	r2,r2,-1
  8035d0:	00bffe16 	blt	zero,r2,8035cc <__alt_data_end+0xff8035cc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8035d4:	0005883a 	mov	r2,zero
}
  8035d8:	e037883a 	mov	sp,fp
  8035dc:	dfc00117 	ldw	ra,4(sp)
  8035e0:	df000017 	ldw	fp,0(sp)
  8035e4:	dec00204 	addi	sp,sp,8
  8035e8:	f800283a 	ret

008035ec <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8035ec:	defffa04 	addi	sp,sp,-24
  8035f0:	dfc00515 	stw	ra,20(sp)
  8035f4:	df000415 	stw	fp,16(sp)
  8035f8:	df000404 	addi	fp,sp,16
  8035fc:	e13ffe15 	stw	r4,-8(fp)
  803600:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  803604:	e0bfff17 	ldw	r2,-4(fp)
  803608:	10800017 	ldw	r2,0(r2)
  80360c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  803610:	e13ffe17 	ldw	r4,-8(fp)
  803614:	0803c900 	call	803c90 <strlen>
  803618:	10800044 	addi	r2,r2,1
  80361c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803620:	00000d06 	br	803658 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  803624:	e0bffc17 	ldw	r2,-16(fp)
  803628:	10c00217 	ldw	r3,8(r2)
  80362c:	e0bffd17 	ldw	r2,-12(fp)
  803630:	1809883a 	mov	r4,r3
  803634:	e17ffe17 	ldw	r5,-8(fp)
  803638:	100d883a 	mov	r6,r2
  80363c:	08039b80 	call	8039b8 <memcmp>
  803640:	1000021e 	bne	r2,zero,80364c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  803644:	e0bffc17 	ldw	r2,-16(fp)
  803648:	00000706 	br	803668 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80364c:	e0bffc17 	ldw	r2,-16(fp)
  803650:	10800017 	ldw	r2,0(r2)
  803654:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  803658:	e0fffc17 	ldw	r3,-16(fp)
  80365c:	e0bfff17 	ldw	r2,-4(fp)
  803660:	18bff01e 	bne	r3,r2,803624 <__alt_data_end+0xff803624>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  803664:	0005883a 	mov	r2,zero
}
  803668:	e037883a 	mov	sp,fp
  80366c:	dfc00117 	ldw	ra,4(sp)
  803670:	df000017 	ldw	fp,0(sp)
  803674:	dec00204 	addi	sp,sp,8
  803678:	f800283a 	ret

0080367c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80367c:	defffb04 	addi	sp,sp,-20
  803680:	dfc00415 	stw	ra,16(sp)
  803684:	df000315 	stw	fp,12(sp)
  803688:	df000304 	addi	fp,sp,12
  80368c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  803690:	00802034 	movhi	r2,128
  803694:	10972904 	addi	r2,r2,23716
  803698:	10800017 	ldw	r2,0(r2)
  80369c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8036a0:	00003106 	br	803768 <alt_find_file+0xec>
  {
    len = strlen(next->name);
  8036a4:	e0bffd17 	ldw	r2,-12(fp)
  8036a8:	10800217 	ldw	r2,8(r2)
  8036ac:	1009883a 	mov	r4,r2
  8036b0:	0803c900 	call	803c90 <strlen>
  8036b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  8036b8:	e0bffd17 	ldw	r2,-12(fp)
  8036bc:	10c00217 	ldw	r3,8(r2)
  8036c0:	e0bffe17 	ldw	r2,-8(fp)
  8036c4:	10bfffc4 	addi	r2,r2,-1
  8036c8:	1885883a 	add	r2,r3,r2
  8036cc:	10800003 	ldbu	r2,0(r2)
  8036d0:	10803fcc 	andi	r2,r2,255
  8036d4:	1080201c 	xori	r2,r2,128
  8036d8:	10bfe004 	addi	r2,r2,-128
  8036dc:	10800bd8 	cmpnei	r2,r2,47
  8036e0:	1000031e 	bne	r2,zero,8036f0 <alt_find_file+0x74>
    {
      len -= 1;
  8036e4:	e0bffe17 	ldw	r2,-8(fp)
  8036e8:	10bfffc4 	addi	r2,r2,-1
  8036ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8036f0:	e0bffe17 	ldw	r2,-8(fp)
  8036f4:	e0ffff17 	ldw	r3,-4(fp)
  8036f8:	1885883a 	add	r2,r3,r2
  8036fc:	10800003 	ldbu	r2,0(r2)
  803700:	10803fcc 	andi	r2,r2,255
  803704:	1080201c 	xori	r2,r2,128
  803708:	10bfe004 	addi	r2,r2,-128
  80370c:	10800be0 	cmpeqi	r2,r2,47
  803710:	1000081e 	bne	r2,zero,803734 <alt_find_file+0xb8>
  803714:	e0bffe17 	ldw	r2,-8(fp)
  803718:	e0ffff17 	ldw	r3,-4(fp)
  80371c:	1885883a 	add	r2,r3,r2
  803720:	10800003 	ldbu	r2,0(r2)
  803724:	10803fcc 	andi	r2,r2,255
  803728:	1080201c 	xori	r2,r2,128
  80372c:	10bfe004 	addi	r2,r2,-128
  803730:	10000a1e 	bne	r2,zero,80375c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  803734:	e0bffd17 	ldw	r2,-12(fp)
  803738:	10c00217 	ldw	r3,8(r2)
  80373c:	e0bffe17 	ldw	r2,-8(fp)
  803740:	1809883a 	mov	r4,r3
  803744:	e17fff17 	ldw	r5,-4(fp)
  803748:	100d883a 	mov	r6,r2
  80374c:	08039b80 	call	8039b8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  803750:	1000021e 	bne	r2,zero,80375c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  803754:	e0bffd17 	ldw	r2,-12(fp)
  803758:	00000806 	br	80377c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  80375c:	e0bffd17 	ldw	r2,-12(fp)
  803760:	10800017 	ldw	r2,0(r2)
  803764:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  803768:	e0fffd17 	ldw	r3,-12(fp)
  80376c:	00802034 	movhi	r2,128
  803770:	10972904 	addi	r2,r2,23716
  803774:	18bfcb1e 	bne	r3,r2,8036a4 <__alt_data_end+0xff8036a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  803778:	0005883a 	mov	r2,zero
}
  80377c:	e037883a 	mov	sp,fp
  803780:	dfc00117 	ldw	ra,4(sp)
  803784:	df000017 	ldw	fp,0(sp)
  803788:	dec00204 	addi	sp,sp,8
  80378c:	f800283a 	ret

00803790 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  803790:	defffc04 	addi	sp,sp,-16
  803794:	df000315 	stw	fp,12(sp)
  803798:	df000304 	addi	fp,sp,12
  80379c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8037a0:	00bffa04 	movi	r2,-24
  8037a4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8037a8:	e03ffd15 	stw	zero,-12(fp)
  8037ac:	00001d06 	br	803824 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
  8037b0:	00802034 	movhi	r2,128
  8037b4:	1095bf04 	addi	r2,r2,22268
  8037b8:	e0fffd17 	ldw	r3,-12(fp)
  8037bc:	18c00324 	muli	r3,r3,12
  8037c0:	10c5883a 	add	r2,r2,r3
  8037c4:	10800017 	ldw	r2,0(r2)
  8037c8:	1000131e 	bne	r2,zero,803818 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
  8037cc:	00802034 	movhi	r2,128
  8037d0:	1095bf04 	addi	r2,r2,22268
  8037d4:	e0fffd17 	ldw	r3,-12(fp)
  8037d8:	18c00324 	muli	r3,r3,12
  8037dc:	10c5883a 	add	r2,r2,r3
  8037e0:	e0ffff17 	ldw	r3,-4(fp)
  8037e4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8037e8:	00802034 	movhi	r2,128
  8037ec:	10972d04 	addi	r2,r2,23732
  8037f0:	10c00017 	ldw	r3,0(r2)
  8037f4:	e0bffd17 	ldw	r2,-12(fp)
  8037f8:	1880040e 	bge	r3,r2,80380c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
  8037fc:	00802034 	movhi	r2,128
  803800:	10972d04 	addi	r2,r2,23732
  803804:	e0fffd17 	ldw	r3,-12(fp)
  803808:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  80380c:	e0bffd17 	ldw	r2,-12(fp)
  803810:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  803814:	00000606 	br	803830 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  803818:	e0bffd17 	ldw	r2,-12(fp)
  80381c:	10800044 	addi	r2,r2,1
  803820:	e0bffd15 	stw	r2,-12(fp)
  803824:	e0bffd17 	ldw	r2,-12(fp)
  803828:	10800810 	cmplti	r2,r2,32
  80382c:	103fe01e 	bne	r2,zero,8037b0 <__alt_data_end+0xff8037b0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  803830:	e0bffe17 	ldw	r2,-8(fp)
}
  803834:	e037883a 	mov	sp,fp
  803838:	df000017 	ldw	fp,0(sp)
  80383c:	dec00104 	addi	sp,sp,4
  803840:	f800283a 	ret

00803844 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  803844:	defffb04 	addi	sp,sp,-20
  803848:	df000415 	stw	fp,16(sp)
  80384c:	df000404 	addi	fp,sp,16
  803850:	e13ffe15 	stw	r4,-8(fp)
  803854:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  803858:	e0bfff17 	ldw	r2,-4(fp)
  80385c:	10840070 	cmpltui	r2,r2,4097
  803860:	1000021e 	bne	r2,zero,80386c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  803864:	00840004 	movi	r2,4096
  803868:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80386c:	e0fffe17 	ldw	r3,-8(fp)
  803870:	e0bfff17 	ldw	r2,-4(fp)
  803874:	1885883a 	add	r2,r3,r2
  803878:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80387c:	e0bffe17 	ldw	r2,-8(fp)
  803880:	e0bffc15 	stw	r2,-16(fp)
  803884:	00000506 	br	80389c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  803888:	e0bffc17 	ldw	r2,-16(fp)
  80388c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  803890:	e0bffc17 	ldw	r2,-16(fp)
  803894:	10800804 	addi	r2,r2,32
  803898:	e0bffc15 	stw	r2,-16(fp)
  80389c:	e0fffc17 	ldw	r3,-16(fp)
  8038a0:	e0bffd17 	ldw	r2,-12(fp)
  8038a4:	18bff836 	bltu	r3,r2,803888 <__alt_data_end+0xff803888>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  8038a8:	e0bffe17 	ldw	r2,-8(fp)
  8038ac:	108007cc 	andi	r2,r2,31
  8038b0:	10000226 	beq	r2,zero,8038bc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  8038b4:	e0bffc17 	ldw	r2,-16(fp)
  8038b8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  8038bc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  8038c0:	e037883a 	mov	sp,fp
  8038c4:	df000017 	ldw	fp,0(sp)
  8038c8:	dec00104 	addi	sp,sp,4
  8038cc:	f800283a 	ret

008038d0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  8038d0:	defffe04 	addi	sp,sp,-8
  8038d4:	df000115 	stw	fp,4(sp)
  8038d8:	df000104 	addi	fp,sp,4
  8038dc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  8038e0:	e0bfff17 	ldw	r2,-4(fp)
  8038e4:	10bffe84 	addi	r2,r2,-6
  8038e8:	10c00428 	cmpgeui	r3,r2,16
  8038ec:	18001a1e 	bne	r3,zero,803958 <alt_exception_cause_generated_bad_addr+0x88>
  8038f0:	100690ba 	slli	r3,r2,2
  8038f4:	00802034 	movhi	r2,128
  8038f8:	108e4204 	addi	r2,r2,14600
  8038fc:	1885883a 	add	r2,r3,r2
  803900:	10800017 	ldw	r2,0(r2)
  803904:	1000683a 	jmp	r2
  803908:	00803948 	cmpgei	r2,zero,229
  80390c:	00803948 	cmpgei	r2,zero,229
  803910:	00803958 	cmpnei	r2,zero,229
  803914:	00803958 	cmpnei	r2,zero,229
  803918:	00803958 	cmpnei	r2,zero,229
  80391c:	00803948 	cmpgei	r2,zero,229
  803920:	00803950 	cmplti	r2,zero,229
  803924:	00803958 	cmpnei	r2,zero,229
  803928:	00803948 	cmpgei	r2,zero,229
  80392c:	00803948 	cmpgei	r2,zero,229
  803930:	00803958 	cmpnei	r2,zero,229
  803934:	00803948 	cmpgei	r2,zero,229
  803938:	00803950 	cmplti	r2,zero,229
  80393c:	00803958 	cmpnei	r2,zero,229
  803940:	00803958 	cmpnei	r2,zero,229
  803944:	00803948 	cmpgei	r2,zero,229
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  803948:	00800044 	movi	r2,1
  80394c:	00000306 	br	80395c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  803950:	0005883a 	mov	r2,zero
  803954:	00000106 	br	80395c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  803958:	0005883a 	mov	r2,zero
  }
}
  80395c:	e037883a 	mov	sp,fp
  803960:	df000017 	ldw	fp,0(sp)
  803964:	dec00104 	addi	sp,sp,4
  803968:	f800283a 	ret

0080396c <atexit>:
  80396c:	200b883a 	mov	r5,r4
  803970:	000d883a 	mov	r6,zero
  803974:	0009883a 	mov	r4,zero
  803978:	000f883a 	mov	r7,zero
  80397c:	0803d281 	jmpi	803d28 <__register_exitproc>

00803980 <exit>:
  803980:	defffe04 	addi	sp,sp,-8
  803984:	000b883a 	mov	r5,zero
  803988:	dc000015 	stw	r16,0(sp)
  80398c:	dfc00115 	stw	ra,4(sp)
  803990:	2021883a 	mov	r16,r4
  803994:	0803e3c0 	call	803e3c <__call_exitprocs>
  803998:	00802034 	movhi	r2,128
  80399c:	10973304 	addi	r2,r2,23756
  8039a0:	11000017 	ldw	r4,0(r2)
  8039a4:	20800f17 	ldw	r2,60(r4)
  8039a8:	10000126 	beq	r2,zero,8039b0 <exit+0x30>
  8039ac:	103ee83a 	callr	r2
  8039b0:	8009883a 	mov	r4,r16
  8039b4:	08040fc0 	call	8040fc <_exit>

008039b8 <memcmp>:
  8039b8:	01c000c4 	movi	r7,3
  8039bc:	3980192e 	bgeu	r7,r6,803a24 <memcmp+0x6c>
  8039c0:	2144b03a 	or	r2,r4,r5
  8039c4:	11c4703a 	and	r2,r2,r7
  8039c8:	10000f26 	beq	r2,zero,803a08 <memcmp+0x50>
  8039cc:	20800003 	ldbu	r2,0(r4)
  8039d0:	28c00003 	ldbu	r3,0(r5)
  8039d4:	10c0151e 	bne	r2,r3,803a2c <memcmp+0x74>
  8039d8:	31bfff84 	addi	r6,r6,-2
  8039dc:	01ffffc4 	movi	r7,-1
  8039e0:	00000406 	br	8039f4 <memcmp+0x3c>
  8039e4:	20800003 	ldbu	r2,0(r4)
  8039e8:	28c00003 	ldbu	r3,0(r5)
  8039ec:	31bfffc4 	addi	r6,r6,-1
  8039f0:	10c00e1e 	bne	r2,r3,803a2c <memcmp+0x74>
  8039f4:	21000044 	addi	r4,r4,1
  8039f8:	29400044 	addi	r5,r5,1
  8039fc:	31fff91e 	bne	r6,r7,8039e4 <__alt_data_end+0xff8039e4>
  803a00:	0005883a 	mov	r2,zero
  803a04:	f800283a 	ret
  803a08:	20c00017 	ldw	r3,0(r4)
  803a0c:	28800017 	ldw	r2,0(r5)
  803a10:	1880041e 	bne	r3,r2,803a24 <memcmp+0x6c>
  803a14:	31bfff04 	addi	r6,r6,-4
  803a18:	21000104 	addi	r4,r4,4
  803a1c:	29400104 	addi	r5,r5,4
  803a20:	39bff936 	bltu	r7,r6,803a08 <__alt_data_end+0xff803a08>
  803a24:	303fe91e 	bne	r6,zero,8039cc <__alt_data_end+0xff8039cc>
  803a28:	003ff506 	br	803a00 <__alt_data_end+0xff803a00>
  803a2c:	10c5c83a 	sub	r2,r2,r3
  803a30:	f800283a 	ret

00803a34 <memcpy>:
  803a34:	deffff04 	addi	sp,sp,-4
  803a38:	dc000015 	stw	r16,0(sp)
  803a3c:	00c003c4 	movi	r3,15
  803a40:	2005883a 	mov	r2,r4
  803a44:	1980432e 	bgeu	r3,r6,803b54 <memcpy+0x120>
  803a48:	2146b03a 	or	r3,r4,r5
  803a4c:	18c000cc 	andi	r3,r3,3
  803a50:	1800421e 	bne	r3,zero,803b5c <memcpy+0x128>
  803a54:	343ffc04 	addi	r16,r6,-16
  803a58:	8020d13a 	srli	r16,r16,4
  803a5c:	28c00104 	addi	r3,r5,4
  803a60:	23400104 	addi	r13,r4,4
  803a64:	801e913a 	slli	r15,r16,4
  803a68:	2b000204 	addi	r12,r5,8
  803a6c:	22c00204 	addi	r11,r4,8
  803a70:	7bc00504 	addi	r15,r15,20
  803a74:	2a800304 	addi	r10,r5,12
  803a78:	22400304 	addi	r9,r4,12
  803a7c:	2bdf883a 	add	r15,r5,r15
  803a80:	2811883a 	mov	r8,r5
  803a84:	200f883a 	mov	r7,r4
  803a88:	41000017 	ldw	r4,0(r8)
  803a8c:	39c00404 	addi	r7,r7,16
  803a90:	18c00404 	addi	r3,r3,16
  803a94:	393ffc15 	stw	r4,-16(r7)
  803a98:	1bbffc17 	ldw	r14,-16(r3)
  803a9c:	6b400404 	addi	r13,r13,16
  803aa0:	5ac00404 	addi	r11,r11,16
  803aa4:	6bbffc15 	stw	r14,-16(r13)
  803aa8:	63800017 	ldw	r14,0(r12)
  803aac:	4a400404 	addi	r9,r9,16
  803ab0:	42000404 	addi	r8,r8,16
  803ab4:	5bbffc15 	stw	r14,-16(r11)
  803ab8:	53800017 	ldw	r14,0(r10)
  803abc:	63000404 	addi	r12,r12,16
  803ac0:	52800404 	addi	r10,r10,16
  803ac4:	4bbffc15 	stw	r14,-16(r9)
  803ac8:	1bffef1e 	bne	r3,r15,803a88 <__alt_data_end+0xff803a88>
  803acc:	81c00044 	addi	r7,r16,1
  803ad0:	380e913a 	slli	r7,r7,4
  803ad4:	310003cc 	andi	r4,r6,15
  803ad8:	02c000c4 	movi	r11,3
  803adc:	11c7883a 	add	r3,r2,r7
  803ae0:	29cb883a 	add	r5,r5,r7
  803ae4:	59001f2e 	bgeu	r11,r4,803b64 <memcpy+0x130>
  803ae8:	1813883a 	mov	r9,r3
  803aec:	2811883a 	mov	r8,r5
  803af0:	200f883a 	mov	r7,r4
  803af4:	42800017 	ldw	r10,0(r8)
  803af8:	4a400104 	addi	r9,r9,4
  803afc:	39ffff04 	addi	r7,r7,-4
  803b00:	4abfff15 	stw	r10,-4(r9)
  803b04:	42000104 	addi	r8,r8,4
  803b08:	59fffa36 	bltu	r11,r7,803af4 <__alt_data_end+0xff803af4>
  803b0c:	213fff04 	addi	r4,r4,-4
  803b10:	2008d0ba 	srli	r4,r4,2
  803b14:	318000cc 	andi	r6,r6,3
  803b18:	21000044 	addi	r4,r4,1
  803b1c:	2109883a 	add	r4,r4,r4
  803b20:	2109883a 	add	r4,r4,r4
  803b24:	1907883a 	add	r3,r3,r4
  803b28:	290b883a 	add	r5,r5,r4
  803b2c:	30000626 	beq	r6,zero,803b48 <memcpy+0x114>
  803b30:	198d883a 	add	r6,r3,r6
  803b34:	29c00003 	ldbu	r7,0(r5)
  803b38:	18c00044 	addi	r3,r3,1
  803b3c:	29400044 	addi	r5,r5,1
  803b40:	19ffffc5 	stb	r7,-1(r3)
  803b44:	19bffb1e 	bne	r3,r6,803b34 <__alt_data_end+0xff803b34>
  803b48:	dc000017 	ldw	r16,0(sp)
  803b4c:	dec00104 	addi	sp,sp,4
  803b50:	f800283a 	ret
  803b54:	2007883a 	mov	r3,r4
  803b58:	003ff406 	br	803b2c <__alt_data_end+0xff803b2c>
  803b5c:	2007883a 	mov	r3,r4
  803b60:	003ff306 	br	803b30 <__alt_data_end+0xff803b30>
  803b64:	200d883a 	mov	r6,r4
  803b68:	003ff006 	br	803b2c <__alt_data_end+0xff803b2c>

00803b6c <memset>:
  803b6c:	20c000cc 	andi	r3,r4,3
  803b70:	2005883a 	mov	r2,r4
  803b74:	18004326 	beq	r3,zero,803c84 <memset+0x118>
  803b78:	31ffffc4 	addi	r7,r6,-1
  803b7c:	30004026 	beq	r6,zero,803c80 <memset+0x114>
  803b80:	2813883a 	mov	r9,r5
  803b84:	200d883a 	mov	r6,r4
  803b88:	2007883a 	mov	r3,r4
  803b8c:	00000406 	br	803ba0 <memset+0x34>
  803b90:	3a3fffc4 	addi	r8,r7,-1
  803b94:	31800044 	addi	r6,r6,1
  803b98:	38003926 	beq	r7,zero,803c80 <memset+0x114>
  803b9c:	400f883a 	mov	r7,r8
  803ba0:	18c00044 	addi	r3,r3,1
  803ba4:	32400005 	stb	r9,0(r6)
  803ba8:	1a0000cc 	andi	r8,r3,3
  803bac:	403ff81e 	bne	r8,zero,803b90 <__alt_data_end+0xff803b90>
  803bb0:	010000c4 	movi	r4,3
  803bb4:	21c02d2e 	bgeu	r4,r7,803c6c <memset+0x100>
  803bb8:	29803fcc 	andi	r6,r5,255
  803bbc:	3008923a 	slli	r4,r6,8
  803bc0:	218cb03a 	or	r6,r4,r6
  803bc4:	3008943a 	slli	r4,r6,16
  803bc8:	218cb03a 	or	r6,r4,r6
  803bcc:	010003c4 	movi	r4,15
  803bd0:	21c0182e 	bgeu	r4,r7,803c34 <memset+0xc8>
  803bd4:	3b3ffc04 	addi	r12,r7,-16
  803bd8:	6018d13a 	srli	r12,r12,4
  803bdc:	1a000104 	addi	r8,r3,4
  803be0:	1ac00204 	addi	r11,r3,8
  803be4:	6008913a 	slli	r4,r12,4
  803be8:	1a800304 	addi	r10,r3,12
  803bec:	1813883a 	mov	r9,r3
  803bf0:	21000504 	addi	r4,r4,20
  803bf4:	1909883a 	add	r4,r3,r4
  803bf8:	49800015 	stw	r6,0(r9)
  803bfc:	41800015 	stw	r6,0(r8)
  803c00:	59800015 	stw	r6,0(r11)
  803c04:	51800015 	stw	r6,0(r10)
  803c08:	42000404 	addi	r8,r8,16
  803c0c:	4a400404 	addi	r9,r9,16
  803c10:	5ac00404 	addi	r11,r11,16
  803c14:	52800404 	addi	r10,r10,16
  803c18:	413ff71e 	bne	r8,r4,803bf8 <__alt_data_end+0xff803bf8>
  803c1c:	63000044 	addi	r12,r12,1
  803c20:	6018913a 	slli	r12,r12,4
  803c24:	39c003cc 	andi	r7,r7,15
  803c28:	010000c4 	movi	r4,3
  803c2c:	1b07883a 	add	r3,r3,r12
  803c30:	21c00e2e 	bgeu	r4,r7,803c6c <memset+0x100>
  803c34:	1813883a 	mov	r9,r3
  803c38:	3811883a 	mov	r8,r7
  803c3c:	010000c4 	movi	r4,3
  803c40:	49800015 	stw	r6,0(r9)
  803c44:	423fff04 	addi	r8,r8,-4
  803c48:	4a400104 	addi	r9,r9,4
  803c4c:	223ffc36 	bltu	r4,r8,803c40 <__alt_data_end+0xff803c40>
  803c50:	393fff04 	addi	r4,r7,-4
  803c54:	2008d0ba 	srli	r4,r4,2
  803c58:	39c000cc 	andi	r7,r7,3
  803c5c:	21000044 	addi	r4,r4,1
  803c60:	2109883a 	add	r4,r4,r4
  803c64:	2109883a 	add	r4,r4,r4
  803c68:	1907883a 	add	r3,r3,r4
  803c6c:	38000426 	beq	r7,zero,803c80 <memset+0x114>
  803c70:	19cf883a 	add	r7,r3,r7
  803c74:	19400005 	stb	r5,0(r3)
  803c78:	18c00044 	addi	r3,r3,1
  803c7c:	19fffd1e 	bne	r3,r7,803c74 <__alt_data_end+0xff803c74>
  803c80:	f800283a 	ret
  803c84:	2007883a 	mov	r3,r4
  803c88:	300f883a 	mov	r7,r6
  803c8c:	003fc806 	br	803bb0 <__alt_data_end+0xff803bb0>

00803c90 <strlen>:
  803c90:	208000cc 	andi	r2,r4,3
  803c94:	10002026 	beq	r2,zero,803d18 <strlen+0x88>
  803c98:	20800007 	ldb	r2,0(r4)
  803c9c:	10002026 	beq	r2,zero,803d20 <strlen+0x90>
  803ca0:	2005883a 	mov	r2,r4
  803ca4:	00000206 	br	803cb0 <strlen+0x20>
  803ca8:	10c00007 	ldb	r3,0(r2)
  803cac:	18001826 	beq	r3,zero,803d10 <strlen+0x80>
  803cb0:	10800044 	addi	r2,r2,1
  803cb4:	10c000cc 	andi	r3,r2,3
  803cb8:	183ffb1e 	bne	r3,zero,803ca8 <__alt_data_end+0xff803ca8>
  803cbc:	10c00017 	ldw	r3,0(r2)
  803cc0:	01ffbff4 	movhi	r7,65279
  803cc4:	39ffbfc4 	addi	r7,r7,-257
  803cc8:	00ca303a 	nor	r5,zero,r3
  803ccc:	01a02074 	movhi	r6,32897
  803cd0:	19c7883a 	add	r3,r3,r7
  803cd4:	31a02004 	addi	r6,r6,-32640
  803cd8:	1946703a 	and	r3,r3,r5
  803cdc:	1986703a 	and	r3,r3,r6
  803ce0:	1800091e 	bne	r3,zero,803d08 <strlen+0x78>
  803ce4:	10800104 	addi	r2,r2,4
  803ce8:	10c00017 	ldw	r3,0(r2)
  803cec:	19cb883a 	add	r5,r3,r7
  803cf0:	00c6303a 	nor	r3,zero,r3
  803cf4:	28c6703a 	and	r3,r5,r3
  803cf8:	1986703a 	and	r3,r3,r6
  803cfc:	183ff926 	beq	r3,zero,803ce4 <__alt_data_end+0xff803ce4>
  803d00:	00000106 	br	803d08 <strlen+0x78>
  803d04:	10800044 	addi	r2,r2,1
  803d08:	10c00007 	ldb	r3,0(r2)
  803d0c:	183ffd1e 	bne	r3,zero,803d04 <__alt_data_end+0xff803d04>
  803d10:	1105c83a 	sub	r2,r2,r4
  803d14:	f800283a 	ret
  803d18:	2005883a 	mov	r2,r4
  803d1c:	003fe706 	br	803cbc <__alt_data_end+0xff803cbc>
  803d20:	0005883a 	mov	r2,zero
  803d24:	f800283a 	ret

00803d28 <__register_exitproc>:
  803d28:	00802034 	movhi	r2,128
  803d2c:	defffa04 	addi	sp,sp,-24
  803d30:	10973304 	addi	r2,r2,23756
  803d34:	dc000315 	stw	r16,12(sp)
  803d38:	14000017 	ldw	r16,0(r2)
  803d3c:	dc400415 	stw	r17,16(sp)
  803d40:	dfc00515 	stw	ra,20(sp)
  803d44:	80805217 	ldw	r2,328(r16)
  803d48:	2023883a 	mov	r17,r4
  803d4c:	10003626 	beq	r2,zero,803e28 <__register_exitproc+0x100>
  803d50:	10c00117 	ldw	r3,4(r2)
  803d54:	010007c4 	movi	r4,31
  803d58:	20c00e16 	blt	r4,r3,803d94 <__register_exitproc+0x6c>
  803d5c:	1a400044 	addi	r9,r3,1
  803d60:	8800211e 	bne	r17,zero,803de8 <__register_exitproc+0xc0>
  803d64:	18c00084 	addi	r3,r3,2
  803d68:	18c7883a 	add	r3,r3,r3
  803d6c:	18c7883a 	add	r3,r3,r3
  803d70:	12400115 	stw	r9,4(r2)
  803d74:	10c7883a 	add	r3,r2,r3
  803d78:	19400015 	stw	r5,0(r3)
  803d7c:	0005883a 	mov	r2,zero
  803d80:	dfc00517 	ldw	ra,20(sp)
  803d84:	dc400417 	ldw	r17,16(sp)
  803d88:	dc000317 	ldw	r16,12(sp)
  803d8c:	dec00604 	addi	sp,sp,24
  803d90:	f800283a 	ret
  803d94:	00800034 	movhi	r2,0
  803d98:	10800004 	addi	r2,r2,0
  803d9c:	10002526 	beq	r2,zero,803e34 <__register_exitproc+0x10c>
  803da0:	01006404 	movi	r4,400
  803da4:	d9400015 	stw	r5,0(sp)
  803da8:	d9800115 	stw	r6,4(sp)
  803dac:	d9c00215 	stw	r7,8(sp)
  803db0:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  803db4:	d9400017 	ldw	r5,0(sp)
  803db8:	d9800117 	ldw	r6,4(sp)
  803dbc:	d9c00217 	ldw	r7,8(sp)
  803dc0:	10001c26 	beq	r2,zero,803e34 <__register_exitproc+0x10c>
  803dc4:	80c05217 	ldw	r3,328(r16)
  803dc8:	10000115 	stw	zero,4(r2)
  803dcc:	02400044 	movi	r9,1
  803dd0:	10c00015 	stw	r3,0(r2)
  803dd4:	80805215 	stw	r2,328(r16)
  803dd8:	10006215 	stw	zero,392(r2)
  803ddc:	10006315 	stw	zero,396(r2)
  803de0:	0007883a 	mov	r3,zero
  803de4:	883fdf26 	beq	r17,zero,803d64 <__alt_data_end+0xff803d64>
  803de8:	18d1883a 	add	r8,r3,r3
  803dec:	4211883a 	add	r8,r8,r8
  803df0:	1211883a 	add	r8,r2,r8
  803df4:	41802215 	stw	r6,136(r8)
  803df8:	01000044 	movi	r4,1
  803dfc:	11806217 	ldw	r6,392(r2)
  803e00:	20c8983a 	sll	r4,r4,r3
  803e04:	310cb03a 	or	r6,r6,r4
  803e08:	11806215 	stw	r6,392(r2)
  803e0c:	41c04215 	stw	r7,264(r8)
  803e10:	01800084 	movi	r6,2
  803e14:	89bfd31e 	bne	r17,r6,803d64 <__alt_data_end+0xff803d64>
  803e18:	11806317 	ldw	r6,396(r2)
  803e1c:	3108b03a 	or	r4,r6,r4
  803e20:	11006315 	stw	r4,396(r2)
  803e24:	003fcf06 	br	803d64 <__alt_data_end+0xff803d64>
  803e28:	80805304 	addi	r2,r16,332
  803e2c:	80805215 	stw	r2,328(r16)
  803e30:	003fc706 	br	803d50 <__alt_data_end+0xff803d50>
  803e34:	00bfffc4 	movi	r2,-1
  803e38:	003fd106 	br	803d80 <__alt_data_end+0xff803d80>

00803e3c <__call_exitprocs>:
  803e3c:	00802034 	movhi	r2,128
  803e40:	10973304 	addi	r2,r2,23756
  803e44:	10800017 	ldw	r2,0(r2)
  803e48:	defff404 	addi	sp,sp,-48
  803e4c:	dd800815 	stw	r22,32(sp)
  803e50:	d8800015 	stw	r2,0(sp)
  803e54:	10805204 	addi	r2,r2,328
  803e58:	dd000615 	stw	r20,24(sp)
  803e5c:	dc800415 	stw	r18,16(sp)
  803e60:	dfc00b15 	stw	ra,44(sp)
  803e64:	df000a15 	stw	fp,40(sp)
  803e68:	ddc00915 	stw	r23,36(sp)
  803e6c:	dd400715 	stw	r21,28(sp)
  803e70:	dcc00515 	stw	r19,20(sp)
  803e74:	dc400315 	stw	r17,12(sp)
  803e78:	dc000215 	stw	r16,8(sp)
  803e7c:	2025883a 	mov	r18,r4
  803e80:	2829883a 	mov	r20,r5
  803e84:	d8800115 	stw	r2,4(sp)
  803e88:	05bfffc4 	movi	r22,-1
  803e8c:	d8800017 	ldw	r2,0(sp)
  803e90:	14c05217 	ldw	r19,328(r2)
  803e94:	98001d26 	beq	r19,zero,803f0c <__call_exitprocs+0xd0>
  803e98:	dd400117 	ldw	r21,4(sp)
  803e9c:	98800117 	ldw	r2,4(r19)
  803ea0:	173fffc4 	addi	fp,r2,-1
  803ea4:	e0000d16 	blt	fp,zero,803edc <__call_exitprocs+0xa0>
  803ea8:	14000044 	addi	r16,r2,1
  803eac:	8421883a 	add	r16,r16,r16
  803eb0:	8421883a 	add	r16,r16,r16
  803eb4:	84402004 	addi	r17,r16,128
  803eb8:	9c63883a 	add	r17,r19,r17
  803ebc:	9c21883a 	add	r16,r19,r16
  803ec0:	a0001e26 	beq	r20,zero,803f3c <__call_exitprocs+0x100>
  803ec4:	80804017 	ldw	r2,256(r16)
  803ec8:	15001c26 	beq	r2,r20,803f3c <__call_exitprocs+0x100>
  803ecc:	e73fffc4 	addi	fp,fp,-1
  803ed0:	843fff04 	addi	r16,r16,-4
  803ed4:	8c7fff04 	addi	r17,r17,-4
  803ed8:	e5bff91e 	bne	fp,r22,803ec0 <__alt_data_end+0xff803ec0>
  803edc:	00800034 	movhi	r2,0
  803ee0:	10800004 	addi	r2,r2,0
  803ee4:	10000926 	beq	r2,zero,803f0c <__call_exitprocs+0xd0>
  803ee8:	98800117 	ldw	r2,4(r19)
  803eec:	1000311e 	bne	r2,zero,803fb4 <__call_exitprocs+0x178>
  803ef0:	98800017 	ldw	r2,0(r19)
  803ef4:	10003426 	beq	r2,zero,803fc8 <__call_exitprocs+0x18c>
  803ef8:	9809883a 	mov	r4,r19
  803efc:	a8800015 	stw	r2,0(r21)
  803f00:	00000000 	call	0 <__alt_mem_sdram_0-0x800000>
  803f04:	acc00017 	ldw	r19,0(r21)
  803f08:	983fe41e 	bne	r19,zero,803e9c <__alt_data_end+0xff803e9c>
  803f0c:	dfc00b17 	ldw	ra,44(sp)
  803f10:	df000a17 	ldw	fp,40(sp)
  803f14:	ddc00917 	ldw	r23,36(sp)
  803f18:	dd800817 	ldw	r22,32(sp)
  803f1c:	dd400717 	ldw	r21,28(sp)
  803f20:	dd000617 	ldw	r20,24(sp)
  803f24:	dcc00517 	ldw	r19,20(sp)
  803f28:	dc800417 	ldw	r18,16(sp)
  803f2c:	dc400317 	ldw	r17,12(sp)
  803f30:	dc000217 	ldw	r16,8(sp)
  803f34:	dec00c04 	addi	sp,sp,48
  803f38:	f800283a 	ret
  803f3c:	98800117 	ldw	r2,4(r19)
  803f40:	80c00017 	ldw	r3,0(r16)
  803f44:	10bfffc4 	addi	r2,r2,-1
  803f48:	17001526 	beq	r2,fp,803fa0 <__call_exitprocs+0x164>
  803f4c:	80000015 	stw	zero,0(r16)
  803f50:	183fde26 	beq	r3,zero,803ecc <__alt_data_end+0xff803ecc>
  803f54:	00800044 	movi	r2,1
  803f58:	1708983a 	sll	r4,r2,fp
  803f5c:	98806217 	ldw	r2,392(r19)
  803f60:	9dc00117 	ldw	r23,4(r19)
  803f64:	2084703a 	and	r2,r4,r2
  803f68:	1000061e 	bne	r2,zero,803f84 <__call_exitprocs+0x148>
  803f6c:	183ee83a 	callr	r3
  803f70:	98800117 	ldw	r2,4(r19)
  803f74:	15ffc51e 	bne	r2,r23,803e8c <__alt_data_end+0xff803e8c>
  803f78:	a8800017 	ldw	r2,0(r21)
  803f7c:	14ffd326 	beq	r2,r19,803ecc <__alt_data_end+0xff803ecc>
  803f80:	003fc206 	br	803e8c <__alt_data_end+0xff803e8c>
  803f84:	98806317 	ldw	r2,396(r19)
  803f88:	2084703a 	and	r2,r4,r2
  803f8c:	1000061e 	bne	r2,zero,803fa8 <__call_exitprocs+0x16c>
  803f90:	89400017 	ldw	r5,0(r17)
  803f94:	9009883a 	mov	r4,r18
  803f98:	183ee83a 	callr	r3
  803f9c:	003ff406 	br	803f70 <__alt_data_end+0xff803f70>
  803fa0:	9f000115 	stw	fp,4(r19)
  803fa4:	003fea06 	br	803f50 <__alt_data_end+0xff803f50>
  803fa8:	89000017 	ldw	r4,0(r17)
  803fac:	183ee83a 	callr	r3
  803fb0:	003fef06 	br	803f70 <__alt_data_end+0xff803f70>
  803fb4:	98800017 	ldw	r2,0(r19)
  803fb8:	982b883a 	mov	r21,r19
  803fbc:	1027883a 	mov	r19,r2
  803fc0:	983fb61e 	bne	r19,zero,803e9c <__alt_data_end+0xff803e9c>
  803fc4:	003fd106 	br	803f0c <__alt_data_end+0xff803f0c>
  803fc8:	0005883a 	mov	r2,zero
  803fcc:	003ffa06 	br	803fb8 <__alt_data_end+0xff803fb8>

00803fd0 <udivmodsi4>:
  803fd0:	2900182e 	bgeu	r5,r4,804034 <udivmodsi4+0x64>
  803fd4:	28001716 	blt	r5,zero,804034 <udivmodsi4+0x64>
  803fd8:	00800804 	movi	r2,32
  803fdc:	00c00044 	movi	r3,1
  803fe0:	00000206 	br	803fec <udivmodsi4+0x1c>
  803fe4:	10001126 	beq	r2,zero,80402c <udivmodsi4+0x5c>
  803fe8:	28000516 	blt	r5,zero,804000 <udivmodsi4+0x30>
  803fec:	294b883a 	add	r5,r5,r5
  803ff0:	10bfffc4 	addi	r2,r2,-1
  803ff4:	18c7883a 	add	r3,r3,r3
  803ff8:	293ffa36 	bltu	r5,r4,803fe4 <__alt_data_end+0xff803fe4>
  803ffc:	18000b26 	beq	r3,zero,80402c <udivmodsi4+0x5c>
  804000:	0005883a 	mov	r2,zero
  804004:	21400236 	bltu	r4,r5,804010 <udivmodsi4+0x40>
  804008:	2149c83a 	sub	r4,r4,r5
  80400c:	10c4b03a 	or	r2,r2,r3
  804010:	1806d07a 	srli	r3,r3,1
  804014:	280ad07a 	srli	r5,r5,1
  804018:	183ffa1e 	bne	r3,zero,804004 <__alt_data_end+0xff804004>
  80401c:	3000011e 	bne	r6,zero,804024 <udivmodsi4+0x54>
  804020:	f800283a 	ret
  804024:	2005883a 	mov	r2,r4
  804028:	f800283a 	ret
  80402c:	0005883a 	mov	r2,zero
  804030:	003ffa06 	br	80401c <__alt_data_end+0xff80401c>
  804034:	00c00044 	movi	r3,1
  804038:	003ff106 	br	804000 <__alt_data_end+0xff804000>

0080403c <__divsi3>:
  80403c:	defffe04 	addi	sp,sp,-8
  804040:	dfc00115 	stw	ra,4(sp)
  804044:	dc000015 	stw	r16,0(sp)
  804048:	20000b16 	blt	r4,zero,804078 <__divsi3+0x3c>
  80404c:	0021883a 	mov	r16,zero
  804050:	28000c16 	blt	r5,zero,804084 <__divsi3+0x48>
  804054:	000d883a 	mov	r6,zero
  804058:	0803fd00 	call	803fd0 <udivmodsi4>
  80405c:	0407c83a 	sub	r3,zero,r16
  804060:	1884f03a 	xor	r2,r3,r2
  804064:	1405883a 	add	r2,r2,r16
  804068:	dfc00117 	ldw	ra,4(sp)
  80406c:	dc000017 	ldw	r16,0(sp)
  804070:	dec00204 	addi	sp,sp,8
  804074:	f800283a 	ret
  804078:	0109c83a 	sub	r4,zero,r4
  80407c:	04000044 	movi	r16,1
  804080:	283ff40e 	bge	r5,zero,804054 <__alt_data_end+0xff804054>
  804084:	014bc83a 	sub	r5,zero,r5
  804088:	8400005c 	xori	r16,r16,1
  80408c:	003ff106 	br	804054 <__alt_data_end+0xff804054>

00804090 <__modsi3>:
  804090:	defffd04 	addi	sp,sp,-12
  804094:	dfc00215 	stw	ra,8(sp)
  804098:	dc400115 	stw	r17,4(sp)
  80409c:	dc000015 	stw	r16,0(sp)
  8040a0:	20000c16 	blt	r4,zero,8040d4 <__modsi3+0x44>
  8040a4:	0023883a 	mov	r17,zero
  8040a8:	0021883a 	mov	r16,zero
  8040ac:	28000d16 	blt	r5,zero,8040e4 <__modsi3+0x54>
  8040b0:	01800044 	movi	r6,1
  8040b4:	0803fd00 	call	803fd0 <udivmodsi4>
  8040b8:	1404f03a 	xor	r2,r2,r16
  8040bc:	8885883a 	add	r2,r17,r2
  8040c0:	dfc00217 	ldw	ra,8(sp)
  8040c4:	dc400117 	ldw	r17,4(sp)
  8040c8:	dc000017 	ldw	r16,0(sp)
  8040cc:	dec00304 	addi	sp,sp,12
  8040d0:	f800283a 	ret
  8040d4:	0109c83a 	sub	r4,zero,r4
  8040d8:	04400044 	movi	r17,1
  8040dc:	043fffc4 	movi	r16,-1
  8040e0:	283ff30e 	bge	r5,zero,8040b0 <__alt_data_end+0xff8040b0>
  8040e4:	014bc83a 	sub	r5,zero,r5
  8040e8:	003ff106 	br	8040b0 <__alt_data_end+0xff8040b0>

008040ec <__udivsi3>:
  8040ec:	000d883a 	mov	r6,zero
  8040f0:	0803fd01 	jmpi	803fd0 <udivmodsi4>

008040f4 <__umodsi3>:
  8040f4:	01800044 	movi	r6,1
  8040f8:	0803fd01 	jmpi	803fd0 <udivmodsi4>

008040fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  8040fc:	defffd04 	addi	sp,sp,-12
  804100:	df000215 	stw	fp,8(sp)
  804104:	df000204 	addi	fp,sp,8
  804108:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80410c:	0001883a 	nop
  804110:	e0bfff17 	ldw	r2,-4(fp)
  804114:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  804118:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80411c:	10000226 	beq	r2,zero,804128 <_exit+0x2c>
    ALT_SIM_FAIL();
  804120:	002af070 	cmpltui	zero,zero,43969
  804124:	00000106 	br	80412c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  804128:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80412c:	003fff06 	br	80412c <__alt_data_end+0xff80412c>
